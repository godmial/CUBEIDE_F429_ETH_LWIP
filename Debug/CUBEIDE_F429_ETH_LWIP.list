
CUBEIDE_F429_ETH_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcf4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800fea4  0800fea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a68  08012a68  00014088  2**0
                  CONTENTS
  4 .ARM          00000008  08012a68  08012a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a70  08012a70  00014088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a70  08012a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012a74  08012a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012a78  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014088  2**0
                  CONTENTS
 10 .bss          000084fc  20000088  20000088  00014088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008584  20008584  00014088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dece  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053f4  00000000  00000000  00031f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001279  00000000  00000000  00038a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fd95  00000000  00000000  00039ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028939  00000000  00000000  00069a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed7a7  00000000  00000000  000923b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017fb5e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006624  00000000  00000000  0017fba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001861c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fe8c 	.word	0x0800fe8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800fe8c 	.word	0x0800fe8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <PCF8574_WriteBit>:
#ifdef __STM32F4xx_HAL_I2C_H

extern I2C_HandleTypeDef hi2c2;

void PCF8574_WriteBit(uint8_t IO_Num,uint8_t IO_Sta)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
	uint8_t IO_Sta_Get[2]={0};
 8000590:	2300      	movs	r3, #0
 8000592:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Receive(&hi2c2, 0x40, IO_Sta_Get, 1, 1000);
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	2140      	movs	r1, #64	@ 0x40
 80005a2:	4816      	ldr	r0, [pc, #88]	@ (80005fc <PCF8574_WriteBit+0x7c>)
 80005a4:	f002 fb3c 	bl	8002c20 <HAL_I2C_Master_Receive>
	  if(IO_Sta==0)//清零
 80005a8:	79bb      	ldrb	r3, [r7, #6]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10d      	bne.n	80005ca <PCF8574_WriteBit+0x4a>
	  {
		  IO_Sta_Get[0]=IO_Sta_Get[0]&(~(1<<IO_Num));
 80005ae:	7b3b      	ldrb	r3, [r7, #12]
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2101      	movs	r1, #1
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4013      	ands	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	733b      	strb	r3, [r7, #12]
 80005c8:	e00a      	b.n	80005e0 <PCF8574_WriteBit+0x60>
	  }else{
		  IO_Sta_Get[0]=IO_Sta_Get[0]|(1<<IO_Num);
 80005ca:	7b3b      	ldrb	r3, [r7, #12]
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2101      	movs	r1, #1
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	733b      	strb	r3, [r7, #12]
	  }
	  HAL_I2C_Master_Transmit(&hi2c2, 0x40, IO_Sta_Get, 1, 1000);
 80005e0:	f107 020c 	add.w	r2, r7, #12
 80005e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	2140      	movs	r1, #64	@ 0x40
 80005ee:	4803      	ldr	r0, [pc, #12]	@ (80005fc <PCF8574_WriteBit+0x7c>)
 80005f0:	f002 fa18 	bl	8002a24 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000a4 	.word	0x200000a4

08000600 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000608:	1d39      	adds	r1, r7, #4
 800060a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800060e:	2201      	movs	r2, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <__io_putchar+0x20>)
 8000612:	f003 fe31 	bl	8004278 <HAL_UART_Transmit>
  return ch;
 8000616:	687b      	ldr	r3, [r7, #4]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000f8 	.word	0x200000f8

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fc8e 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f80c 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 f8e4 	bl	80007fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f8b8 	bl	80007a8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000638:	f000 f876 	bl	8000728 <MX_I2C2_Init>
  MX_LWIP_Init();
 800063c:	f004 f9d8 	bl	80049f0 <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000640:	f004 fb16 	bl	8004c70 <MX_LWIP_Process>
 8000644:	e7fc      	b.n	8000640 <main+0x1c>
	...

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00e fd73 	bl	800f142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <SystemClock_Config+0xd8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <SystemClock_Config+0xd8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <SystemClock_Config+0xd8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <SystemClock_Config+0xdc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <SystemClock_Config+0xdc>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <SystemClock_Config+0xdc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006bc:	23b4      	movs	r3, #180	@ 0xb4
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 f92b 	bl	8003928 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f8e2 	bl	80008a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006dc:	f003 f8d4 	bl	8003888 <HAL_PWREx_EnableOverDrive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006e6:	f000 f8db 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fb85 	bl	8003e18 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000714:	f000 f8c4 	bl	80008a0 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_I2C2_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <MX_I2C2_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_I2C2_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	@ (80007a4 <MX_I2C2_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 128;
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_I2C2_Init+0x74>)
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_I2C2_Init+0x74>)
 8000746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	@ (800079c <MX_I2C2_Init+0x74>)
 8000766:	f002 f819 	bl	800279c <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f896 	bl	80008a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4809      	ldr	r0, [pc, #36]	@ (800079c <MX_I2C2_Init+0x74>)
 8000778:	f003 f80a 	bl	8003790 <HAL_I2CEx_ConfigAnalogFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 f88d 	bl	80008a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_I2C2_Init+0x74>)
 800078a:	f003 f83d 	bl	8003808 <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f884 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000a4 	.word	0x200000a4
 80007a0:	40005800 	.word	0x40005800
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	@ (80007f8 <MX_USART1_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f003 fcfa 	bl	80041d8 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f859 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f8 	.word	0x200000f8
 80007f8:	40011000 	.word	0x40011000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b087      	sub	sp, #28
 8000800:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a24      	ldr	r2, [pc, #144]	@ (800089c <MX_GPIO_Init+0xa0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a16      	ldr	r2, [pc, #88]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_GPIO_Init+0xa0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_GPIO_Init+0xa0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <MX_GPIO_Init+0xa0>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_GPIO_Init+0xa0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088e:	bf00      	nop
 8000890:	371c      	adds	r7, #28
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <Error_Handler+0x8>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <HAL_I2C_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12b      	bne.n	8000976 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <HAL_I2C_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <HAL_I2C_MspInit+0x88>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_I2C_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800093a:	2330      	movs	r3, #48	@ 0x30
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093e:	2312      	movs	r3, #18
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800094a:	2304      	movs	r3, #4
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <HAL_I2C_MspInit+0x8c>)
 8000956:	f001 fd75 	bl	8002444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_I2C_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_I2C_MspInit+0x88>)
 8000964:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_I2C_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40005800 	.word	0x40005800
 8000984:	40023800 	.word	0x40023800
 8000988:	40021c00 	.word	0x40021c00

0800098c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a19      	ldr	r2, [pc, #100]	@ (8000a10 <HAL_UART_MspInit+0x84>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d12c      	bne.n	8000a08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009b8:	f043 0310 	orr.w	r3, r3, #16
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f003 0310 	and.w	r3, r3, #16
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f8:	2307      	movs	r3, #7
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <HAL_UART_MspInit+0x8c>)
 8000a04:	f001 fd1e 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	@ 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40011000 	.word	0x40011000
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 fabb 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <_kill>:

int _kill(int pid, int sig)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a96:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <_kill+0x20>)
 8000a98:	2216      	movs	r2, #22
 8000a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	20008574 	.word	0x20008574

08000ab0 <_exit>:

void _exit (int status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffe5 	bl	8000a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ac2:	bf00      	nop
 8000ac4:	e7fd      	b.n	8000ac2 <_exit+0x12>

08000ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e00a      	b.n	8000aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad8:	f3af 8000 	nop.w
 8000adc:	4601      	mov	r1, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	60ba      	str	r2, [r7, #8]
 8000ae4:	b2ca      	uxtb	r2, r1
 8000ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbf0      	blt.n	8000ad8 <_read+0x12>
  }

  return len;
 8000af6:	687b      	ldr	r3, [r7, #4]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e009      	b.n	8000b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd70 	bl	8000600 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	dbf1      	blt.n	8000b12 <_write+0x12>
  }
  return len;
 8000b2e:	687b      	ldr	r3, [r7, #4]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_close>:

int _close(int file)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b60:	605a      	str	r2, [r3, #4]
  return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_isatty>:

int _isatty(int file)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d205      	bcs.n	8000bdc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <_sbrk+0x6c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a06      	ldr	r2, [pc, #24]	@ (8000c04 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	20030000 	.word	0x20030000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000140 	.word	0x20000140
 8000c08:	20008588 	.word	0x20008588
 8000c0c:	20008574 	.word	0x20008574

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f00e fabd 	bl	800f1e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fcdd 	bl	8000624 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c78:	08012a78 	.word	0x08012a78
  ldr r2, =_sbss
 8000c7c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c80:	20008584 	.word	0x20008584

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>

08000c86 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <LAN8742_RegisterBusIO+0x28>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <LAN8742_RegisterBusIO+0x28>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <LAN8742_RegisterBusIO+0x28>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e014      	b.n	8000cde <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d17c      	bne.n	8000e04 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e01c      	b.n	8000d5e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f107 0208 	add.w	r2, r7, #8
 8000d2c:	2112      	movs	r1, #18
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	4798      	blx	r3
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da03      	bge.n	8000d40 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d38:	f06f 0304 	mvn.w	r3, #4
 8000d3c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d3e:	e00b      	b.n	8000d58 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d105      	bne.n	8000d58 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
         break;
 8000d56:	e005      	b.n	8000d64 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b1f      	cmp	r3, #31
 8000d62:	d9df      	bls.n	8000d24 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b1f      	cmp	r3, #31
 8000d6a:	d902      	bls.n	8000d72 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d6c:	f06f 0302 	mvn.w	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d145      	bne.n	8000e04 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6810      	ldr	r0, [r2, #0]
 8000d80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d84:	2100      	movs	r1, #0
 8000d86:	4798      	blx	r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db37      	blt.n	8000dfe <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	6810      	ldr	r0, [r2, #0]
 8000d96:	f107 0208 	add.w	r2, r7, #8
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4798      	blx	r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db28      	blt.n	8000df6 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4798      	blx	r3
 8000daa:	4603      	mov	r3, r0
 8000dac:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dae:	e01c      	b.n	8000dea <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4798      	blx	r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000dc2:	d80e      	bhi.n	8000de2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6810      	ldr	r0, [r2, #0]
 8000dcc:	f107 0208 	add.w	r2, r7, #8
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4798      	blx	r3
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	da07      	bge.n	8000dea <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000dda:	f06f 0304 	mvn.w	r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
                 break;
 8000de0:	e010      	b.n	8000e04 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000de2:	f06f 0301 	mvn.w	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
               break;
 8000de8:	e00c      	b.n	8000e04 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1dd      	bne.n	8000db0 <LAN8742_Init+0xc6>
 8000df4:	e006      	b.n	8000e04 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000df6:	f06f 0304 	mvn.w	r3, #4
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e002      	b.n	8000e04 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000dfe:	f06f 0303 	mvn.w	r3, #3
 8000e02:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d112      	bne.n	8000e30 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4798      	blx	r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e14:	bf00      	nop
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4798      	blx	r3
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e28:	d9f5      	bls.n	8000e16 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000e30:	693b      	ldr	r3, [r7, #16]
 }
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6810      	ldr	r0, [r2, #0]
 8000e4e:	f107 020c 	add.w	r2, r7, #12
 8000e52:	2101      	movs	r1, #1
 8000e54:	4798      	blx	r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	da02      	bge.n	8000e62 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e5c:	f06f 0304 	mvn.w	r3, #4
 8000e60:	e06e      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6810      	ldr	r0, [r2, #0]
 8000e6a:	f107 020c 	add.w	r2, r7, #12
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4798      	blx	r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da02      	bge.n	8000e7e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e78:	f06f 0304 	mvn.w	r3, #4
 8000e7c:	e060      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e059      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6810      	ldr	r0, [r2, #0]
 8000e94:	f107 020c 	add.w	r2, r7, #12
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4798      	blx	r3
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	da02      	bge.n	8000ea8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ea2:	f06f 0304 	mvn.w	r3, #4
 8000ea6:	e04b      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d11b      	bne.n	8000eea <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <LAN8742_GetLinkState+0x90>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e03a      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e033      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	e02c      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	e02a      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6810      	ldr	r0, [r2, #0]
 8000ef2:	f107 020c 	add.w	r2, r7, #12
 8000ef6:	211f      	movs	r1, #31
 8000ef8:	4798      	blx	r3
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	da02      	bge.n	8000f06 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f00:	f06f 0304 	mvn.w	r3, #4
 8000f04:	e01c      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f10:	2306      	movs	r3, #6
 8000f12:	e015      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 031c 	and.w	r3, r3, #28
 8000f1a:	2b18      	cmp	r3, #24
 8000f1c:	d101      	bne.n	8000f22 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e00e      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f003 031c 	and.w	r3, r3, #28
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d101      	bne.n	8000f30 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e007      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 031c 	and.w	r3, r3, #28
 8000f36:	2b14      	cmp	r3, #20
 8000f38:	d101      	bne.n	8000f3e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e000      	b.n	8000f40 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f3e:	2305      	movs	r3, #5
    }
  }
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	@ (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f931 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fc96 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f93b 	bl	8001226 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f911 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	20000144 	.word	0x20000144

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000144 	.word	0x20000144

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	@ (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	@ (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	@ 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff47 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff5c 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffb0 	bl	8001194 <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06c      	b.n	800132c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2223      	movs	r2, #35	@ 0x23
 8001260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f003 febf 	bl	8004fe8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <HAL_ETH_Init+0xf4>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a30      	ldr	r2, [pc, #192]	@ (8001334 <HAL_ETH_Init+0xf4>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <HAL_ETH_Init+0xf4>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001286:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <HAL_ETH_Init+0xf8>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <HAL_ETH_Init+0xf8>)
 800128c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001290:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <HAL_ETH_Init+0xf8>)
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4927      	ldr	r1, [pc, #156]	@ (8001338 <HAL_ETH_Init+0xf8>)
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012a0:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <HAL_ETH_Init+0xf8>)
 80012a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012bc:	f7ff feaa 	bl	8001014 <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012c2:	e011      	b.n	80012e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012c4:	f7ff fea6 	bl	8001014 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012d2:	d909      	bls.n	80012e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2204      	movs	r2, #4
 80012d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	22e0      	movs	r2, #224	@ 0xe0
 80012e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e021      	b.n	800132c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e4      	bne.n	80012c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fdfc 	bl	8001ef8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 fea3 	bl	800204c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fef9 	bl	80020fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	461a      	mov	r2, r3
 8001312:	2100      	movs	r1, #0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fe61 	bl	8001fdc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2210      	movs	r2, #16
 8001326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800

0800133c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800134a:	2b10      	cmp	r3, #16
 800134c:	d150      	bne.n	80013f0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2223      	movs	r2, #35	@ 0x23
 8001352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2204      	movs	r2, #4
 800135a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f9fd 	bl	800175c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0208 	orr.w	r2, r2, #8
 8001370:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fe56 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0204 	orr.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fe43 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fc42 	bl	8001c38 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ca:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013e2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2223      	movs	r2, #35	@ 0x23
 80013e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e000      	b.n	80013f2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
  }
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001408:	2b23      	cmp	r3, #35	@ 0x23
 800140a:	d14a      	bne.n	80014a2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2223      	movs	r2, #35	@ 0x23
 8001410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001426:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800142a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	f023 0302 	bic.w	r3, r3, #2
 800143e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001442:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0204 	bic.w	r2, r2, #4
 8001452:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff fde5 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fbe4 	bl	8001c38 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0208 	bic.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fdcf 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2210      	movs	r2, #16
 800149a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07c      	b.n	80015cc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014d8:	2b23      	cmp	r3, #35	@ 0x23
 80014da:	d176      	bne.n	80015ca <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80014dc:	2200      	movs	r2, #0
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 fe79 	bl	80021d8 <ETH_Prepare_Tx_Descriptors>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e065      	b.n	80015cc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001500:	f3bf 8f4f 	dsb	sy
}
 8001504:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3206      	adds	r2, #6
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001522:	2b03      	cmp	r3, #3
 8001524:	d904      	bls.n	8001530 <HAL_ETH_Transmit+0x84>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800152a:	1f1a      	subs	r2, r3, #4
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3106      	adds	r1, #6
 800153c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001540:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001544:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001546:	f7ff fd65 	bl	8001014 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800154c:	e037      	b.n	80015be <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d011      	beq.n	8001584 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001566:	f043 0208 	orr.w	r2, r3, #8
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e023      	b.n	80015cc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d018      	beq.n	80015be <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800158c:	f7ff fd42 	bl	8001014 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d302      	bcc.n	80015a2 <HAL_ETH_Transmit+0xf6>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a8:	f043 0204 	orr.w	r2, r3, #4
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80015b8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e006      	b.n	80015cc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dbc3      	blt.n	800154e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0a8      	b.n	8001752 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001606:	2b23      	cmp	r3, #35	@ 0x23
 8001608:	d001      	beq.n	800160e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0a1      	b.n	8001752 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	3212      	adds	r2, #18
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001624:	f1c3 0304 	rsb	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800162a:	e06a      	b.n	8001702 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d007      	beq.n	8001648 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <HAL_ETH_ReadData+0x88>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d040      	beq.n	80016de <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00c      	beq.n	80016a0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0c1b      	lsrs	r3, r3, #16
 800168c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001690:	3b04      	subs	r3, #4
 8001692:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016b8:	461a      	mov	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f003 fe8d 	bl	80053dc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	441a      	add	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d902      	bls.n	80016f0 <HAL_ETH_ReadData+0x11c>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b04      	subs	r3, #4
 80016ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	3212      	adds	r2, #18
 80016f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001706:	2b00      	cmp	r3, #0
 8001708:	db06      	blt.n	8001718 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	d202      	bcs.n	8001718 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d089      	beq.n	800162c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	441a      	add	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f815 	bl	800175c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	e000      	b.n	8001752 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001768:	2301      	movs	r3, #1
 800176a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001770:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	3212      	adds	r2, #18
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001782:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001784:	e03d      	b.n	8001802 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d112      	bne.n	80017b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fdf2 	bl	800537c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	74fb      	strb	r3, [r7, #19]
 80017a2:	e007      	b.n	80017b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	461a      	mov	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	461a      	mov	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017b4:	7cfb      	ldrb	r3, [r7, #19]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d023      	beq.n	8001802 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4a24      	ldr	r2, [pc, #144]	@ (8001858 <ETH_UpdateDescriptor+0xfc>)
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e003      	b.n	80017d2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80017d0:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d902      	bls.n	80017f0 <ETH_UpdateDescriptor+0x94>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b04      	subs	r3, #4
 80017ee:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	3212      	adds	r2, #18
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	617b      	str	r3, [r7, #20]
      desccount--;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	3b01      	subs	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <ETH_UpdateDescriptor+0xb2>
 8001808:	7cfb      	ldrb	r3, [r7, #19]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1bb      	bne.n	8001786 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	429a      	cmp	r2, r3
 8001816:	d01a      	beq.n	800184e <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	3301      	adds	r3, #1
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001822:	f3bf 8f5f 	dmb	sy
}
 8001826:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6919      	ldr	r1, [r3, #16]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	18ca      	adds	r2, r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001840:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	80004600 	.word	0x80004600

0800185c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 031c 	and.w	r3, r3, #28
 8001878:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	02db      	lsls	r3, r3, #11
 800187e:	b29b      	uxth	r3, r3
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4313      	orrs	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f023 0302 	bic.w	r3, r3, #2
 800189a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80018ac:	f7ff fbb2 	bl	8001014 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018b2:	e00d      	b.n	80018d0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80018b4:	f7ff fbae 	bl	8001014 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c2:	d301      	bcc.n	80018c8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e010      	b.n	80018ea <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ec      	bne.n	80018b4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 031c 	and.w	r3, r3, #28
 800190e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	02db      	lsls	r3, r3, #11
 8001914:	b29b      	uxth	r3, r3
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	019b      	lsls	r3, r3, #6
 8001920:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194c:	f7ff fb62 	bl	8001014 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001952:	e00d      	b.n	8001970 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001954:	f7ff fb5e 	bl	8001014 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001962:	d301      	bcc.n	8001968 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e009      	b.n	800197c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ec      	bne.n	8001954 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0d9      	b.n	8001b4c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf14      	ite	ne
 80019a6:	2301      	movne	r3, #1
 80019a8:	2300      	moveq	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf14      	ite	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	2300      	moveq	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e00b      	b.n	8001b84 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d105      	bne.n	8001b82 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001b76:	6839      	ldr	r1, [r7, #0]
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f883 	bl	8001c84 <ETH_SetMACConfig>

    return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 031c 	bic.w	r3, r3, #28
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ba4:	f002 fae4 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8001ba8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d908      	bls.n	8001bc4 <HAL_ETH_SetMDIOClockRange+0x38>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d804      	bhi.n	8001bc4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e027      	b.n	8001c14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d908      	bls.n	8001bde <HAL_ETH_SetMDIOClockRange+0x52>
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4a17      	ldr	r2, [pc, #92]	@ (8001c2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d204      	bcs.n	8001bde <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f043 030c 	orr.w	r3, r3, #12
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e01a      	b.n	8001c14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d303      	bcc.n	8001bee <HAL_ETH_SetMDIOClockRange+0x62>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4a11      	ldr	r2, [pc, #68]	@ (8001c30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d911      	bls.n	8001c12 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d908      	bls.n	8001c08 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c34 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d804      	bhi.n	8001c08 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	e005      	b.n	8001c14 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e000      	b.n	8001c14 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c12:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	01312cff 	.word	0x01312cff
 8001c28:	02160ebf 	.word	0x02160ebf
 8001c2c:	03938700 	.word	0x03938700
 8001c30:	05f5e0ff 	.word	0x05f5e0ff
 8001c34:	08f0d17f 	.word	0x08f0d17f

08001c38 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c5a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7ff f9df 	bl	800102c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c78:	6193      	str	r3, [r2, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4b51      	ldr	r3, [pc, #324]	@ (8001de0 <ETH_SetMACConfig+0x15c>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	7c1b      	ldrb	r3, [r3, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <ETH_SetMACConfig+0x28>
 8001ca6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001caa:	e000      	b.n	8001cae <ETH_SetMACConfig+0x2a>
 8001cac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	7c5b      	ldrb	r3, [r3, #17]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <ETH_SetMACConfig+0x38>
 8001cb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cba:	e000      	b.n	8001cbe <ETH_SetMACConfig+0x3a>
 8001cbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	7fdb      	ldrb	r3, [r3, #31]
 8001cca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ccc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	7f92      	ldrb	r2, [r2, #30]
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d102      	bne.n	8001ce2 <ETH_SetMACConfig+0x5e>
 8001cdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce0:	e000      	b.n	8001ce4 <ETH_SetMACConfig+0x60>
 8001ce2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7f1b      	ldrb	r3, [r3, #28]
 8001cea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d102      	bne.n	8001d0c <ETH_SetMACConfig+0x88>
 8001d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d0a:	e000      	b.n	8001d0e <ETH_SetMACConfig+0x8a>
 8001d0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	7bdb      	ldrb	r3, [r3, #15]
 8001d14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d26:	4313      	orrs	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7ff f974 	bl	800102c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d6a:	2a00      	cmp	r2, #0
 8001d6c:	d101      	bne.n	8001d72 <ETH_SetMACConfig+0xee>
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	e000      	b.n	8001d74 <ETH_SetMACConfig+0xf0>
 8001d72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d82:	2a01      	cmp	r2, #1
 8001d84:	d101      	bne.n	8001d8a <ETH_SetMACConfig+0x106>
 8001d86:	2208      	movs	r2, #8
 8001d88:	e000      	b.n	8001d8c <ETH_SetMACConfig+0x108>
 8001d8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d94:	2a01      	cmp	r2, #1
 8001d96:	d101      	bne.n	8001d9c <ETH_SetMACConfig+0x118>
 8001d98:	2204      	movs	r2, #4
 8001d9a:	e000      	b.n	8001d9e <ETH_SetMACConfig+0x11a>
 8001d9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001da6:	2a01      	cmp	r2, #1
 8001da8:	d101      	bne.n	8001dae <ETH_SetMACConfig+0x12a>
 8001daa:	2202      	movs	r2, #2
 8001dac:	e000      	b.n	8001db0 <ETH_SetMACConfig+0x12c>
 8001dae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001db0:	4313      	orrs	r3, r2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff f92f 	bl	800102c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	ff20810f 	.word	0xff20810f

08001de4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef4 <ETH_SetDMAConfig+0x110>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	7b1b      	ldrb	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <ETH_SetDMAConfig+0x2c>
 8001e0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e0e:	e000      	b.n	8001e12 <ETH_SetDMAConfig+0x2e>
 8001e10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	7b5b      	ldrb	r3, [r3, #13]
 8001e16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	7f52      	ldrb	r2, [r2, #29]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d102      	bne.n	8001e28 <ETH_SetDMAConfig+0x44>
 8001e22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e26:	e000      	b.n	8001e2a <ETH_SetDMAConfig+0x46>
 8001e28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	7b9b      	ldrb	r3, [r3, #14]
 8001e30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	7f1b      	ldrb	r3, [r3, #28]
 8001e3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7f9b      	ldrb	r3, [r3, #30]
 8001e46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff f8d6 	bl	800102c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	791b      	ldrb	r3, [r3, #4]
 8001e92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ea4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001eac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001eae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001eb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ebc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ec6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7ff f8a7 	bl	800102c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	f8de3f23 	.word	0xf8de3f23

08001ef8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0a6      	sub	sp, #152	@ 0x98
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f34:	2300      	movs	r3, #0
 8001f36:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fe86 	bl	8001c84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fc8:	f107 0308 	add.w	r3, r7, #8
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff08 	bl	8001de4 <ETH_SetDMAConfig>
}
 8001fd4:	bf00      	nop
 8001fd6:	3798      	adds	r7, #152	@ 0x98
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3305      	adds	r3, #5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	3204      	adds	r2, #4
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <ETH_MACAddressConfig+0x68>)
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3303      	adds	r3, #3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	061a      	lsls	r2, r3, #24
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3302      	adds	r3, #2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3301      	adds	r3, #1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	4313      	orrs	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <ETH_MACAddressConfig+0x6c>)
 800202e:	4413      	add	r3, r2
 8002030:	461a      	mov	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6013      	str	r3, [r2, #0]
}
 8002036:	bf00      	nop
 8002038:	371c      	adds	r7, #28
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40028040 	.word	0x40028040
 8002048:	40028044 	.word	0x40028044

0800204c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e03e      	b.n	80020d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68d9      	ldr	r1, [r3, #12]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	3206      	adds	r2, #6
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d80c      	bhi.n	80020bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68d9      	ldr	r1, [r3, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	e004      	b.n	80020c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d9bd      	bls.n	800205a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f0:	611a      	str	r2, [r3, #16]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e046      	b.n	800219a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002148:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002150:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	3212      	adds	r2, #18
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d80c      	bhi.n	800218a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6919      	ldr	r1, [r3, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	461a      	mov	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	e004      	b.n	8002194 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	461a      	mov	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d9b5      	bls.n	800210c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ca:	60da      	str	r2, [r3, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80021d8:	b480      	push	{r7}
 80021da:	b08d      	sub	sp, #52	@ 0x34
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3318      	adds	r3, #24
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002216:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800221a:	d007      	beq.n	800222c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	3304      	adds	r3, #4
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	e103      	b.n	8002438 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	3301      	adds	r3, #1
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002248:	f023 031f 	bic.w	r3, r3, #31
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	6852      	ldr	r2, [r2, #4]
 8002250:	431a      	orrs	r2, r3
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	431a      	orrs	r2, r3
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	431a      	orrs	r2, r3
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80022b6:	f3bf 8f5f 	dmb	sy
}
 80022ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80022c8:	e084      	b.n	80023d4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e005      	b.n	80022f6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f8:	3301      	adds	r3, #1
 80022fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d902      	bls.n	8002308 <ETH_Prepare_Tx_Descriptors+0x130>
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	3b04      	subs	r3, #4
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800232a:	d007      	beq.n	800233c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	3304      	adds	r3, #4
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d029      	beq.n	8002390 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800234e:	e019      	b.n	8002384 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002350:	f3bf 8f5f 	dmb	sy
}
 8002354:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002364:	3301      	adds	r3, #1
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	2b03      	cmp	r3, #3
 800236c:	d902      	bls.n	8002374 <ETH_Prepare_Tx_Descriptors+0x19c>
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	3b04      	subs	r3, #4
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	3301      	adds	r3, #1
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	429a      	cmp	r2, r3
 800238a:	d3e1      	bcc.n	8002350 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800238c:	2302      	movs	r3, #2
 800238e:	e053      	b.n	8002438 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	3301      	adds	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80023ae:	f023 031f 	bic.w	r3, r3, #31
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	6852      	ldr	r2, [r2, #4]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	3301      	adds	r3, #1
 80023c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80023c2:	f3bf 8f5f 	dmb	sy
}
 80023c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f af76 	bne.w	80022ca <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e005      	b.n	80023fe <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800240e:	6979      	ldr	r1, [r7, #20]
 8002410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002412:	3304      	adds	r3, #4
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800241e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	4413      	add	r3, r2
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002432:	b662      	cpsie	i
}
 8002434:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3734      	adds	r7, #52	@ 0x34
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e177      	b.n	8002750 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 8166 	bne.w	800274a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d005      	beq.n	8002496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	2b02      	cmp	r3, #2
 8002494:	d130      	bne.n	80024f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0201 	and.w	r2, r3, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d017      	beq.n	8002534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80c0 	beq.w	800274a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b66      	ldr	r3, [pc, #408]	@ (8002768 <HAL_GPIO_Init+0x324>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	4a65      	ldr	r2, [pc, #404]	@ (8002768 <HAL_GPIO_Init+0x324>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025da:	4b63      	ldr	r3, [pc, #396]	@ (8002768 <HAL_GPIO_Init+0x324>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e6:	4a61      	ldr	r2, [pc, #388]	@ (800276c <HAL_GPIO_Init+0x328>)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	@ (8002770 <HAL_GPIO_Init+0x32c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d037      	beq.n	8002682 <HAL_GPIO_Init+0x23e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a57      	ldr	r2, [pc, #348]	@ (8002774 <HAL_GPIO_Init+0x330>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d031      	beq.n	800267e <HAL_GPIO_Init+0x23a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_GPIO_Init+0x334>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d02b      	beq.n	800267a <HAL_GPIO_Init+0x236>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a55      	ldr	r2, [pc, #340]	@ (800277c <HAL_GPIO_Init+0x338>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d025      	beq.n	8002676 <HAL_GPIO_Init+0x232>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a54      	ldr	r2, [pc, #336]	@ (8002780 <HAL_GPIO_Init+0x33c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01f      	beq.n	8002672 <HAL_GPIO_Init+0x22e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a53      	ldr	r2, [pc, #332]	@ (8002784 <HAL_GPIO_Init+0x340>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d019      	beq.n	800266e <HAL_GPIO_Init+0x22a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a52      	ldr	r2, [pc, #328]	@ (8002788 <HAL_GPIO_Init+0x344>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0x226>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a51      	ldr	r2, [pc, #324]	@ (800278c <HAL_GPIO_Init+0x348>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00d      	beq.n	8002666 <HAL_GPIO_Init+0x222>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a50      	ldr	r2, [pc, #320]	@ (8002790 <HAL_GPIO_Init+0x34c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <HAL_GPIO_Init+0x21e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <HAL_GPIO_Init+0x350>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_GPIO_Init+0x21a>
 800265a:	2309      	movs	r3, #9
 800265c:	e012      	b.n	8002684 <HAL_GPIO_Init+0x240>
 800265e:	230a      	movs	r3, #10
 8002660:	e010      	b.n	8002684 <HAL_GPIO_Init+0x240>
 8002662:	2308      	movs	r3, #8
 8002664:	e00e      	b.n	8002684 <HAL_GPIO_Init+0x240>
 8002666:	2307      	movs	r3, #7
 8002668:	e00c      	b.n	8002684 <HAL_GPIO_Init+0x240>
 800266a:	2306      	movs	r3, #6
 800266c:	e00a      	b.n	8002684 <HAL_GPIO_Init+0x240>
 800266e:	2305      	movs	r3, #5
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x240>
 8002672:	2304      	movs	r3, #4
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x240>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x240>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x240>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x240>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	@ (800276c <HAL_GPIO_Init+0x328>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_GPIO_Init+0x354>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a34      	ldr	r2, [pc, #208]	@ (8002798 <HAL_GPIO_Init+0x354>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b32      	ldr	r3, [pc, #200]	@ (8002798 <HAL_GPIO_Init+0x354>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a29      	ldr	r2, [pc, #164]	@ (8002798 <HAL_GPIO_Init+0x354>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f6:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <HAL_GPIO_Init+0x354>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271a:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <HAL_GPIO_Init+0x354>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_GPIO_Init+0x354>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002744:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <HAL_GPIO_Init+0x354>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f ae84 	bls.w	8002460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	@ 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40021400 	.word	0x40021400
 8002788:	40021800 	.word	0x40021800
 800278c:	40021c00 	.word	0x40021c00
 8002790:	40022000 	.word	0x40022000
 8002794:	40022400 	.word	0x40022400
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e12b      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe f89a 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002800:	f001 fcc2 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a81      	ldr	r2, [pc, #516]	@ (8002a10 <HAL_I2C_Init+0x274>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d807      	bhi.n	8002820 <HAL_I2C_Init+0x84>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a80      	ldr	r2, [pc, #512]	@ (8002a14 <HAL_I2C_Init+0x278>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e006      	b.n	800282e <HAL_I2C_Init+0x92>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a7d      	ldr	r2, [pc, #500]	@ (8002a18 <HAL_I2C_Init+0x27c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	bf94      	ite	ls
 8002828:	2301      	movls	r3, #1
 800282a:	2300      	movhi	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0e7      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a78      	ldr	r2, [pc, #480]	@ (8002a1c <HAL_I2C_Init+0x280>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a6a      	ldr	r2, [pc, #424]	@ (8002a10 <HAL_I2C_Init+0x274>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d802      	bhi.n	8002870 <HAL_I2C_Init+0xd4>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3301      	adds	r3, #1
 800286e:	e009      	b.n	8002884 <HAL_I2C_Init+0xe8>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a69      	ldr	r2, [pc, #420]	@ (8002a20 <HAL_I2C_Init+0x284>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	3301      	adds	r3, #1
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002896:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	495c      	ldr	r1, [pc, #368]	@ (8002a10 <HAL_I2C_Init+0x274>)
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d819      	bhi.n	80028d8 <HAL_I2C_Init+0x13c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e59      	subs	r1, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028b8:	400b      	ands	r3, r1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_I2C_Init+0x138>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	e051      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d4:	2304      	movs	r3, #4
 80028d6:	e04f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d111      	bne.n	8002904 <HAL_I2C_Init+0x168>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e012      	b.n	800292a <HAL_I2C_Init+0x18e>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x196>
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <HAL_I2C_Init+0x1bc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e58      	subs	r0, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	440b      	add	r3, r1
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6911      	ldr	r1, [r2, #16]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	000186a0 	.word	0x000186a0
 8002a14:	001e847f 	.word	0x001e847f
 8002a18:	003d08ff 	.word	0x003d08ff
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	460b      	mov	r3, r1
 8002a32:	817b      	strh	r3, [r7, #10]
 8002a34:	4613      	mov	r3, r2
 8002a36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7fe faec 	bl	8001014 <HAL_GetTick>
 8002a3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	f040 80e0 	bne.w	8002c0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2319      	movs	r3, #25
 8002a52:	2201      	movs	r2, #1
 8002a54:	4970      	ldr	r1, [pc, #448]	@ (8002c18 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fc64 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0d3      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_I2C_Master_Transmit+0x50>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e0cc      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1ea>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d007      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0201 	orr.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2221      	movs	r2, #33	@ 0x21
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	893a      	ldrh	r2, [r7, #8]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <HAL_I2C_Master_Transmit+0x1f8>)
 8002ada:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002adc:	8979      	ldrh	r1, [r7, #10]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 face 	bl	8003084 <I2C_MasterRequestWrite>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e08d      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b08:	e066      	b.n	8002bd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fd22 	bl	8003558 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d107      	bne.n	8002b32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06b      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d11b      	bne.n	8002bac <HAL_I2C_Master_Transmit+0x188>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d017      	beq.n	8002bac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fd19 	bl	80035e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e01a      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d194      	bne.n	8002b0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	00100002 	.word	0x00100002
 8002c1c:	ffff0000 	.word	0xffff0000

08002c20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	@ 0x30
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7fe f9ee 	bl	8001014 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	f040 8217 	bne.w	8003076 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	497c      	ldr	r1, [pc, #496]	@ (8002e44 <HAL_I2C_Master_Receive+0x224>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fb66 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e20a      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2C_Master_Receive+0x50>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e203      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d007      	beq.n	8002c96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2222      	movs	r2, #34	@ 0x22
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	893a      	ldrh	r2, [r7, #8]
 8002cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a5c      	ldr	r2, [pc, #368]	@ (8002e48 <HAL_I2C_Master_Receive+0x228>)
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fa52 	bl	8003188 <I2C_MasterRequestRead>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1c4      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d113      	bne.n	8002d1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	623b      	str	r3, [r7, #32]
 8002d0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e198      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d11b      	bne.n	8002d5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e178      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d11b      	bne.n	8002d9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	e158      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dc4:	e144      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	f200 80f1 	bhi.w	8002fb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d123      	bne.n	8002e20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fc4b 	bl	8003678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e145      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e1e:	e117      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d14e      	bne.n	8002ec6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4906      	ldr	r1, [pc, #24]	@ (8002e4c <HAL_I2C_Master_Receive+0x22c>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fa76 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e11a      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
 8002e42:	bf00      	nop
 8002e44:	00100002 	.word	0x00100002
 8002e48:	ffff0000 	.word	0xffff0000
 8002e4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ec4:	e0c4      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	2200      	movs	r2, #0
 8002ece:	496c      	ldr	r1, [pc, #432]	@ (8003080 <HAL_I2C_Master_Receive+0x460>)
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa27 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0cb      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4955      	ldr	r1, [pc, #340]	@ (8003080 <HAL_I2C_Master_Receive+0x460>)
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f9f9 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e09d      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fb0:	e04e      	b.n	8003050 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fb5e 	bl	8003678 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e058      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d124      	bne.n	8003050 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f aeb6 	bne.w	8002dc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3728      	adds	r7, #40	@ 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	00010004 	.word	0x00010004

08003084 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d006      	beq.n	80030ae <I2C_MasterRequestWrite+0x2a>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d003      	beq.n	80030ae <I2C_MasterRequestWrite+0x2a>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030ac:	d108      	bne.n	80030c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e00b      	b.n	80030d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d107      	bne.n	80030d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f91d 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030fe:	d103      	bne.n	8003108 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e035      	b.n	8003178 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003114:	d108      	bne.n	8003128 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	e01b      	b.n	8003160 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003128:	897b      	ldrh	r3, [r7, #10]
 800312a:	11db      	asrs	r3, r3, #7
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f003 0306 	and.w	r3, r3, #6
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f063 030f 	orn	r3, r3, #15
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <I2C_MasterRequestWrite+0xfc>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f966 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e010      	b.n	8003178 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003156:	897b      	ldrh	r3, [r7, #10]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4907      	ldr	r1, [pc, #28]	@ (8003184 <I2C_MasterRequestWrite+0x100>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f956 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00010008 	.word	0x00010008
 8003184:	00010002 	.word	0x00010002

08003188 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	460b      	mov	r3, r1
 8003196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d006      	beq.n	80031c2 <I2C_MasterRequestRead+0x3a>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d003      	beq.n	80031c2 <I2C_MasterRequestRead+0x3a>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031c0:	d108      	bne.n	80031d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	e00b      	b.n	80031ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d8:	2b11      	cmp	r3, #17
 80031da:	d107      	bne.n	80031ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f893 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003212:	d103      	bne.n	800321c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e079      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]
 800323a:	e05f      	b.n	80032fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800323c:	897b      	ldrh	r3, [r7, #10]
 800323e:	11db      	asrs	r3, r3, #7
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0306 	and.w	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f063 030f 	orn	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4930      	ldr	r1, [pc, #192]	@ (800331c <I2C_MasterRequestRead+0x194>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f8dc 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e054      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4929      	ldr	r1, [pc, #164]	@ (8003320 <I2C_MasterRequestRead+0x198>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f8cc 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e044      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f831 	bl	8003324 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d6:	d103      	bne.n	80032e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e017      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032e4:	897b      	ldrh	r3, [r7, #10]
 80032e6:	11db      	asrs	r3, r3, #7
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f003 0306 	and.w	r3, r3, #6
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f063 030e 	orn	r3, r3, #14
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4907      	ldr	r1, [pc, #28]	@ (8003320 <I2C_MasterRequestRead+0x198>)
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f888 	bl	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	00010008 	.word	0x00010008
 8003320:	00010002 	.word	0x00010002

08003324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003334:	e048      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d044      	beq.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fd fe69 	bl	8001014 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d139      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10d      	bne.n	800337a <I2C_WaitOnFlagUntilTimeout+0x56>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	43da      	mvns	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	e00c      	b.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x70>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	43da      	mvns	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	4013      	ands	r3, r2
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	429a      	cmp	r2, r3
 8003398:	d116      	bne.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e023      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d10d      	bne.n	80033ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	43da      	mvns	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	e00c      	b.n	8003408 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	429a      	cmp	r2, r3
 800340c:	d093      	beq.n	8003336 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003426:	e071      	b.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d123      	bne.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003446:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	f043 0204 	orr.w	r2, r3, #4
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e067      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d041      	beq.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003488:	f7fd fdc4 	bl	8001014 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d302      	bcc.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d136      	bne.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10c      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e00b      	b.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e021      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10c      	bne.n	8003530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e00b      	b.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	bf14      	ite	ne
 8003542:	2301      	movne	r3, #1
 8003544:	2300      	moveq	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f af6d 	bne.w	8003428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003564:	e034      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f8e3 	bl	8003732 <I2C_IsAcknowledgeFailed>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e034      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d028      	beq.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fd fd49 	bl	8001014 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d11d      	bne.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b80      	cmp	r3, #128	@ 0x80
 80035a0:	d016      	beq.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e007      	b.n	80035e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b80      	cmp	r3, #128	@ 0x80
 80035dc:	d1c3      	bne.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f89b 	bl	8003732 <I2C_IsAcknowledgeFailed>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e034      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d028      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fd01 	bl	8001014 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11d      	bne.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b04      	cmp	r3, #4
 8003630:	d016      	beq.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e007      	b.n	8003670 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d1c3      	bne.n	80035f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003684:	e049      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b10      	cmp	r3, #16
 8003692:	d119      	bne.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e030      	b.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fd fca4 	bl	8001014 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d016      	beq.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e007      	b.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003724:	2b40      	cmp	r3, #64	@ 0x40
 8003726:	d1ae      	bne.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003748:	d11b      	bne.n	8003782 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003752:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d129      	bne.n	80037fa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2224      	movs	r2, #36	@ 0x24
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0210 	bic.w	r2, r2, #16
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	e000      	b.n	80037fc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80037fa:	2302      	movs	r3, #2
  }
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	d12a      	bne.n	8003878 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2224      	movs	r2, #36	@ 0x24
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003842:	89fb      	ldrh	r3, [r7, #14]
 8003844:	f023 030f 	bic.w	r3, r3, #15
 8003848:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b29a      	uxth	r2, r3
 800384e:	89fb      	ldrh	r3, [r7, #14]
 8003850:	4313      	orrs	r3, r2
 8003852:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	89fa      	ldrh	r2, [r7, #14]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x90>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	4a1f      	ldr	r2, [pc, #124]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x90>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <HAL_PWREx_EnableOverDrive+0x90>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038ae:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_PWREx_EnableOverDrive+0x94>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b4:	f7fd fbae 	bl	8001014 <HAL_GetTick>
 80038b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ba:	e009      	b.n	80038d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038bc:	f7fd fbaa 	bl	8001014 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ca:	d901      	bls.n	80038d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e01f      	b.n	8003910 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d0:	4b13      	ldr	r3, [pc, #76]	@ (8003920 <HAL_PWREx_EnableOverDrive+0x98>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038dc:	d1ee      	bne.n	80038bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038de:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e4:	f7fd fb96 	bl	8001014 <HAL_GetTick>
 80038e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80038ea:	e009      	b.n	8003900 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038ec:	f7fd fb92 	bl	8001014 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038fa:	d901      	bls.n	8003900 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e007      	b.n	8003910 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003900:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <HAL_PWREx_EnableOverDrive+0x98>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800390c:	d1ee      	bne.n	80038ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	420e0040 	.word	0x420e0040
 8003920:	40007000 	.word	0x40007000
 8003924:	420e0044 	.word	0x420e0044

08003928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e267      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d075      	beq.n	8003a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003946:	4b88      	ldr	r3, [pc, #544]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b04      	cmp	r3, #4
 8003950:	d00c      	beq.n	800396c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003952:	4b85      	ldr	r3, [pc, #532]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	2b08      	cmp	r3, #8
 800395c:	d112      	bne.n	8003984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395e:	4b82      	ldr	r3, [pc, #520]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800396a:	d10b      	bne.n	8003984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05b      	beq.n	8003a30 <HAL_RCC_OscConfig+0x108>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d157      	bne.n	8003a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e242      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398c:	d106      	bne.n	800399c <HAL_RCC_OscConfig+0x74>
 800398e:	4b76      	ldr	r3, [pc, #472]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a75      	ldr	r2, [pc, #468]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e01d      	b.n	80039d8 <HAL_RCC_OscConfig+0xb0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x98>
 80039a6:	4b70      	ldr	r3, [pc, #448]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e00b      	b.n	80039d8 <HAL_RCC_OscConfig+0xb0>
 80039c0:	4b69      	ldr	r3, [pc, #420]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a68      	ldr	r2, [pc, #416]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b66      	ldr	r3, [pc, #408]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a65      	ldr	r2, [pc, #404]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd fb18 	bl	8001014 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd fb14 	bl	8001014 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	@ 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e207      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0xc0>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fd fb04 	bl	8001014 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd fb00 	bl	8001014 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	@ 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1f3      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	4b51      	ldr	r3, [pc, #324]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0xe8>
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b47      	ldr	r3, [pc, #284]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d11c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a56:	4b44      	ldr	r3, [pc, #272]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	4b41      	ldr	r3, [pc, #260]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_RCC_OscConfig+0x152>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1c7      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4937      	ldr	r1, [pc, #220]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	e03a      	b.n	8003b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a98:	4b34      	ldr	r3, [pc, #208]	@ (8003b6c <HAL_RCC_OscConfig+0x244>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fab9 	bl	8001014 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fab5 	bl	8001014 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1a8      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4925      	ldr	r1, [pc, #148]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]
 8003ad8:	e015      	b.n	8003b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b24      	ldr	r3, [pc, #144]	@ (8003b6c <HAL_RCC_OscConfig+0x244>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fa98 	bl	8001014 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fd fa94 	bl	8001014 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e187      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d036      	beq.n	8003b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1a:	4b15      	ldr	r3, [pc, #84]	@ (8003b70 <HAL_RCC_OscConfig+0x248>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd fa78 	bl	8001014 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fd fa74 	bl	8001014 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e167      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x200>
 8003b46:	e01b      	b.n	8003b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_RCC_OscConfig+0x248>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4e:	f7fd fa61 	bl	8001014 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	e00e      	b.n	8003b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fd fa5d 	bl	8001014 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d907      	bls.n	8003b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e150      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	42470000 	.word	0x42470000
 8003b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	4b88      	ldr	r3, [pc, #544]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ea      	bne.n	8003b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8097 	beq.w	8003cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b81      	ldr	r3, [pc, #516]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bae:	4b7a      	ldr	r3, [pc, #488]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b77      	ldr	r3, [pc, #476]	@ (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d118      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bca:	4b74      	ldr	r3, [pc, #464]	@ (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a73      	ldr	r2, [pc, #460]	@ (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd6:	f7fd fa1d 	bl	8001014 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fd fa19 	bl	8001014 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e10c      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2ea>
 8003c04:	4b64      	ldr	r3, [pc, #400]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c08:	4a63      	ldr	r2, [pc, #396]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c10:	e01c      	b.n	8003c4c <HAL_RCC_OscConfig+0x324>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x30c>
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c26:	4b5c      	ldr	r3, [pc, #368]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0x324>
 8003c34:	4b58      	ldr	r3, [pc, #352]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	4a57      	ldr	r2, [pc, #348]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c40:	4b55      	ldr	r3, [pc, #340]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	4a54      	ldr	r2, [pc, #336]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f023 0304 	bic.w	r3, r3, #4
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fd f9de 	bl	8001014 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd f9da 	bl	8001014 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0cb      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c72:	4b49      	ldr	r3, [pc, #292]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ee      	beq.n	8003c5c <HAL_RCC_OscConfig+0x334>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fd f9c8 	bl	8001014 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd f9c4 	bl	8001014 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0b5      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b39      	ldr	r3, [pc, #228]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	4a38      	ldr	r2, [pc, #224]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80a1 	beq.w	8003e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc6:	4b34      	ldr	r3, [pc, #208]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d05c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d141      	bne.n	8003d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b31      	ldr	r3, [pc, #196]	@ (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fd f998 	bl	8001014 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fd f994 	bl	8001014 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e087      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	491b      	ldr	r1, [pc, #108]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fd f96d 	bl	8001014 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd f969 	bl	8001014 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e05c      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x416>
 8003d5c:	e054      	b.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b10      	ldr	r3, [pc, #64]	@ (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fd f956 	bl	8001014 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fd f952 	bl	8001014 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e045      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x444>
 8003d8a:	e03d      	b.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e038      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x4ec>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d028      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d121      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11a      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0cc      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b68      	ldr	r3, [pc, #416]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d90c      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b65      	ldr	r3, [pc, #404]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b63      	ldr	r3, [pc, #396]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0b8      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e6c:	4b59      	ldr	r3, [pc, #356]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a58      	ldr	r2, [pc, #352]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e84:	4b53      	ldr	r3, [pc, #332]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a52      	ldr	r2, [pc, #328]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b50      	ldr	r3, [pc, #320]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	494d      	ldr	r1, [pc, #308]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d044      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b47      	ldr	r3, [pc, #284]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d119      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e07f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e067      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b37      	ldr	r3, [pc, #220]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4934      	ldr	r1, [pc, #208]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f08:	f7fd f884 	bl	8001014 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fd f880 	bl	8001014 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e04f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d20c      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	@ (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e032      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6c:	4b19      	ldr	r3, [pc, #100]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4916      	ldr	r1, [pc, #88]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8a:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	490e      	ldr	r1, [pc, #56]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f9e:	f000 f821 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490a      	ldr	r1, [pc, #40]	@ (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	4a09      	ldr	r2, [pc, #36]	@ (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc ffe4 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	08012884 	.word	0x08012884
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	20000004 	.word	0x20000004

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b090      	sub	sp, #64	@ 0x40
 8003fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ffc:	4b59      	ldr	r3, [pc, #356]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d00d      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x40>
 8004008:	2b08      	cmp	r3, #8
 800400a:	f200 80a1 	bhi.w	8004150 <HAL_RCC_GetSysClockFreq+0x16c>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x34>
 8004012:	2b04      	cmp	r3, #4
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x3a>
 8004016:	e09b      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x184>)
 800401a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800401c:	e09b      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401e:	4b53      	ldr	r3, [pc, #332]	@ (800416c <HAL_RCC_GetSysClockFreq+0x188>)
 8004020:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004022:	e098      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004024:	4b4f      	ldr	r3, [pc, #316]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x180>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800402e:	4b4d      	ldr	r3, [pc, #308]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x180>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d028      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403a:	4b4a      	ldr	r3, [pc, #296]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x180>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	2200      	movs	r2, #0
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	627a      	str	r2, [r7, #36]	@ 0x24
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800404c:	2100      	movs	r1, #0
 800404e:	4b47      	ldr	r3, [pc, #284]	@ (800416c <HAL_RCC_GetSysClockFreq+0x188>)
 8004050:	fb03 f201 	mul.w	r2, r3, r1
 8004054:	2300      	movs	r3, #0
 8004056:	fb00 f303 	mul.w	r3, r0, r3
 800405a:	4413      	add	r3, r2
 800405c:	4a43      	ldr	r2, [pc, #268]	@ (800416c <HAL_RCC_GetSysClockFreq+0x188>)
 800405e:	fba0 1202 	umull	r1, r2, r0, r2
 8004062:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004064:	460a      	mov	r2, r1
 8004066:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004068:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800406a:	4413      	add	r3, r2
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800406e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004070:	2200      	movs	r2, #0
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	61fa      	str	r2, [r7, #28]
 8004076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800407e:	f7fc f907 	bl	8000290 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4613      	mov	r3, r2
 8004088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800408a:	e053      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408c:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x180>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	099b      	lsrs	r3, r3, #6
 8004092:	2200      	movs	r2, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	617a      	str	r2, [r7, #20]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800409e:	f04f 0b00 	mov.w	fp, #0
 80040a2:	4652      	mov	r2, sl
 80040a4:	465b      	mov	r3, fp
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	0159      	lsls	r1, r3, #5
 80040b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b4:	0150      	lsls	r0, r2, #5
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	ebb2 080a 	subs.w	r8, r2, sl
 80040be:	eb63 090b 	sbc.w	r9, r3, fp
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040d6:	ebb2 0408 	subs.w	r4, r2, r8
 80040da:	eb63 0509 	sbc.w	r5, r3, r9
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	00eb      	lsls	r3, r5, #3
 80040e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ec:	00e2      	lsls	r2, r4, #3
 80040ee:	4614      	mov	r4, r2
 80040f0:	461d      	mov	r5, r3
 80040f2:	eb14 030a 	adds.w	r3, r4, sl
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	eb45 030b 	adc.w	r3, r5, fp
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800410a:	4629      	mov	r1, r5
 800410c:	028b      	lsls	r3, r1, #10
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004114:	4621      	mov	r1, r4
 8004116:	028a      	lsls	r2, r1, #10
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	2200      	movs	r2, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	60fa      	str	r2, [r7, #12]
 8004124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004128:	f7fc f8b2 	bl	8000290 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x180>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004144:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800414e:	e002      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x184>)
 8004152:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004158:	4618      	mov	r0, r3
 800415a:	3740      	adds	r7, #64	@ 0x40
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400
 800416c:	017d7840 	.word	0x017d7840

08004170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000000 	.word	0x20000000

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08012894 	.word	0x08012894

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041b4:	f7ff ffdc 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	@ (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08012894 	.word	0x08012894

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e042      	b.n	8004270 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fbc4 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	@ 0x24
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f973 	bl	8004508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	@ 0x28
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	d175      	bne.n	8004384 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Transmit+0x2c>
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e06e      	b.n	8004386 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2221      	movs	r2, #33	@ 0x21
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b6:	f7fc fead 	bl	8001014 <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d0:	d108      	bne.n	80042e4 <HAL_UART_Transmit+0x6c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	e003      	b.n	80042ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042ec:	e02e      	b.n	800434c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	2180      	movs	r1, #128	@ 0x80
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f848 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e03a      	b.n	8004386 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3302      	adds	r3, #2
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e007      	b.n	800433e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cb      	bne.n	80042ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	@ 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f814 	bl	800438e <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439e:	e03b      	b.n	8004418 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d037      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a8:	f7fc fe34 	bl	8001014 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d302      	bcc.n	80043be <UART_WaitOnFlagUntilTimeout+0x30>
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e03a      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d023      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b80      	cmp	r3, #128	@ 0x80
 80043d4:	d020      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b40      	cmp	r3, #64	@ 0x40
 80043da:	d01d      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d116      	bne.n	8004418 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f81d 	bl	8004440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2208      	movs	r2, #8
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e00f      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	429a      	cmp	r2, r3
 8004434:	d0b4      	beq.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b095      	sub	sp, #84	@ 0x54
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	330c      	adds	r3, #12
 800444e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004452:	e853 3f00 	ldrex	r3, [r3]
 8004456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800445e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004468:	643a      	str	r2, [r7, #64]	@ 0x40
 800446a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800446e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e5      	bne.n	8004448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3314      	adds	r3, #20
 8004482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	61fb      	str	r3, [r7, #28]
   return(result);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800449c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e5      	bne.n	800447c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d119      	bne.n	80044ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0310 	bic.w	r3, r3, #16
 80044ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044d8:	61ba      	str	r2, [r7, #24]
 80044da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	613b      	str	r3, [r7, #16]
   return(result);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044fa:	bf00      	nop
 80044fc:	3754      	adds	r7, #84	@ 0x54
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b0c0      	sub	sp, #256	@ 0x100
 800450e:	af00      	add	r7, sp, #0
 8004510:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	68d9      	ldr	r1, [r3, #12]
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	ea40 0301 	orr.w	r3, r0, r1
 8004530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	431a      	orrs	r2, r3
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	431a      	orrs	r2, r3
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004560:	f021 010c 	bic.w	r1, r1, #12
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800456e:	430b      	orrs	r3, r1
 8004570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	6999      	ldr	r1, [r3, #24]
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	ea40 0301 	orr.w	r3, r0, r1
 800458e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b8f      	ldr	r3, [pc, #572]	@ (80047d4 <UART_SetConfig+0x2cc>)
 8004598:	429a      	cmp	r2, r3
 800459a:	d005      	beq.n	80045a8 <UART_SetConfig+0xa0>
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b8d      	ldr	r3, [pc, #564]	@ (80047d8 <UART_SetConfig+0x2d0>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d104      	bne.n	80045b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a8:	f7ff fe02 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 80045ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045b0:	e003      	b.n	80045ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045b2:	f7ff fde9 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 80045b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c4:	f040 810c 	bne.w	80047e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045da:	4622      	mov	r2, r4
 80045dc:	462b      	mov	r3, r5
 80045de:	1891      	adds	r1, r2, r2
 80045e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045e2:	415b      	adcs	r3, r3
 80045e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045ea:	4621      	mov	r1, r4
 80045ec:	eb12 0801 	adds.w	r8, r2, r1
 80045f0:	4629      	mov	r1, r5
 80045f2:	eb43 0901 	adc.w	r9, r3, r1
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800460a:	4690      	mov	r8, r2
 800460c:	4699      	mov	r9, r3
 800460e:	4623      	mov	r3, r4
 8004610:	eb18 0303 	adds.w	r3, r8, r3
 8004614:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004618:	462b      	mov	r3, r5
 800461a:	eb49 0303 	adc.w	r3, r9, r3
 800461e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800462e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004636:	460b      	mov	r3, r1
 8004638:	18db      	adds	r3, r3, r3
 800463a:	653b      	str	r3, [r7, #80]	@ 0x50
 800463c:	4613      	mov	r3, r2
 800463e:	eb42 0303 	adc.w	r3, r2, r3
 8004642:	657b      	str	r3, [r7, #84]	@ 0x54
 8004644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800464c:	f7fb fe20 	bl	8000290 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <UART_SetConfig+0x2d4>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004668:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800466c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004678:	415b      	adcs	r3, r3
 800467a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004680:	4641      	mov	r1, r8
 8004682:	eb12 0a01 	adds.w	sl, r2, r1
 8004686:	4649      	mov	r1, r9
 8004688:	eb43 0b01 	adc.w	fp, r3, r1
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800469c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046a0:	4692      	mov	sl, r2
 80046a2:	469b      	mov	fp, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	eb1a 0303 	adds.w	r3, sl, r3
 80046aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ae:	464b      	mov	r3, r9
 80046b0:	eb4b 0303 	adc.w	r3, fp, r3
 80046b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046cc:	460b      	mov	r3, r1
 80046ce:	18db      	adds	r3, r3, r3
 80046d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d2:	4613      	mov	r3, r2
 80046d4:	eb42 0303 	adc.w	r3, r2, r3
 80046d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046e2:	f7fb fdd5 	bl	8000290 <__aeabi_uldivmod>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <UART_SetConfig+0x2d4>)
 80046ee:	fba3 2301 	umull	r2, r3, r3, r1
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2264      	movs	r2, #100	@ 0x64
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	1acb      	subs	r3, r1, r3
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004702:	4b36      	ldr	r3, [pc, #216]	@ (80047dc <UART_SetConfig+0x2d4>)
 8004704:	fba3 2302 	umull	r2, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004710:	441c      	add	r4, r3
 8004712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800471c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	1891      	adds	r1, r2, r2
 800472a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800472c:	415b      	adcs	r3, r3
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004734:	4641      	mov	r1, r8
 8004736:	1851      	adds	r1, r2, r1
 8004738:	6339      	str	r1, [r7, #48]	@ 0x30
 800473a:	4649      	mov	r1, r9
 800473c:	414b      	adcs	r3, r1
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800474c:	4659      	mov	r1, fp
 800474e:	00cb      	lsls	r3, r1, #3
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004756:	4651      	mov	r1, sl
 8004758:	00ca      	lsls	r2, r1, #3
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4603      	mov	r3, r0
 8004760:	4642      	mov	r2, r8
 8004762:	189b      	adds	r3, r3, r2
 8004764:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004768:	464b      	mov	r3, r9
 800476a:	460a      	mov	r2, r1
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004780:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004788:	460b      	mov	r3, r1
 800478a:	18db      	adds	r3, r3, r3
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478e:	4613      	mov	r3, r2
 8004790:	eb42 0303 	adc.w	r3, r2, r3
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800479a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800479e:	f7fb fd77 	bl	8000290 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <UART_SetConfig+0x2d4>)
 80047a8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	2164      	movs	r1, #100	@ 0x64
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	3332      	adds	r3, #50	@ 0x32
 80047ba:	4a08      	ldr	r2, [pc, #32]	@ (80047dc <UART_SetConfig+0x2d4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	f003 0207 	and.w	r2, r3, #7
 80047c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4422      	add	r2, r4
 80047ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047d0:	e106      	b.n	80049e0 <UART_SetConfig+0x4d8>
 80047d2:	bf00      	nop
 80047d4:	40011000 	.word	0x40011000
 80047d8:	40011400 	.word	0x40011400
 80047dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047f2:	4642      	mov	r2, r8
 80047f4:	464b      	mov	r3, r9
 80047f6:	1891      	adds	r1, r2, r2
 80047f8:	6239      	str	r1, [r7, #32]
 80047fa:	415b      	adcs	r3, r3
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004802:	4641      	mov	r1, r8
 8004804:	1854      	adds	r4, r2, r1
 8004806:	4649      	mov	r1, r9
 8004808:	eb43 0501 	adc.w	r5, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	00eb      	lsls	r3, r5, #3
 8004816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481a:	00e2      	lsls	r2, r4, #3
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4643      	mov	r3, r8
 8004822:	18e3      	adds	r3, r4, r3
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004828:	464b      	mov	r3, r9
 800482a:	eb45 0303 	adc.w	r3, r5, r3
 800482e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800483e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800484e:	4629      	mov	r1, r5
 8004850:	008b      	lsls	r3, r1, #2
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004858:	4621      	mov	r1, r4
 800485a:	008a      	lsls	r2, r1, #2
 800485c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004860:	f7fb fd16 	bl	8000290 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b60      	ldr	r3, [pc, #384]	@ (80049ec <UART_SetConfig+0x4e4>)
 800486a:	fba3 2302 	umull	r2, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	011c      	lsls	r4, r3, #4
 8004872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800487c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	1891      	adds	r1, r2, r2
 800488a:	61b9      	str	r1, [r7, #24]
 800488c:	415b      	adcs	r3, r3
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004894:	4641      	mov	r1, r8
 8004896:	1851      	adds	r1, r2, r1
 8004898:	6139      	str	r1, [r7, #16]
 800489a:	4649      	mov	r1, r9
 800489c:	414b      	adcs	r3, r1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ac:	4659      	mov	r1, fp
 80048ae:	00cb      	lsls	r3, r1, #3
 80048b0:	4651      	mov	r1, sl
 80048b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b6:	4651      	mov	r1, sl
 80048b8:	00ca      	lsls	r2, r1, #3
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	4642      	mov	r2, r8
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048c8:	464b      	mov	r3, r9
 80048ca:	460a      	mov	r2, r1
 80048cc:	eb42 0303 	adc.w	r3, r2, r3
 80048d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048ec:	4649      	mov	r1, r9
 80048ee:	008b      	lsls	r3, r1, #2
 80048f0:	4641      	mov	r1, r8
 80048f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f6:	4641      	mov	r1, r8
 80048f8:	008a      	lsls	r2, r1, #2
 80048fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048fe:	f7fb fcc7 	bl	8000290 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4611      	mov	r1, r2
 8004908:	4b38      	ldr	r3, [pc, #224]	@ (80049ec <UART_SetConfig+0x4e4>)
 800490a:	fba3 2301 	umull	r2, r3, r3, r1
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2264      	movs	r2, #100	@ 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	@ 0x32
 800491c:	4a33      	ldr	r2, [pc, #204]	@ (80049ec <UART_SetConfig+0x4e4>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004928:	441c      	add	r4, r3
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	673b      	str	r3, [r7, #112]	@ 0x70
 8004932:	677a      	str	r2, [r7, #116]	@ 0x74
 8004934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	415b      	adcs	r3, r3
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004948:	4641      	mov	r1, r8
 800494a:	1851      	adds	r1, r2, r1
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	4649      	mov	r1, r9
 8004950:	414b      	adcs	r3, r1
 8004952:	607b      	str	r3, [r7, #4]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004960:	4659      	mov	r1, fp
 8004962:	00cb      	lsls	r3, r1, #3
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800496a:	4651      	mov	r1, sl
 800496c:	00ca      	lsls	r2, r1, #3
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	4603      	mov	r3, r0
 8004974:	4642      	mov	r2, r8
 8004976:	189b      	adds	r3, r3, r2
 8004978:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497a:	464b      	mov	r3, r9
 800497c:	460a      	mov	r2, r1
 800497e:	eb42 0303 	adc.w	r3, r2, r3
 8004982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	663b      	str	r3, [r7, #96]	@ 0x60
 800498e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800499c:	4649      	mov	r1, r9
 800499e:	008b      	lsls	r3, r1, #2
 80049a0:	4641      	mov	r1, r8
 80049a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a6:	4641      	mov	r1, r8
 80049a8:	008a      	lsls	r2, r1, #2
 80049aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ae:	f7fb fc6f 	bl	8000290 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <UART_SetConfig+0x4e4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	@ 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	3332      	adds	r3, #50	@ 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	@ (80049ec <UART_SetConfig+0x4e4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4422      	add	r2, r4
 80049de:	609a      	str	r2, [r3, #8]
}
 80049e0:	bf00      	nop
 80049e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049e6:	46bd      	mov	sp, r7
 80049e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 172;
 80049f6:	4b87      	ldr	r3, [pc, #540]	@ (8004c14 <MX_LWIP_Init+0x224>)
 80049f8:	22ac      	movs	r2, #172	@ 0xac
 80049fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 16;
 80049fc:	4b85      	ldr	r3, [pc, #532]	@ (8004c14 <MX_LWIP_Init+0x224>)
 80049fe:	2210      	movs	r2, #16
 8004a00:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 20;
 8004a02:	4b84      	ldr	r3, [pc, #528]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a04:	2214      	movs	r2, #20
 8004a06:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 39;
 8004a08:	4b82      	ldr	r3, [pc, #520]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a0a:	2227      	movs	r2, #39	@ 0x27
 8004a0c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004a0e:	4b82      	ldr	r3, [pc, #520]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004a10:	22ff      	movs	r2, #255	@ 0xff
 8004a12:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004a14:	4b80      	ldr	r3, [pc, #512]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004a16:	22ff      	movs	r2, #255	@ 0xff
 8004a18:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004a1c:	22ff      	movs	r2, #255	@ 0xff
 8004a1e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004a20:	4b7d      	ldr	r3, [pc, #500]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 172;
 8004a26:	4b7d      	ldr	r3, [pc, #500]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004a28:	22ac      	movs	r2, #172	@ 0xac
 8004a2a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 16;
 8004a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004a2e:	2210      	movs	r2, #16
 8004a30:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 20;
 8004a32:	4b7a      	ldr	r3, [pc, #488]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004a34:	2214      	movs	r2, #20
 8004a36:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004a38:	4b78      	ldr	r3, [pc, #480]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004a3e:	f000 fd3b 	bl	80054b8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a42:	4b74      	ldr	r3, [pc, #464]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	061a      	lsls	r2, r3, #24
 8004a48:	4b72      	ldr	r3, [pc, #456]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	4b70      	ldr	r3, [pc, #448]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a52:	789b      	ldrb	r3, [r3, #2]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	4313      	orrs	r3, r2
 8004a58:	4a6e      	ldr	r2, [pc, #440]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a5a:	78d2      	ldrb	r2, [r2, #3]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	061a      	lsls	r2, r3, #24
 8004a60:	4b6c      	ldr	r3, [pc, #432]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	0619      	lsls	r1, r3, #24
 8004a66:	4b6b      	ldr	r3, [pc, #428]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	4319      	orrs	r1, r3
 8004a6e:	4b69      	ldr	r3, [pc, #420]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a70:	789b      	ldrb	r3, [r3, #2]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	430b      	orrs	r3, r1
 8004a76:	4967      	ldr	r1, [pc, #412]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a78:	78c9      	ldrb	r1, [r1, #3]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a82:	431a      	orrs	r2, r3
 8004a84:	4b63      	ldr	r3, [pc, #396]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	0619      	lsls	r1, r3, #24
 8004a8a:	4b62      	ldr	r3, [pc, #392]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	4319      	orrs	r1, r3
 8004a92:	4b60      	ldr	r3, [pc, #384]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a94:	789b      	ldrb	r3, [r3, #2]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	495e      	ldr	r1, [pc, #376]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004a9c:	78c9      	ldrb	r1, [r1, #3]
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	0619      	lsls	r1, r3, #24
 8004aae:	4b59      	ldr	r3, [pc, #356]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	4319      	orrs	r1, r3
 8004ab6:	4b57      	ldr	r3, [pc, #348]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	430b      	orrs	r3, r1
 8004abe:	4955      	ldr	r1, [pc, #340]	@ (8004c14 <MX_LWIP_Init+0x224>)
 8004ac0:	78c9      	ldrb	r1, [r1, #3]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	0e1b      	lsrs	r3, r3, #24
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	4a55      	ldr	r2, [pc, #340]	@ (8004c20 <MX_LWIP_Init+0x230>)
 8004aca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004acc:	4b52      	ldr	r3, [pc, #328]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	061a      	lsls	r2, r3, #24
 8004ad2:	4b51      	ldr	r3, [pc, #324]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	4b4f      	ldr	r3, [pc, #316]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004adc:	789b      	ldrb	r3, [r3, #2]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004ae4:	78d2      	ldrb	r2, [r2, #3]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	061a      	lsls	r2, r3, #24
 8004aea:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	0619      	lsls	r1, r3, #24
 8004af0:	4b49      	ldr	r3, [pc, #292]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	4319      	orrs	r1, r3
 8004af8:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004afa:	789b      	ldrb	r3, [r3, #2]
 8004afc:	021b      	lsls	r3, r3, #8
 8004afe:	430b      	orrs	r3, r1
 8004b00:	4945      	ldr	r1, [pc, #276]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b02:	78c9      	ldrb	r1, [r1, #3]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	4b42      	ldr	r3, [pc, #264]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	0619      	lsls	r1, r3, #24
 8004b14:	4b40      	ldr	r3, [pc, #256]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	041b      	lsls	r3, r3, #16
 8004b1a:	4319      	orrs	r1, r3
 8004b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b1e:	789b      	ldrb	r3, [r3, #2]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	430b      	orrs	r3, r1
 8004b24:	493c      	ldr	r1, [pc, #240]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b26:	78c9      	ldrb	r1, [r1, #3]
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b30:	431a      	orrs	r2, r3
 8004b32:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	0619      	lsls	r1, r3, #24
 8004b38:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	4319      	orrs	r1, r3
 8004b40:	4b35      	ldr	r3, [pc, #212]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b42:	789b      	ldrb	r3, [r3, #2]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	430b      	orrs	r3, r1
 8004b48:	4933      	ldr	r1, [pc, #204]	@ (8004c18 <MX_LWIP_Init+0x228>)
 8004b4a:	78c9      	ldrb	r1, [r1, #3]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	4313      	orrs	r3, r2
 8004b52:	4a34      	ldr	r2, [pc, #208]	@ (8004c24 <MX_LWIP_Init+0x234>)
 8004b54:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b56:	4b31      	ldr	r3, [pc, #196]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	061a      	lsls	r2, r3, #24
 8004b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	431a      	orrs	r2, r3
 8004b64:	4b2d      	ldr	r3, [pc, #180]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b66:	789b      	ldrb	r3, [r3, #2]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b6e:	78d2      	ldrb	r2, [r2, #3]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	061a      	lsls	r2, r3, #24
 8004b74:	4b29      	ldr	r3, [pc, #164]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	0619      	lsls	r1, r3, #24
 8004b7a:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	4319      	orrs	r1, r3
 8004b82:	4b26      	ldr	r3, [pc, #152]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b84:	789b      	ldrb	r3, [r3, #2]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	4924      	ldr	r1, [pc, #144]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b8c:	78c9      	ldrb	r1, [r1, #3]
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b96:	431a      	orrs	r2, r3
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	0619      	lsls	r1, r3, #24
 8004b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	4319      	orrs	r1, r3
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004ba8:	789b      	ldrb	r3, [r3, #2]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	430b      	orrs	r3, r1
 8004bae:	491b      	ldr	r1, [pc, #108]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004bb0:	78c9      	ldrb	r1, [r1, #3]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	0619      	lsls	r1, r3, #24
 8004bc2:	4b16      	ldr	r3, [pc, #88]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004bc4:	785b      	ldrb	r3, [r3, #1]
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	4319      	orrs	r1, r3
 8004bca:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004bcc:	789b      	ldrb	r3, [r3, #2]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	4912      	ldr	r1, [pc, #72]	@ (8004c1c <MX_LWIP_Init+0x22c>)
 8004bd4:	78c9      	ldrb	r1, [r1, #3]
 8004bd6:	430b      	orrs	r3, r1
 8004bd8:	0e1b      	lsrs	r3, r3, #24
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	4a12      	ldr	r2, [pc, #72]	@ (8004c28 <MX_LWIP_Init+0x238>)
 8004bde:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004be0:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <MX_LWIP_Init+0x23c>)
 8004be2:	9302      	str	r3, [sp, #8]
 8004be4:	4b12      	ldr	r3, [pc, #72]	@ (8004c30 <MX_LWIP_Init+0x240>)
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	2300      	movs	r3, #0
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <MX_LWIP_Init+0x238>)
 8004bee:	4a0d      	ldr	r2, [pc, #52]	@ (8004c24 <MX_LWIP_Init+0x234>)
 8004bf0:	490b      	ldr	r1, [pc, #44]	@ (8004c20 <MX_LWIP_Init+0x230>)
 8004bf2:	4810      	ldr	r0, [pc, #64]	@ (8004c34 <MX_LWIP_Init+0x244>)
 8004bf4:	f001 f94c 	bl	8005e90 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004bf8:	480e      	ldr	r0, [pc, #56]	@ (8004c34 <MX_LWIP_Init+0x244>)
 8004bfa:	f001 fafb 	bl	80061f4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004bfe:	480d      	ldr	r0, [pc, #52]	@ (8004c34 <MX_LWIP_Init+0x244>)
 8004c00:	f001 fb08 	bl	8006214 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004c04:	490c      	ldr	r1, [pc, #48]	@ (8004c38 <MX_LWIP_Init+0x248>)
 8004c06:	480b      	ldr	r0, [pc, #44]	@ (8004c34 <MX_LWIP_Init+0x244>)
 8004c08:	f001 fc06 	bl	8006418 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	2000018c 	.word	0x2000018c
 8004c18:	20000190 	.word	0x20000190
 8004c1c:	20000194 	.word	0x20000194
 8004c20:	20000180 	.word	0x20000180
 8004c24:	20000184 	.word	0x20000184
 8004c28:	20000188 	.word	0x20000188
 8004c2c:	0800eccd 	.word	0x0800eccd
 8004c30:	08004f49 	.word	0x08004f49
 8004c34:	2000014c 	.word	0x2000014c
 8004c38:	08004c8d 	.word	0x08004c8d

08004c3c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004c44:	f7fc f9e6 	bl	8001014 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <Ethernet_Link_Periodic_Handle+0x30>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b63      	cmp	r3, #99	@ 0x63
 8004c52:	d907      	bls.n	8004c64 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004c54:	f7fc f9de 	bl	8001014 <HAL_GetTick>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a04      	ldr	r2, [pc, #16]	@ (8004c6c <Ethernet_Link_Periodic_Handle+0x30>)
 8004c5c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fb00 	bl	8005264 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000148 	.word	0x20000148

08004c70 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004c74:	4804      	ldr	r0, [pc, #16]	@ (8004c88 <MX_LWIP_Process+0x18>)
 8004c76:	f000 f947 	bl	8004f08 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004c7a:	f007 fc3b 	bl	800c4f4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004c7e:	4802      	ldr	r0, [pc, #8]	@ (8004c88 <MX_LWIP_Process+0x18>)
 8004c80:	f7ff ffdc 	bl	8004c3c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	2000014c 	.word	0x2000014c

08004c8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004cac:	4b40      	ldr	r3, [pc, #256]	@ (8004db0 <low_level_init+0x110>)
 8004cae:	4a41      	ldr	r2, [pc, #260]	@ (8004db4 <low_level_init+0x114>)
 8004cb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004cba:	23e1      	movs	r3, #225	@ 0xe1
 8004cbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004cca:	4a39      	ldr	r2, [pc, #228]	@ (8004db0 <low_level_init+0x110>)
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004cd2:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <low_level_init+0x110>)
 8004cd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004cda:	4b35      	ldr	r3, [pc, #212]	@ (8004db0 <low_level_init+0x110>)
 8004cdc:	4a36      	ldr	r2, [pc, #216]	@ (8004db8 <low_level_init+0x118>)
 8004cde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ce0:	4b33      	ldr	r3, [pc, #204]	@ (8004db0 <low_level_init+0x110>)
 8004ce2:	4a36      	ldr	r2, [pc, #216]	@ (8004dbc <low_level_init+0x11c>)
 8004ce4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004ce6:	4b32      	ldr	r3, [pc, #200]	@ (8004db0 <low_level_init+0x110>)
 8004ce8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004cec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004cee:	4830      	ldr	r0, [pc, #192]	@ (8004db0 <low_level_init+0x110>)
 8004cf0:	f7fc faa6 	bl	8001240 <HAL_ETH_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004cf8:	2238      	movs	r2, #56	@ 0x38
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4830      	ldr	r0, [pc, #192]	@ (8004dc0 <low_level_init+0x120>)
 8004cfe:	f00a fa20 	bl	800f142 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004d02:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc0 <low_level_init+0x120>)
 8004d04:	2221      	movs	r2, #33	@ 0x21
 8004d06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004d08:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc0 <low_level_init+0x120>)
 8004d0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004d0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004d10:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc0 <low_level_init+0x120>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004d16:	482b      	ldr	r0, [pc, #172]	@ (8004dc4 <low_level_init+0x124>)
 8004d18:	f000 ff82 	bl	8005c20 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2206      	movs	r2, #6
 8004d20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004d24:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <low_level_init+0x110>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d30:	4b1f      	ldr	r3, [pc, #124]	@ (8004db0 <low_level_init+0x110>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	785a      	ldrb	r2, [r3, #1]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <low_level_init+0x110>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	789a      	ldrb	r2, [r3, #2]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004d48:	4b19      	ldr	r3, [pc, #100]	@ (8004db0 <low_level_init+0x110>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	78da      	ldrb	r2, [r3, #3]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004d54:	4b16      	ldr	r3, [pc, #88]	@ (8004db0 <low_level_init+0x110>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	791a      	ldrb	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004d60:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <low_level_init+0x110>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	795a      	ldrb	r2, [r3, #5]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004d72:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d7a:	f043 030a 	orr.w	r3, r3, #10
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004d86:	4910      	ldr	r1, [pc, #64]	@ (8004dc8 <low_level_init+0x128>)
 8004d88:	4810      	ldr	r0, [pc, #64]	@ (8004dcc <low_level_init+0x12c>)
 8004d8a:	f7fb ff7c 	bl	8000c86 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004d8e:	480f      	ldr	r0, [pc, #60]	@ (8004dcc <low_level_init+0x12c>)
 8004d90:	f7fb ffab 	bl	8000cea <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa62 	bl	8005264 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004da0:	e001      	b.n	8004da6 <low_level_init+0x106>
    Error_Handler();
 8004da2:	f7fb fd7d 	bl	80008a0 <Error_Handler>
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20004c64 	.word	0x20004c64
 8004db4:	40028000 	.word	0x40028000
 8004db8:	20004bc4 	.word	0x20004bc4
 8004dbc:	20004b24 	.word	0x20004b24
 8004dc0:	20004d14 	.word	0x20004d14
 8004dc4:	0801289c 	.word	0x0801289c
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	20004d4c 	.word	0x20004d4c

08004dd0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b092      	sub	sp, #72	@ 0x48
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	2230      	movs	r2, #48	@ 0x30
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f00a f9a6 	bl	800f142 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004df6:	f107 030c 	add.w	r3, r7, #12
 8004dfa:	2230      	movs	r2, #48	@ 0x30
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f00a f99f 	bl	800f142 <memset>

  for(q = p; q != NULL; q = q->next)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e08:	e045      	b.n	8004e96 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d902      	bls.n	8004e16 <low_level_output+0x46>
      return ERR_IF;
 8004e10:	f06f 030b 	mvn.w	r3, #11
 8004e14:	e055      	b.n	8004ec2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e18:	6859      	ldr	r1, [r3, #4]
 8004e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	3348      	adds	r3, #72	@ 0x48
 8004e26:	443b      	add	r3, r7
 8004e28:	3b3c      	subs	r3, #60	@ 0x3c
 8004e2a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e2e:	895b      	ldrh	r3, [r3, #10]
 8004e30:	4619      	mov	r1, r3
 8004e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	3348      	adds	r3, #72	@ 0x48
 8004e3e:	443b      	add	r3, r7
 8004e40:	3b38      	subs	r3, #56	@ 0x38
 8004e42:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d011      	beq.n	8004e6e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	f107 000c 	add.w	r0, r7, #12
 8004e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e54:	460b      	mov	r3, r1
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	440b      	add	r3, r1
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	18c1      	adds	r1, r0, r3
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3348      	adds	r3, #72	@ 0x48
 8004e68:	443b      	add	r3, r7
 8004e6a:	3b34      	subs	r3, #52	@ 0x34
 8004e6c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e78:	4613      	mov	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	3348      	adds	r3, #72	@ 0x48
 8004e82:	443b      	add	r3, r7
 8004e84:	3b34      	subs	r3, #52	@ 0x34
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1b6      	bne.n	8004e0a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	891b      	ldrh	r3, [r3, #8]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <low_level_output+0xfc>)
 8004ea4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004ea6:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <low_level_output+0xfc>)
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004eae:	4a07      	ldr	r2, [pc, #28]	@ (8004ecc <low_level_output+0xfc>)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004eb4:	2214      	movs	r2, #20
 8004eb6:	4905      	ldr	r1, [pc, #20]	@ (8004ecc <low_level_output+0xfc>)
 8004eb8:	4805      	ldr	r0, [pc, #20]	@ (8004ed0 <low_level_output+0x100>)
 8004eba:	f7fc faf7 	bl	80014ac <HAL_ETH_Transmit>

  return errval;
 8004ebe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3748      	adds	r7, #72	@ 0x48
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20004d14 	.word	0x20004d14
 8004ed0:	20004c64 	.word	0x20004c64

08004ed4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <low_level_input+0x2c>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004ee8:	f107 030c 	add.w	r3, r7, #12
 8004eec:	4619      	mov	r1, r3
 8004eee:	4805      	ldr	r0, [pc, #20]	@ (8004f04 <low_level_input+0x30>)
 8004ef0:	f7fc fb70 	bl	80015d4 <HAL_ETH_ReadData>
  }

  return p;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20004b20 	.word	0x20004b20
 8004f04:	20004c64 	.word	0x20004c64

08004f08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ffdd 	bl	8004ed4 <low_level_input>
 8004f1a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	4798      	blx	r3
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f001 fdf0 	bl	8006b18 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ea      	bne.n	8004f14 <ethernetif_input+0xc>
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <ethernetif_init+0x1c>
 8004f56:	4b0e      	ldr	r3, [pc, #56]	@ (8004f90 <ethernetif_init+0x48>)
 8004f58:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8004f5c:	490d      	ldr	r1, [pc, #52]	@ (8004f94 <ethernetif_init+0x4c>)
 8004f5e:	480e      	ldr	r0, [pc, #56]	@ (8004f98 <ethernetif_init+0x50>)
 8004f60:	f00a f88a 	bl	800f078 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2273      	movs	r2, #115	@ 0x73
 8004f68:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2274      	movs	r2, #116	@ 0x74
 8004f70:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a09      	ldr	r2, [pc, #36]	@ (8004f9c <ethernetif_init+0x54>)
 8004f78:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a08      	ldr	r2, [pc, #32]	@ (8004fa0 <ethernetif_init+0x58>)
 8004f7e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fe8d 	bl	8004ca0 <low_level_init>

  return ERR_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	0800fea4 	.word	0x0800fea4
 8004f94:	0800fec0 	.word	0x0800fec0
 8004f98:	0800fed0 	.word	0x0800fed0
 8004f9c:	0800d185 	.word	0x0800d185
 8004fa0:	08004dd1 	.word	0x08004dd1

08004fa4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	4807      	ldr	r0, [pc, #28]	@ (8004fd0 <pbuf_free_custom+0x2c>)
 8004fb4:	f000 ff16 	bl	8005de4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004fb8:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <pbuf_free_custom+0x30>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d102      	bne.n	8004fc6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004fc0:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <pbuf_free_custom+0x30>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	0801289c 	.word	0x0801289c
 8004fd4:	20004b20 	.word	0x20004b20

08004fd8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004fdc:	f7fc f81a 	bl	8001014 <HAL_GetTick>
 8004fe0:	4603      	mov	r3, r0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b090      	sub	sp, #64	@ 0x40
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
 8004ffc:	60da      	str	r2, [r3, #12]
 8004ffe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a69      	ldr	r2, [pc, #420]	@ (80051ac <HAL_ETH_MspInit+0x1c4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	f040 80cb 	bne.w	80051a2 <HAL_ETH_MspInit+0x1ba>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005010:	4b67      	ldr	r3, [pc, #412]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	4a66      	ldr	r2, [pc, #408]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005016:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800501a:	6313      	str	r3, [r2, #48]	@ 0x30
 800501c:	4b64      	ldr	r3, [pc, #400]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	2300      	movs	r3, #0
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	4b60      	ldr	r3, [pc, #384]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005030:	4a5f      	ldr	r2, [pc, #380]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005032:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005036:	6313      	str	r3, [r2, #48]	@ 0x30
 8005038:	4b5d      	ldr	r3, [pc, #372]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	4b59      	ldr	r3, [pc, #356]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504c:	4a58      	ldr	r2, [pc, #352]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800504e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005052:	6313      	str	r3, [r2, #48]	@ 0x30
 8005054:	4b56      	ldr	r3, [pc, #344]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005060:	2300      	movs	r3, #0
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	4b52      	ldr	r3, [pc, #328]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005068:	4a51      	ldr	r2, [pc, #324]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005070:	4b4f      	ldr	r3, [pc, #316]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	4b4b      	ldr	r3, [pc, #300]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005084:	4a4a      	ldr	r2, [pc, #296]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6313      	str	r3, [r2, #48]	@ 0x30
 800508c:	4b48      	ldr	r3, [pc, #288]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	4b44      	ldr	r3, [pc, #272]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	4a43      	ldr	r2, [pc, #268]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 80050a2:	f043 0302 	orr.w	r3, r3, #2
 80050a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80050a8:	4b41      	ldr	r3, [pc, #260]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 80050aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	4b3d      	ldr	r3, [pc, #244]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	4a3c      	ldr	r2, [pc, #240]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 80050be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c4:	4b3a      	ldr	r3, [pc, #232]	@ (80051b0 <HAL_ETH_MspInit+0x1c8>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80050d0:	2332      	movs	r3, #50	@ 0x32
 80050d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d4:	2302      	movs	r3, #2
 80050d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050dc:	2303      	movs	r3, #3
 80050de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050e0:	230b      	movs	r3, #11
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050e8:	4619      	mov	r1, r3
 80050ea:	4832      	ldr	r0, [pc, #200]	@ (80051b4 <HAL_ETH_MspInit+0x1cc>)
 80050ec:	f7fd f9aa 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80050f0:	2386      	movs	r3, #134	@ 0x86
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f4:	2302      	movs	r3, #2
 80050f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fc:	2303      	movs	r3, #3
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005100:	230b      	movs	r3, #11
 8005102:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005108:	4619      	mov	r1, r3
 800510a:	482b      	ldr	r0, [pc, #172]	@ (80051b8 <HAL_ETH_MspInit+0x1d0>)
 800510c:	f7fd f99a 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005110:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005116:	2302      	movs	r3, #2
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511a:	2300      	movs	r3, #0
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511e:	2303      	movs	r3, #3
 8005120:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005122:	230b      	movs	r3, #11
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800512a:	4619      	mov	r1, r3
 800512c:	4823      	ldr	r0, [pc, #140]	@ (80051bc <HAL_ETH_MspInit+0x1d4>)
 800512e:	f7fd f989 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005132:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005138:	2302      	movs	r3, #2
 800513a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513c:	2300      	movs	r3, #0
 800513e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005140:	2303      	movs	r3, #3
 8005142:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005144:	230b      	movs	r3, #11
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005148:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800514c:	4619      	mov	r1, r3
 800514e:	481c      	ldr	r0, [pc, #112]	@ (80051c0 <HAL_ETH_MspInit+0x1d8>)
 8005150:	f7fd f978 	bl	8002444 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

       uint32_t regval;
       HAL_ETH_ReadPHYRegister(&heth, 0, 2, &regval);
 8005154:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005158:	2202      	movs	r2, #2
 800515a:	2100      	movs	r1, #0
 800515c:	4819      	ldr	r0, [pc, #100]	@ (80051c4 <HAL_ETH_MspInit+0x1dc>)
 800515e:	f7fc fb7d 	bl	800185c <HAL_ETH_ReadPHYRegister>

        if (regval && 0xFFF == 0xFFF)                           /* 旧板卡（LAN8720A）引脚复�? */
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <HAL_ETH_MspInit+0x19e>
       {
           PCF8574_WriteBit(7,1);                  /* 硬件复位 */
 8005168:	2101      	movs	r1, #1
 800516a:	2007      	movs	r0, #7
 800516c:	f7fb fa08 	bl	8000580 <PCF8574_WriteBit>
           HAL_Delay(100);
 8005170:	2064      	movs	r0, #100	@ 0x64
 8005172:	f7fb ff5b 	bl	800102c <HAL_Delay>
           PCF8574_WriteBit(7,0);                  /* 复位结束 */
 8005176:	2100      	movs	r1, #0
 8005178:	2007      	movs	r0, #7
 800517a:	f7fb fa01 	bl	8000580 <PCF8574_WriteBit>
           HAL_Delay(100);
 800517e:	2064      	movs	r0, #100	@ 0x64
 8005180:	f7fb ff54 	bl	800102c <HAL_Delay>
           HAL_Delay(100);
       }

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005184:	e00d      	b.n	80051a2 <HAL_ETH_MspInit+0x1ba>
           PCF8574_WriteBit(7,0);                  /* 硬件复位 */
 8005186:	2100      	movs	r1, #0
 8005188:	2007      	movs	r0, #7
 800518a:	f7fb f9f9 	bl	8000580 <PCF8574_WriteBit>
           HAL_Delay(100);
 800518e:	2064      	movs	r0, #100	@ 0x64
 8005190:	f7fb ff4c 	bl	800102c <HAL_Delay>
           PCF8574_WriteBit(7,1);                  /* 复位结束 */
 8005194:	2101      	movs	r1, #1
 8005196:	2007      	movs	r0, #7
 8005198:	f7fb f9f2 	bl	8000580 <PCF8574_WriteBit>
           HAL_Delay(100);
 800519c:	2064      	movs	r0, #100	@ 0x64
 800519e:	f7fb ff45 	bl	800102c <HAL_Delay>
}
 80051a2:	bf00      	nop
 80051a4:	3740      	adds	r7, #64	@ 0x40
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40028000 	.word	0x40028000
 80051b0:	40023800 	.word	0x40023800
 80051b4:	40020800 	.word	0x40020800
 80051b8:	40020000 	.word	0x40020000
 80051bc:	40020400 	.word	0x40020400
 80051c0:	40021800 	.word	0x40021800
 80051c4:	20004c64 	.word	0x20004c64

080051c8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80051cc:	4802      	ldr	r0, [pc, #8]	@ (80051d8 <ETH_PHY_IO_Init+0x10>)
 80051ce:	f7fc fcdd 	bl	8001b8c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20004c64 	.word	0x20004c64

080051dc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return 0;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	4807      	ldr	r0, [pc, #28]	@ (800521c <ETH_PHY_IO_ReadReg+0x30>)
 8005200:	f7fc fb2c 	bl	800185c <HAL_ETH_ReadPHYRegister>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	e000      	b.n	8005212 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20004c64 	.word	0x20004c64

08005220 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	4807      	ldr	r0, [pc, #28]	@ (8005250 <ETH_PHY_IO_WriteReg+0x30>)
 8005234:	f7fc fb5d 	bl	80018f2 <HAL_ETH_WritePHYRegister>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e000      	b.n	8005246 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20004c64 	.word	0x20004c64

08005254 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005258:	f7fb fedc 	bl	8001014 <HAL_GetTick>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b0a0      	sub	sp, #128	@ 0x80
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	2264      	movs	r2, #100	@ 0x64
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f009 ff64 	bl	800f142 <memset>
  int32_t PHYLinkState = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005282:	2300      	movs	r3, #0
 8005284:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005286:	2300      	movs	r3, #0
 8005288:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800528a:	483a      	ldr	r0, [pc, #232]	@ (8005374 <ethernet_link_check_state+0x110>)
 800528c:	f7fb fdd5 	bl	8000e3a <LAN8742_GetLinkState>
 8005290:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00c      	beq.n	80052be <ethernet_link_check_state+0x5a>
 80052a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	dc09      	bgt.n	80052be <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80052aa:	4833      	ldr	r0, [pc, #204]	@ (8005378 <ethernet_link_check_state+0x114>)
 80052ac:	f7fc f8a5 	bl	80013fa <HAL_ETH_Stop>
    netif_set_down(netif);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 f81b 	bl	80062ec <netif_set_down>
    netif_set_link_down(netif);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 f87e 	bl	80063b8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80052bc:	e055      	b.n	800536a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d14e      	bne.n	800536a <ethernet_link_check_state+0x106>
 80052cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	dd4b      	ble.n	800536a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80052d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052d4:	3b02      	subs	r3, #2
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d82a      	bhi.n	8005330 <ethernet_link_check_state+0xcc>
 80052da:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <ethernet_link_check_state+0x7c>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005303 	.word	0x08005303
 80052e8:	08005313 	.word	0x08005313
 80052ec:	08005323 	.word	0x08005323
      duplex = ETH_FULLDUPLEX_MODE;
 80052f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80052f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80052fc:	2301      	movs	r3, #1
 80052fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005300:	e017      	b.n	8005332 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005302:	2300      	movs	r3, #0
 8005304:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005306:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800530a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800530c:	2301      	movs	r3, #1
 800530e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005310:	e00f      	b.n	8005332 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005312:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005316:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005318:	2300      	movs	r3, #0
 800531a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800531c:	2301      	movs	r3, #1
 800531e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005320:	e007      	b.n	8005332 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005322:	2300      	movs	r3, #0
 8005324:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005326:	2300      	movs	r3, #0
 8005328:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800532e:	e000      	b.n	8005332 <ethernet_link_check_state+0xce>
      break;
 8005330:	bf00      	nop
    if(linkchanged)
 8005332:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d018      	beq.n	800536a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005338:	f107 030c 	add.w	r3, r7, #12
 800533c:	4619      	mov	r1, r3
 800533e:	480e      	ldr	r0, [pc, #56]	@ (8005378 <ethernet_link_check_state+0x114>)
 8005340:	f7fc fb20 	bl	8001984 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800534a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800534c:	f107 030c 	add.w	r3, r7, #12
 8005350:	4619      	mov	r1, r3
 8005352:	4809      	ldr	r0, [pc, #36]	@ (8005378 <ethernet_link_check_state+0x114>)
 8005354:	f7fc fc00 	bl	8001b58 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005358:	4807      	ldr	r0, [pc, #28]	@ (8005378 <ethernet_link_check_state+0x114>)
 800535a:	f7fb ffef 	bl	800133c <HAL_ETH_Start>
      netif_set_up(netif);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 ff58 	bl	8006214 <netif_set_up>
      netif_set_link_up(netif);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fff3 	bl	8006350 <netif_set_link_up>
}
 800536a:	bf00      	nop
 800536c:	3780      	adds	r7, #128	@ 0x80
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20004d4c 	.word	0x20004d4c
 8005378:	20004c64 	.word	0x20004c64

0800537c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
 8005382:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005384:	4812      	ldr	r0, [pc, #72]	@ (80053d0 <HAL_ETH_RxAllocateCallback+0x54>)
 8005386:	f000 fcbf 	bl	8005d08 <memp_malloc_pool>
 800538a:	60f8      	str	r0, [r7, #12]
  if (p)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d014      	beq.n	80053bc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f103 0220 	add.w	r2, r3, #32
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a0d      	ldr	r2, [pc, #52]	@ (80053d4 <HAL_ETH_RxAllocateCallback+0x58>)
 80053a0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80053aa:	9201      	str	r2, [sp, #4]
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2241      	movs	r2, #65	@ 0x41
 80053b2:	2100      	movs	r1, #0
 80053b4:	2000      	movs	r0, #0
 80053b6:	f001 f9f5 	bl	80067a4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80053ba:	e005      	b.n	80053c8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	0801289c 	.word	0x0801289c
 80053d4:	08004fa5 	.word	0x08004fa5
 80053d8:	20004b20 	.word	0x20004b20

080053dc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80053dc:	b480      	push	{r7}
 80053de:	b089      	sub	sp, #36	@ 0x24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3b20      	subs	r3, #32
 80053fa:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2200      	movs	r2, #0
 8005406:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	887a      	ldrh	r2, [r7, #2]
 800540c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e003      	b.n	8005426 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	61fb      	str	r3, [r7, #28]
 8005432:	e009      	b.n	8005448 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	891a      	ldrh	r2, [r3, #8]
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	4413      	add	r3, r2
 800543c:	b29a      	uxth	r2, r3
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f2      	bne.n	8005434 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	3724      	adds	r7, #36	@ 0x24
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	b21a      	sxth	r2, r3
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	b29b      	uxth	r3, r3
 8005472:	b21b      	sxth	r3, r3
 8005474:	4313      	orrs	r3, r2
 8005476:	b21b      	sxth	r3, r3
 8005478:	b29b      	uxth	r3, r3
}
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	061a      	lsls	r2, r3, #24
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	0a1b      	lsrs	r3, r3, #8
 80054a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	4313      	orrs	r3, r2
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80054c2:	f000 f8d5 	bl	8005670 <mem_init>
  memp_init();
 80054c6:	f000 fbdb 	bl	8005c80 <memp_init>
  pbuf_init();
  netif_init();
 80054ca:	f000 fcd9 	bl	8005e80 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80054ce:	f007 f853 	bl	800c578 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80054d2:	f001 fdaf 	bl	8007034 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80054d6:	f006 ffc5 	bl	800c464 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80054ee:	4b05      	ldr	r3, [pc, #20]	@ (8005504 <ptr_to_mem+0x20>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4413      	add	r3, r2
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	200053d8 	.word	0x200053d8

08005508 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005510:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <mem_to_ptr+0x20>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	b29b      	uxth	r3, r3
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	200053d8 	.word	0x200053d8

0800552c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005534:	4b45      	ldr	r3, [pc, #276]	@ (800564c <plug_holes+0x120>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	429a      	cmp	r2, r3
 800553c:	d206      	bcs.n	800554c <plug_holes+0x20>
 800553e:	4b44      	ldr	r3, [pc, #272]	@ (8005650 <plug_holes+0x124>)
 8005540:	f240 12df 	movw	r2, #479	@ 0x1df
 8005544:	4943      	ldr	r1, [pc, #268]	@ (8005654 <plug_holes+0x128>)
 8005546:	4844      	ldr	r0, [pc, #272]	@ (8005658 <plug_holes+0x12c>)
 8005548:	f009 fd96 	bl	800f078 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800554c:	4b43      	ldr	r3, [pc, #268]	@ (800565c <plug_holes+0x130>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	429a      	cmp	r2, r3
 8005554:	d306      	bcc.n	8005564 <plug_holes+0x38>
 8005556:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <plug_holes+0x124>)
 8005558:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800555c:	4940      	ldr	r1, [pc, #256]	@ (8005660 <plug_holes+0x134>)
 800555e:	483e      	ldr	r0, [pc, #248]	@ (8005658 <plug_holes+0x12c>)
 8005560:	f009 fd8a 	bl	800f078 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	791b      	ldrb	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <plug_holes+0x4e>
 800556c:	4b38      	ldr	r3, [pc, #224]	@ (8005650 <plug_holes+0x124>)
 800556e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005572:	493c      	ldr	r1, [pc, #240]	@ (8005664 <plug_holes+0x138>)
 8005574:	4838      	ldr	r0, [pc, #224]	@ (8005658 <plug_holes+0x12c>)
 8005576:	f009 fd7f 	bl	800f078 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005582:	d906      	bls.n	8005592 <plug_holes+0x66>
 8005584:	4b32      	ldr	r3, [pc, #200]	@ (8005650 <plug_holes+0x124>)
 8005586:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800558a:	4937      	ldr	r1, [pc, #220]	@ (8005668 <plug_holes+0x13c>)
 800558c:	4832      	ldr	r0, [pc, #200]	@ (8005658 <plug_holes+0x12c>)
 800558e:	f009 fd73 	bl	800f078 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff ffa4 	bl	80054e4 <ptr_to_mem>
 800559c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d024      	beq.n	80055f0 <plug_holes+0xc4>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	791b      	ldrb	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d120      	bne.n	80055f0 <plug_holes+0xc4>
 80055ae:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <plug_holes+0x130>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d01b      	beq.n	80055f0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80055b8:	4b2c      	ldr	r3, [pc, #176]	@ (800566c <plug_holes+0x140>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d102      	bne.n	80055c8 <plug_holes+0x9c>
      lfree = mem;
 80055c2:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <plug_holes+0x140>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	881a      	ldrh	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80055d8:	d00a      	beq.n	80055f0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff ff80 	bl	80054e4 <ptr_to_mem>
 80055e4:	4604      	mov	r4, r0
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff ff8e 	bl	8005508 <mem_to_ptr>
 80055ec:	4603      	mov	r3, r0
 80055ee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	885b      	ldrh	r3, [r3, #2]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff75 	bl	80054e4 <ptr_to_mem>
 80055fa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d01f      	beq.n	8005644 <plug_holes+0x118>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	791b      	ldrb	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11b      	bne.n	8005644 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800560c:	4b17      	ldr	r3, [pc, #92]	@ (800566c <plug_holes+0x140>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d102      	bne.n	800561c <plug_holes+0xf0>
      lfree = pmem;
 8005616:	4a15      	ldr	r2, [pc, #84]	@ (800566c <plug_holes+0x140>)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800562c:	d00a      	beq.n	8005644 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff56 	bl	80054e4 <ptr_to_mem>
 8005638:	4604      	mov	r4, r0
 800563a:	68b8      	ldr	r0, [r7, #8]
 800563c:	f7ff ff64 	bl	8005508 <mem_to_ptr>
 8005640:	4603      	mov	r3, r0
 8005642:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bd90      	pop	{r4, r7, pc}
 800564c:	200053d8 	.word	0x200053d8
 8005650:	0800fef8 	.word	0x0800fef8
 8005654:	0800ff28 	.word	0x0800ff28
 8005658:	0800ff40 	.word	0x0800ff40
 800565c:	200053dc 	.word	0x200053dc
 8005660:	0800ff68 	.word	0x0800ff68
 8005664:	0800ff84 	.word	0x0800ff84
 8005668:	0800ffa0 	.word	0x0800ffa0
 800566c:	200053e0 	.word	0x200053e0

08005670 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005676:	4b18      	ldr	r3, [pc, #96]	@ (80056d8 <mem_init+0x68>)
 8005678:	3303      	adds	r3, #3
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	461a      	mov	r2, r3
 8005680:	4b16      	ldr	r3, [pc, #88]	@ (80056dc <mem_init+0x6c>)
 8005682:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005684:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <mem_init+0x6c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8005690:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800569e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80056a2:	f7ff ff1f 	bl	80054e4 <ptr_to_mem>
 80056a6:	4603      	mov	r3, r0
 80056a8:	4a0d      	ldr	r2, [pc, #52]	@ (80056e0 <mem_init+0x70>)
 80056aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80056ac:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <mem_init+0x70>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2201      	movs	r2, #1
 80056b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80056b4:	4b0a      	ldr	r3, [pc, #40]	@ (80056e0 <mem_init+0x70>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80056bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80056be:	4b08      	ldr	r3, [pc, #32]	@ (80056e0 <mem_init+0x70>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80056c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80056c8:	4b04      	ldr	r3, [pc, #16]	@ (80056dc <mem_init+0x6c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a05      	ldr	r2, [pc, #20]	@ (80056e4 <mem_init+0x74>)
 80056ce:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20004d84 	.word	0x20004d84
 80056dc:	200053d8 	.word	0x200053d8
 80056e0:	200053dc 	.word	0x200053dc
 80056e4:	200053e0 	.word	0x200053e0

080056e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff ff09 	bl	8005508 <mem_to_ptr>
 80056f6:	4603      	mov	r3, r0
 80056f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fef0 	bl	80054e4 <ptr_to_mem>
 8005704:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	885b      	ldrh	r3, [r3, #2]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff feea 	bl	80054e4 <ptr_to_mem>
 8005710:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800571a:	d818      	bhi.n	800574e <mem_link_valid+0x66>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	885b      	ldrh	r3, [r3, #2]
 8005720:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005724:	d813      	bhi.n	800574e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800572a:	8afa      	ldrh	r2, [r7, #22]
 800572c:	429a      	cmp	r2, r3
 800572e:	d004      	beq.n	800573a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	8afa      	ldrh	r2, [r7, #22]
 8005736:	429a      	cmp	r2, r3
 8005738:	d109      	bne.n	800574e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800573a:	4b08      	ldr	r3, [pc, #32]	@ (800575c <mem_link_valid+0x74>)
 800573c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	d006      	beq.n	8005752 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	885b      	ldrh	r3, [r3, #2]
 8005748:	8afa      	ldrh	r2, [r7, #22]
 800574a:	429a      	cmp	r2, r3
 800574c:	d001      	beq.n	8005752 <mem_link_valid+0x6a>
    return 0;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <mem_link_valid+0x6c>
  }
  return 1;
 8005752:	2301      	movs	r3, #1
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200053dc 	.word	0x200053dc

08005760 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04c      	beq.n	8005808 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005778:	4b25      	ldr	r3, [pc, #148]	@ (8005810 <mem_free+0xb0>)
 800577a:	f240 2273 	movw	r2, #627	@ 0x273
 800577e:	4925      	ldr	r1, [pc, #148]	@ (8005814 <mem_free+0xb4>)
 8005780:	4825      	ldr	r0, [pc, #148]	@ (8005818 <mem_free+0xb8>)
 8005782:	f009 fc79 	bl	800f078 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005786:	e040      	b.n	800580a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3b08      	subs	r3, #8
 800578c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800578e:	4b23      	ldr	r3, [pc, #140]	@ (800581c <mem_free+0xbc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	429a      	cmp	r2, r3
 8005796:	d306      	bcc.n	80057a6 <mem_free+0x46>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f103 020c 	add.w	r2, r3, #12
 800579e:	4b20      	ldr	r3, [pc, #128]	@ (8005820 <mem_free+0xc0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d907      	bls.n	80057b6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80057a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005810 <mem_free+0xb0>)
 80057a8:	f240 227f 	movw	r2, #639	@ 0x27f
 80057ac:	491d      	ldr	r1, [pc, #116]	@ (8005824 <mem_free+0xc4>)
 80057ae:	481a      	ldr	r0, [pc, #104]	@ (8005818 <mem_free+0xb8>)
 80057b0:	f009 fc62 	bl	800f078 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057b4:	e029      	b.n	800580a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80057be:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <mem_free+0xb0>)
 80057c0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80057c4:	4918      	ldr	r1, [pc, #96]	@ (8005828 <mem_free+0xc8>)
 80057c6:	4814      	ldr	r0, [pc, #80]	@ (8005818 <mem_free+0xb8>)
 80057c8:	f009 fc56 	bl	800f078 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057cc:	e01d      	b.n	800580a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff ff8a 	bl	80056e8 <mem_link_valid>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d107      	bne.n	80057ea <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <mem_free+0xb0>)
 80057dc:	f240 2295 	movw	r2, #661	@ 0x295
 80057e0:	4912      	ldr	r1, [pc, #72]	@ (800582c <mem_free+0xcc>)
 80057e2:	480d      	ldr	r0, [pc, #52]	@ (8005818 <mem_free+0xb8>)
 80057e4:	f009 fc48 	bl	800f078 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80057e8:	e00f      	b.n	800580a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80057f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <mem_free+0xd0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d202      	bcs.n	8005800 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80057fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005830 <mem_free+0xd0>)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fe93 	bl	800552c <plug_holes>
 8005806:	e000      	b.n	800580a <mem_free+0xaa>
    return;
 8005808:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	0800fef8 	.word	0x0800fef8
 8005814:	0800ffcc 	.word	0x0800ffcc
 8005818:	0800ff40 	.word	0x0800ff40
 800581c:	200053d8 	.word	0x200053d8
 8005820:	200053dc 	.word	0x200053dc
 8005824:	0800fff0 	.word	0x0800fff0
 8005828:	0801000c 	.word	0x0801000c
 800582c:	08010034 	.word	0x08010034
 8005830:	200053e0 	.word	0x200053e0

08005834 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	3303      	adds	r3, #3
 8005844:	b29b      	uxth	r3, r3
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800584c:	8bfb      	ldrh	r3, [r7, #30]
 800584e:	2b0b      	cmp	r3, #11
 8005850:	d801      	bhi.n	8005856 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005852:	230c      	movs	r3, #12
 8005854:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005856:	8bfb      	ldrh	r3, [r7, #30]
 8005858:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800585c:	d803      	bhi.n	8005866 <mem_trim+0x32>
 800585e:	8bfa      	ldrh	r2, [r7, #30]
 8005860:	887b      	ldrh	r3, [r7, #2]
 8005862:	429a      	cmp	r2, r3
 8005864:	d201      	bcs.n	800586a <mem_trim+0x36>
    return NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	e0cc      	b.n	8005a04 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800586a:	4b68      	ldr	r3, [pc, #416]	@ (8005a0c <mem_trim+0x1d8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d304      	bcc.n	800587e <mem_trim+0x4a>
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <mem_trim+0x1dc>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	429a      	cmp	r2, r3
 800587c:	d306      	bcc.n	800588c <mem_trim+0x58>
 800587e:	4b65      	ldr	r3, [pc, #404]	@ (8005a14 <mem_trim+0x1e0>)
 8005880:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8005884:	4964      	ldr	r1, [pc, #400]	@ (8005a18 <mem_trim+0x1e4>)
 8005886:	4865      	ldr	r0, [pc, #404]	@ (8005a1c <mem_trim+0x1e8>)
 8005888:	f009 fbf6 	bl	800f078 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800588c:	4b5f      	ldr	r3, [pc, #380]	@ (8005a0c <mem_trim+0x1d8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d304      	bcc.n	80058a0 <mem_trim+0x6c>
 8005896:	4b5e      	ldr	r3, [pc, #376]	@ (8005a10 <mem_trim+0x1dc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d301      	bcc.n	80058a4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	e0af      	b.n	8005a04 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3b08      	subs	r3, #8
 80058a8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80058aa:	69b8      	ldr	r0, [r7, #24]
 80058ac:	f7ff fe2c 	bl	8005508 <mem_to_ptr>
 80058b0:	4603      	mov	r3, r0
 80058b2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	881a      	ldrh	r2, [r3, #0]
 80058b8:	8afb      	ldrh	r3, [r7, #22]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b08      	subs	r3, #8
 80058c0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80058c2:	8bfa      	ldrh	r2, [r7, #30]
 80058c4:	8abb      	ldrh	r3, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d906      	bls.n	80058d8 <mem_trim+0xa4>
 80058ca:	4b52      	ldr	r3, [pc, #328]	@ (8005a14 <mem_trim+0x1e0>)
 80058cc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80058d0:	4953      	ldr	r1, [pc, #332]	@ (8005a20 <mem_trim+0x1ec>)
 80058d2:	4852      	ldr	r0, [pc, #328]	@ (8005a1c <mem_trim+0x1e8>)
 80058d4:	f009 fbd0 	bl	800f078 <iprintf>
  if (newsize > size) {
 80058d8:	8bfa      	ldrh	r2, [r7, #30]
 80058da:	8abb      	ldrh	r3, [r7, #20]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d901      	bls.n	80058e4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e08f      	b.n	8005a04 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80058e4:	8bfa      	ldrh	r2, [r7, #30]
 80058e6:	8abb      	ldrh	r3, [r7, #20]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d101      	bne.n	80058f0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	e089      	b.n	8005a04 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fdf5 	bl	80054e4 <ptr_to_mem>
 80058fa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	791b      	ldrb	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d13f      	bne.n	8005984 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800590c:	d106      	bne.n	800591c <mem_trim+0xe8>
 800590e:	4b41      	ldr	r3, [pc, #260]	@ (8005a14 <mem_trim+0x1e0>)
 8005910:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005914:	4943      	ldr	r1, [pc, #268]	@ (8005a24 <mem_trim+0x1f0>)
 8005916:	4841      	ldr	r0, [pc, #260]	@ (8005a1c <mem_trim+0x1e8>)
 8005918:	f009 fbae 	bl	800f078 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005922:	8afa      	ldrh	r2, [r7, #22]
 8005924:	8bfb      	ldrh	r3, [r7, #30]
 8005926:	4413      	add	r3, r2
 8005928:	b29b      	uxth	r3, r3
 800592a:	3308      	adds	r3, #8
 800592c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800592e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a28 <mem_trim+0x1f4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	429a      	cmp	r2, r3
 8005936:	d106      	bne.n	8005946 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fdd2 	bl	80054e4 <ptr_to_mem>
 8005940:	4603      	mov	r3, r0
 8005942:	4a39      	ldr	r2, [pc, #228]	@ (8005a28 <mem_trim+0x1f4>)
 8005944:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005946:	89fb      	ldrh	r3, [r7, #14]
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fdcb 	bl	80054e4 <ptr_to_mem>
 800594e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2200      	movs	r2, #0
 8005954:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	89ba      	ldrh	r2, [r7, #12]
 800595a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	8afa      	ldrh	r2, [r7, #22]
 8005960:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	89fa      	ldrh	r2, [r7, #14]
 8005966:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005970:	d047      	beq.n	8005a02 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fdb4 	bl	80054e4 <ptr_to_mem>
 800597c:	4602      	mov	r2, r0
 800597e:	89fb      	ldrh	r3, [r7, #14]
 8005980:	8053      	strh	r3, [r2, #2]
 8005982:	e03e      	b.n	8005a02 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005984:	8bfb      	ldrh	r3, [r7, #30]
 8005986:	f103 0214 	add.w	r2, r3, #20
 800598a:	8abb      	ldrh	r3, [r7, #20]
 800598c:	429a      	cmp	r2, r3
 800598e:	d838      	bhi.n	8005a02 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005990:	8afa      	ldrh	r2, [r7, #22]
 8005992:	8bfb      	ldrh	r3, [r7, #30]
 8005994:	4413      	add	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	3308      	adds	r3, #8
 800599a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80059a4:	d106      	bne.n	80059b4 <mem_trim+0x180>
 80059a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a14 <mem_trim+0x1e0>)
 80059a8:	f240 3216 	movw	r2, #790	@ 0x316
 80059ac:	491d      	ldr	r1, [pc, #116]	@ (8005a24 <mem_trim+0x1f0>)
 80059ae:	481b      	ldr	r0, [pc, #108]	@ (8005a1c <mem_trim+0x1e8>)
 80059b0:	f009 fb62 	bl	800f078 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80059b4:	89fb      	ldrh	r3, [r7, #14]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fd94 	bl	80054e4 <ptr_to_mem>
 80059bc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80059be:	4b1a      	ldr	r3, [pc, #104]	@ (8005a28 <mem_trim+0x1f4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d202      	bcs.n	80059ce <mem_trim+0x19a>
      lfree = mem2;
 80059c8:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <mem_trim+0x1f4>)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2200      	movs	r2, #0
 80059d2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	8afa      	ldrh	r2, [r7, #22]
 80059e0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	89fa      	ldrh	r2, [r7, #14]
 80059e6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80059f0:	d007      	beq.n	8005a02 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fd74 	bl	80054e4 <ptr_to_mem>
 80059fc:	4602      	mov	r2, r0
 80059fe:	89fb      	ldrh	r3, [r7, #14]
 8005a00:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005a02:	687b      	ldr	r3, [r7, #4]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200053d8 	.word	0x200053d8
 8005a10:	200053dc 	.word	0x200053dc
 8005a14:	0800fef8 	.word	0x0800fef8
 8005a18:	08010068 	.word	0x08010068
 8005a1c:	0800ff40 	.word	0x0800ff40
 8005a20:	08010080 	.word	0x08010080
 8005a24:	080100a0 	.word	0x080100a0
 8005a28:	200053e0 	.word	0x200053e0

08005a2c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <mem_malloc+0x14>
    return NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e0d9      	b.n	8005bf4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	3303      	adds	r3, #3
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005a4c:	8bbb      	ldrh	r3, [r7, #28]
 8005a4e:	2b0b      	cmp	r3, #11
 8005a50:	d801      	bhi.n	8005a56 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005a52:	230c      	movs	r3, #12
 8005a54:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005a56:	8bbb      	ldrh	r3, [r7, #28]
 8005a58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005a5c:	d803      	bhi.n	8005a66 <mem_malloc+0x3a>
 8005a5e:	8bba      	ldrh	r2, [r7, #28]
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d201      	bcs.n	8005a6a <mem_malloc+0x3e>
    return NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e0c4      	b.n	8005bf4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005a6a:	4b64      	ldr	r3, [pc, #400]	@ (8005bfc <mem_malloc+0x1d0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fd4a 	bl	8005508 <mem_to_ptr>
 8005a74:	4603      	mov	r3, r0
 8005a76:	83fb      	strh	r3, [r7, #30]
 8005a78:	e0b4      	b.n	8005be4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005a7a:	8bfb      	ldrh	r3, [r7, #30]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fd31 	bl	80054e4 <ptr_to_mem>
 8005a82:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 80a4 	bne.w	8005bd6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	8bfb      	ldrh	r3, [r7, #30]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	f1a3 0208 	sub.w	r2, r3, #8
 8005a9c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	f0c0 8099 	bcc.w	8005bd6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	8bfb      	ldrh	r3, [r7, #30]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	f1a3 0208 	sub.w	r2, r3, #8
 8005ab2:	8bbb      	ldrh	r3, [r7, #28]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d333      	bcc.n	8005b22 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005aba:	8bfa      	ldrh	r2, [r7, #30]
 8005abc:	8bbb      	ldrh	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005ac6:	8a7b      	ldrh	r3, [r7, #18]
 8005ac8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005acc:	d106      	bne.n	8005adc <mem_malloc+0xb0>
 8005ace:	4b4c      	ldr	r3, [pc, #304]	@ (8005c00 <mem_malloc+0x1d4>)
 8005ad0:	f240 3287 	movw	r2, #903	@ 0x387
 8005ad4:	494b      	ldr	r1, [pc, #300]	@ (8005c04 <mem_malloc+0x1d8>)
 8005ad6:	484c      	ldr	r0, [pc, #304]	@ (8005c08 <mem_malloc+0x1dc>)
 8005ad8:	f009 face 	bl	800f078 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005adc:	8a7b      	ldrh	r3, [r7, #18]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fd00 	bl	80054e4 <ptr_to_mem>
 8005ae4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	881a      	ldrh	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8bfa      	ldrh	r2, [r7, #30]
 8005af8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	8a7a      	ldrh	r2, [r7, #18]
 8005afe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2201      	movs	r2, #1
 8005b04:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005b0e:	d00b      	beq.n	8005b28 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fce5 	bl	80054e4 <ptr_to_mem>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	8a7b      	ldrh	r3, [r7, #18]
 8005b1e:	8053      	strh	r3, [r2, #2]
 8005b20:	e002      	b.n	8005b28 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2201      	movs	r2, #1
 8005b26:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005b28:	4b34      	ldr	r3, [pc, #208]	@ (8005bfc <mem_malloc+0x1d0>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d127      	bne.n	8005b82 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005b32:	4b32      	ldr	r3, [pc, #200]	@ (8005bfc <mem_malloc+0x1d0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005b38:	e005      	b.n	8005b46 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fcd0 	bl	80054e4 <ptr_to_mem>
 8005b44:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	791b      	ldrb	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <mem_malloc+0x12c>
 8005b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c0c <mem_malloc+0x1e0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1f0      	bne.n	8005b3a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005b58:	4a28      	ldr	r2, [pc, #160]	@ (8005bfc <mem_malloc+0x1d0>)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005b5e:	4b27      	ldr	r3, [pc, #156]	@ (8005bfc <mem_malloc+0x1d0>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b2a      	ldr	r3, [pc, #168]	@ (8005c0c <mem_malloc+0x1e0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d00b      	beq.n	8005b82 <mem_malloc+0x156>
 8005b6a:	4b24      	ldr	r3, [pc, #144]	@ (8005bfc <mem_malloc+0x1d0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	791b      	ldrb	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d006      	beq.n	8005b82 <mem_malloc+0x156>
 8005b74:	4b22      	ldr	r3, [pc, #136]	@ (8005c00 <mem_malloc+0x1d4>)
 8005b76:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8005b7a:	4925      	ldr	r1, [pc, #148]	@ (8005c10 <mem_malloc+0x1e4>)
 8005b7c:	4822      	ldr	r0, [pc, #136]	@ (8005c08 <mem_malloc+0x1dc>)
 8005b7e:	f009 fa7b 	bl	800f078 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005b82:	8bba      	ldrh	r2, [r7, #28]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	3308      	adds	r3, #8
 8005b8a:	4a20      	ldr	r2, [pc, #128]	@ (8005c0c <mem_malloc+0x1e0>)
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d906      	bls.n	8005ba0 <mem_malloc+0x174>
 8005b92:	4b1b      	ldr	r3, [pc, #108]	@ (8005c00 <mem_malloc+0x1d4>)
 8005b94:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005b98:	491e      	ldr	r1, [pc, #120]	@ (8005c14 <mem_malloc+0x1e8>)
 8005b9a:	481b      	ldr	r0, [pc, #108]	@ (8005c08 <mem_malloc+0x1dc>)
 8005b9c:	f009 fa6c 	bl	800f078 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <mem_malloc+0x18c>
 8005baa:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <mem_malloc+0x1d4>)
 8005bac:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005bb0:	4919      	ldr	r1, [pc, #100]	@ (8005c18 <mem_malloc+0x1ec>)
 8005bb2:	4815      	ldr	r0, [pc, #84]	@ (8005c08 <mem_malloc+0x1dc>)
 8005bb4:	f009 fa60 	bl	800f078 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d006      	beq.n	8005bd0 <mem_malloc+0x1a4>
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <mem_malloc+0x1d4>)
 8005bc4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005bc8:	4914      	ldr	r1, [pc, #80]	@ (8005c1c <mem_malloc+0x1f0>)
 8005bca:	480f      	ldr	r0, [pc, #60]	@ (8005c08 <mem_malloc+0x1dc>)
 8005bcc:	f009 fa54 	bl	800f078 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	e00e      	b.n	8005bf4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005bd6:	8bfb      	ldrh	r3, [r7, #30]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff fc83 	bl	80054e4 <ptr_to_mem>
 8005bde:	4603      	mov	r3, r0
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005be4:	8bfa      	ldrh	r2, [r7, #30]
 8005be6:	8bbb      	ldrh	r3, [r7, #28]
 8005be8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8005bec:	429a      	cmp	r2, r3
 8005bee:	f4ff af44 	bcc.w	8005a7a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3720      	adds	r7, #32
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200053e0 	.word	0x200053e0
 8005c00:	0800fef8 	.word	0x0800fef8
 8005c04:	080100a0 	.word	0x080100a0
 8005c08:	0800ff40 	.word	0x0800ff40
 8005c0c:	200053dc 	.word	0x200053dc
 8005c10:	080100b4 	.word	0x080100b4
 8005c14:	080100d0 	.word	0x080100d0
 8005c18:	08010100 	.word	0x08010100
 8005c1c:	08010130 	.word	0x08010130

08005c20 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	3303      	adds	r3, #3
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e011      	b.n	8005c66 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	885b      	ldrh	r3, [r3, #2]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	dbe7      	blt.n	8005c42 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c86:	2300      	movs	r3, #0
 8005c88:	80fb      	strh	r3, [r7, #6]
 8005c8a:	e009      	b.n	8005ca0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	4a08      	ldr	r2, [pc, #32]	@ (8005cb0 <memp_init+0x30>)
 8005c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ffc3 	bl	8005c20 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	80fb      	strh	r3, [r7, #6]
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d9f2      	bls.n	8005c8c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08012914 	.word	0x08012914

08005cb4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d012      	beq.n	8005cf0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <do_memp_malloc_pool+0x38>
 8005cde:	4b07      	ldr	r3, [pc, #28]	@ (8005cfc <do_memp_malloc_pool+0x48>)
 8005ce0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005ce4:	4906      	ldr	r1, [pc, #24]	@ (8005d00 <do_memp_malloc_pool+0x4c>)
 8005ce6:	4807      	ldr	r0, [pc, #28]	@ (8005d04 <do_memp_malloc_pool+0x50>)
 8005ce8:	f009 f9c6 	bl	800f078 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e000      	b.n	8005cf2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	08010154 	.word	0x08010154
 8005d00:	08010184 	.word	0x08010184
 8005d04:	080101a8 	.word	0x080101a8

08005d08 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <memp_malloc_pool+0x1c>
 8005d16:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <memp_malloc_pool+0x38>)
 8005d18:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005d1c:	4909      	ldr	r1, [pc, #36]	@ (8005d44 <memp_malloc_pool+0x3c>)
 8005d1e:	480a      	ldr	r0, [pc, #40]	@ (8005d48 <memp_malloc_pool+0x40>)
 8005d20:	f009 f9aa 	bl	800f078 <iprintf>
  if (desc == NULL) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <memp_malloc_pool+0x26>
    return NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e003      	b.n	8005d36 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ffc0 	bl	8005cb4 <do_memp_malloc_pool>
 8005d34:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08010154 	.word	0x08010154
 8005d44:	080101d0 	.word	0x080101d0
 8005d48:	080101a8 	.word	0x080101a8

08005d4c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d908      	bls.n	8005d6e <memp_malloc+0x22>
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <memp_malloc+0x3c>)
 8005d5e:	f240 1257 	movw	r2, #343	@ 0x157
 8005d62:	490a      	ldr	r1, [pc, #40]	@ (8005d8c <memp_malloc+0x40>)
 8005d64:	480a      	ldr	r0, [pc, #40]	@ (8005d90 <memp_malloc+0x44>)
 8005d66:	f009 f987 	bl	800f078 <iprintf>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e008      	b.n	8005d80 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	4a08      	ldr	r2, [pc, #32]	@ (8005d94 <memp_malloc+0x48>)
 8005d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff ff9c 	bl	8005cb4 <do_memp_malloc_pool>
 8005d7c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	08010154 	.word	0x08010154
 8005d8c:	080101e4 	.word	0x080101e4
 8005d90:	080101a8 	.word	0x080101a8
 8005d94:	08012914 	.word	0x08012914

08005d98 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <do_memp_free_pool+0x22>
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <do_memp_free_pool+0x40>)
 8005dae:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005db2:	490a      	ldr	r1, [pc, #40]	@ (8005ddc <do_memp_free_pool+0x44>)
 8005db4:	480a      	ldr	r0, [pc, #40]	@ (8005de0 <do_memp_free_pool+0x48>)
 8005db6:	f009 f95f 	bl	800f078 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	08010154 	.word	0x08010154
 8005ddc:	08010204 	.word	0x08010204
 8005de0:	080101a8 	.word	0x080101a8

08005de4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <memp_free_pool+0x1e>
 8005df4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e20 <memp_free_pool+0x3c>)
 8005df6:	f240 1295 	movw	r2, #405	@ 0x195
 8005dfa:	490a      	ldr	r1, [pc, #40]	@ (8005e24 <memp_free_pool+0x40>)
 8005dfc:	480a      	ldr	r0, [pc, #40]	@ (8005e28 <memp_free_pool+0x44>)
 8005dfe:	f009 f93b 	bl	800f078 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <memp_free_pool+0x34>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ffc1 	bl	8005d98 <do_memp_free_pool>
 8005e16:	e000      	b.n	8005e1a <memp_free_pool+0x36>
    return;
 8005e18:	bf00      	nop
}
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	08010154 	.word	0x08010154
 8005e24:	080101d0 	.word	0x080101d0
 8005e28:	080101a8 	.word	0x080101a8

08005e2c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d907      	bls.n	8005e4e <memp_free+0x22>
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <memp_free+0x44>)
 8005e40:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005e44:	490b      	ldr	r1, [pc, #44]	@ (8005e74 <memp_free+0x48>)
 8005e46:	480c      	ldr	r0, [pc, #48]	@ (8005e78 <memp_free+0x4c>)
 8005e48:	f009 f916 	bl	800f078 <iprintf>
 8005e4c:	e00c      	b.n	8005e68 <memp_free+0x3c>

  if (mem == NULL) {
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	4a09      	ldr	r2, [pc, #36]	@ (8005e7c <memp_free+0x50>)
 8005e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff ff9a 	bl	8005d98 <do_memp_free_pool>
 8005e64:	e000      	b.n	8005e68 <memp_free+0x3c>
    return;
 8005e66:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	08010154 	.word	0x08010154
 8005e74:	08010224 	.word	0x08010224
 8005e78:	080101a8 	.word	0x080101a8
 8005e7c:	08012914 	.word	0x08012914

08005e80 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d108      	bne.n	8005eb6 <netif_add+0x26>
 8005ea4:	4b57      	ldr	r3, [pc, #348]	@ (8006004 <netif_add+0x174>)
 8005ea6:	f240 1227 	movw	r2, #295	@ 0x127
 8005eaa:	4957      	ldr	r1, [pc, #348]	@ (8006008 <netif_add+0x178>)
 8005eac:	4857      	ldr	r0, [pc, #348]	@ (800600c <netif_add+0x17c>)
 8005eae:	f009 f8e3 	bl	800f078 <iprintf>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e0a2      	b.n	8005ffc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <netif_add+0x3e>
 8005ebc:	4b51      	ldr	r3, [pc, #324]	@ (8006004 <netif_add+0x174>)
 8005ebe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005ec2:	4953      	ldr	r1, [pc, #332]	@ (8006010 <netif_add+0x180>)
 8005ec4:	4851      	ldr	r0, [pc, #324]	@ (800600c <netif_add+0x17c>)
 8005ec6:	f009 f8d7 	bl	800f078 <iprintf>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e096      	b.n	8005ffc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8006014 <netif_add+0x184>)
 8005ed6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005ede:	4b4d      	ldr	r3, [pc, #308]	@ (8006014 <netif_add+0x184>)
 8005ee0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8006014 <netif_add+0x184>)
 8005eea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4a45      	ldr	r2, [pc, #276]	@ (8006018 <netif_add+0x188>)
 8005f02:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800601c <netif_add+0x18c>)
 8005f20:	781a      	ldrb	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f913 	bl	8006160 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <netif_add+0xba>
    return NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e058      	b.n	8005ffc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f50:	2bff      	cmp	r3, #255	@ 0xff
 8005f52:	d103      	bne.n	8005f5c <netif_add+0xcc>
        netif->num = 0;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005f60:	4b2f      	ldr	r3, [pc, #188]	@ (8006020 <netif_add+0x190>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e02b      	b.n	8005fc0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d106      	bne.n	8005f7e <netif_add+0xee>
 8005f70:	4b24      	ldr	r3, [pc, #144]	@ (8006004 <netif_add+0x174>)
 8005f72:	f240 128b 	movw	r2, #395	@ 0x18b
 8005f76:	492b      	ldr	r1, [pc, #172]	@ (8006024 <netif_add+0x194>)
 8005f78:	4824      	ldr	r0, [pc, #144]	@ (800600c <netif_add+0x17c>)
 8005f7a:	f009 f87d 	bl	800f078 <iprintf>
        num_netifs++;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	3301      	adds	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2bff      	cmp	r3, #255	@ 0xff
 8005f88:	dd06      	ble.n	8005f98 <netif_add+0x108>
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006004 <netif_add+0x174>)
 8005f8c:	f240 128d 	movw	r2, #397	@ 0x18d
 8005f90:	4925      	ldr	r1, [pc, #148]	@ (8006028 <netif_add+0x198>)
 8005f92:	481e      	ldr	r0, [pc, #120]	@ (800600c <netif_add+0x17c>)
 8005f94:	f009 f870 	bl	800f078 <iprintf>
        if (netif2->num == netif->num) {
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d108      	bne.n	8005fba <netif_add+0x12a>
          netif->num++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8005fb8:	e005      	b.n	8005fc6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d0      	bne.n	8005f68 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1be      	bne.n	8005f4a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005fd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8005fd4:	d103      	bne.n	8005fde <netif_add+0x14e>
    netif_num = 0;
 8005fd6:	4b11      	ldr	r3, [pc, #68]	@ (800601c <netif_add+0x18c>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e006      	b.n	8005fec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <netif_add+0x18c>)
 8005fea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005fec:	4b0c      	ldr	r3, [pc, #48]	@ (8006020 <netif_add+0x190>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8006020 <netif_add+0x190>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	08010240 	.word	0x08010240
 8006008:	080102d4 	.word	0x080102d4
 800600c:	08010290 	.word	0x08010290
 8006010:	080102f0 	.word	0x080102f0
 8006014:	08012978 	.word	0x08012978
 8006018:	0800643b 	.word	0x0800643b
 800601c:	200082d8 	.word	0x200082d8
 8006020:	200082d0 	.word	0x200082d0
 8006024:	08010314 	.word	0x08010314
 8006028:	08010328 	.word	0x08010328

0800602c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 fb45 	bl	80086c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f006 fc23 	bl	800c88c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <netif_do_set_ipaddr+0x20>
 8006062:	4b1d      	ldr	r3, [pc, #116]	@ (80060d8 <netif_do_set_ipaddr+0x88>)
 8006064:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006068:	491c      	ldr	r1, [pc, #112]	@ (80060dc <netif_do_set_ipaddr+0x8c>)
 800606a:	481d      	ldr	r0, [pc, #116]	@ (80060e0 <netif_do_set_ipaddr+0x90>)
 800606c:	f009 f804 	bl	800f078 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <netif_do_set_ipaddr+0x34>
 8006076:	4b18      	ldr	r3, [pc, #96]	@ (80060d8 <netif_do_set_ipaddr+0x88>)
 8006078:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800607c:	4917      	ldr	r1, [pc, #92]	@ (80060dc <netif_do_set_ipaddr+0x8c>)
 800607e:	4818      	ldr	r0, [pc, #96]	@ (80060e0 <netif_do_set_ipaddr+0x90>)
 8006080:	f008 fffa 	bl	800f078 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3304      	adds	r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d01c      	beq.n	80060cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3304      	adds	r3, #4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80060a2:	f107 0314 	add.w	r3, r7, #20
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ffbf 	bl	800602c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <netif_do_set_ipaddr+0x6a>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	e000      	b.n	80060bc <netif_do_set_ipaddr+0x6c>
 80060ba:	2300      	movs	r3, #0
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80060c0:	2101      	movs	r1, #1
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f8d2 	bl	800626c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	08010240 	.word	0x08010240
 80060dc:	08010358 	.word	0x08010358
 80060e0:	08010290 	.word	0x08010290

080060e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3308      	adds	r3, #8
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d00a      	beq.n	8006114 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <netif_do_set_netmask+0x26>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	e000      	b.n	800610c <netif_do_set_netmask+0x28>
 800610a:	2300      	movs	r3, #0
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	330c      	adds	r3, #12
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d00a      	beq.n	8006152 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <netif_do_set_gw+0x26>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	e000      	b.n	800614a <netif_do_set_gw+0x28>
 8006148:	2300      	movs	r3, #0
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800617c:	4b1c      	ldr	r3, [pc, #112]	@ (80061f0 <netif_set_addr+0x90>)
 800617e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006186:	4b1a      	ldr	r3, [pc, #104]	@ (80061f0 <netif_set_addr+0x90>)
 8006188:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006190:	4b17      	ldr	r3, [pc, #92]	@ (80061f0 <netif_set_addr+0x90>)
 8006192:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <netif_set_addr+0x42>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <netif_set_addr+0x46>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <netif_set_addr+0x48>
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80061b0:	f107 0310 	add.w	r3, r7, #16
 80061b4:	461a      	mov	r2, r3
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ff49 	bl	8006050 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff ff8e 	bl	80060e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff ffa8 	bl	8006122 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	461a      	mov	r2, r3
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ff35 	bl	8006050 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80061e6:	bf00      	nop
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	08012978 	.word	0x08012978

080061f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80061fc:	4a04      	ldr	r2, [pc, #16]	@ (8006210 <netif_set_default+0x1c>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	200082d4 	.word	0x200082d4

08006214 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <netif_set_up+0x1e>
 8006222:	4b0f      	ldr	r3, [pc, #60]	@ (8006260 <netif_set_up+0x4c>)
 8006224:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006228:	490e      	ldr	r1, [pc, #56]	@ (8006264 <netif_set_up+0x50>)
 800622a:	480f      	ldr	r0, [pc, #60]	@ (8006268 <netif_set_up+0x54>)
 800622c:	f008 ff24 	bl	800f078 <iprintf>
 8006230:	e013      	b.n	800625a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10c      	bne.n	800625a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	b2da      	uxtb	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006252:	2103      	movs	r1, #3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f809 	bl	800626c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	08010240 	.word	0x08010240
 8006264:	080103c8 	.word	0x080103c8
 8006268:	08010290 	.word	0x08010290

0800626c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <netif_issue_reports+0x20>
 800627e:	4b18      	ldr	r3, [pc, #96]	@ (80062e0 <netif_issue_reports+0x74>)
 8006280:	f240 326d 	movw	r2, #877	@ 0x36d
 8006284:	4917      	ldr	r1, [pc, #92]	@ (80062e4 <netif_issue_reports+0x78>)
 8006286:	4818      	ldr	r0, [pc, #96]	@ (80062e8 <netif_issue_reports+0x7c>)
 8006288:	f008 fef6 	bl	800f078 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01e      	beq.n	80062d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d017      	beq.n	80062d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d013      	beq.n	80062da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00e      	beq.n	80062da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f007 fa45 	bl	800d760 <etharp_request>
 80062d6:	e000      	b.n	80062da <netif_issue_reports+0x6e>
    return;
 80062d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08010240 	.word	0x08010240
 80062e4:	080103e4 	.word	0x080103e4
 80062e8:	08010290 	.word	0x08010290

080062ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <netif_set_down+0x1e>
 80062fa:	4b12      	ldr	r3, [pc, #72]	@ (8006344 <netif_set_down+0x58>)
 80062fc:	f240 329b 	movw	r2, #923	@ 0x39b
 8006300:	4911      	ldr	r1, [pc, #68]	@ (8006348 <netif_set_down+0x5c>)
 8006302:	4812      	ldr	r0, [pc, #72]	@ (800634c <netif_set_down+0x60>)
 8006304:	f008 feb8 	bl	800f078 <iprintf>
 8006308:	e019      	b.n	800633e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d012      	beq.n	800633e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f006 fdcf 	bl	800cedc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	08010240 	.word	0x08010240
 8006348:	08010408 	.word	0x08010408
 800634c:	08010290 	.word	0x08010290

08006350 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <netif_set_link_up+0x1e>
 800635e:	4b13      	ldr	r3, [pc, #76]	@ (80063ac <netif_set_link_up+0x5c>)
 8006360:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006364:	4912      	ldr	r1, [pc, #72]	@ (80063b0 <netif_set_link_up+0x60>)
 8006366:	4813      	ldr	r0, [pc, #76]	@ (80063b4 <netif_set_link_up+0x64>)
 8006368:	f008 fe86 	bl	800f078 <iprintf>
 800636c:	e01b      	b.n	80063a6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006382:	f043 0304 	orr.w	r3, r3, #4
 8006386:	b2da      	uxtb	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800638e:	2103      	movs	r1, #3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff ff6b 	bl	800626c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <netif_set_link_up+0x56>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	08010240 	.word	0x08010240
 80063b0:	08010428 	.word	0x08010428
 80063b4:	08010290 	.word	0x08010290

080063b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d107      	bne.n	80063d6 <netif_set_link_down+0x1e>
 80063c6:	4b11      	ldr	r3, [pc, #68]	@ (800640c <netif_set_link_down+0x54>)
 80063c8:	f240 4206 	movw	r2, #1030	@ 0x406
 80063cc:	4910      	ldr	r1, [pc, #64]	@ (8006410 <netif_set_link_down+0x58>)
 80063ce:	4811      	ldr	r0, [pc, #68]	@ (8006414 <netif_set_link_down+0x5c>)
 80063d0:	f008 fe52 	bl	800f078 <iprintf>
 80063d4:	e017      	b.n	8006406 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d010      	beq.n	8006406 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063ea:	f023 0304 	bic.w	r3, r3, #4
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <netif_set_link_down+0x4e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	08010240 	.word	0x08010240
 8006410:	0801044c 	.word	0x0801044c
 8006414:	08010290 	.word	0x08010290

08006418 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	61da      	str	r2, [r3, #28]
  }
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006446:	f06f 030b 	mvn.w	r3, #11
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d013      	beq.n	8006490 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006468:	4b0d      	ldr	r3, [pc, #52]	@ (80064a0 <netif_get_by_index+0x48>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e00c      	b.n	800648a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006476:	3301      	adds	r3, #1
 8006478:	b2db      	uxtb	r3, r3
 800647a:	79fa      	ldrb	r2, [r7, #7]
 800647c:	429a      	cmp	r2, r3
 800647e:	d101      	bne.n	8006484 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	e006      	b.n	8006492 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1ef      	bne.n	8006470 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	200082d0 	.word	0x200082d0

080064a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80064aa:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <pbuf_free_ooseq+0x38>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <pbuf_free_ooseq+0x3c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	e00a      	b.n	80064ce <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f002 f93f 	bl	8008744 <tcp_free_ooseq>
      return;
 80064c6:	e005      	b.n	80064d4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f1      	bne.n	80064b8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200082d9 	.word	0x200082d9
 80064e0:	200082e8 	.word	0x200082e8

080064e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80064e4:	b480      	push	{r7}
 80064e6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80064e8:	4b03      	ldr	r3, [pc, #12]	@ (80064f8 <pbuf_pool_is_empty+0x14>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80064ee:	bf00      	nop
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	200082d9 	.word	0x200082d9

080064fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4611      	mov	r1, r2
 8006508:	461a      	mov	r2, r3
 800650a:	460b      	mov	r3, r1
 800650c:	80fb      	strh	r3, [r7, #6]
 800650e:	4613      	mov	r3, r2
 8006510:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88ba      	ldrh	r2, [r7, #4]
 8006528:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800652a:	8b3b      	ldrh	r3, [r7, #24]
 800652c:	b2da      	uxtb	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7f3a      	ldrb	r2, [r7, #28]
 8006536:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	73da      	strb	r2, [r3, #15]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	@ 0x30
 8006554:	af02      	add	r7, sp, #8
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
 800655a:	460b      	mov	r3, r1
 800655c:	80bb      	strh	r3, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006566:	887b      	ldrh	r3, [r7, #2]
 8006568:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800656c:	d07f      	beq.n	800666e <pbuf_alloc+0x11e>
 800656e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006572:	f300 80c8 	bgt.w	8006706 <pbuf_alloc+0x1b6>
 8006576:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800657a:	d010      	beq.n	800659e <pbuf_alloc+0x4e>
 800657c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006580:	f300 80c1 	bgt.w	8006706 <pbuf_alloc+0x1b6>
 8006584:	2b01      	cmp	r3, #1
 8006586:	d002      	beq.n	800658e <pbuf_alloc+0x3e>
 8006588:	2b41      	cmp	r3, #65	@ 0x41
 800658a:	f040 80bc 	bne.w	8006706 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	4619      	mov	r1, r3
 8006594:	2000      	movs	r0, #0
 8006596:	f000 f8d1 	bl	800673c <pbuf_alloc_reference>
 800659a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800659c:	e0bd      	b.n	800671a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80065a6:	88bb      	ldrh	r3, [r7, #4]
 80065a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80065aa:	2008      	movs	r0, #8
 80065ac:	f7ff fbce 	bl	8005d4c <memp_malloc>
 80065b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80065b8:	f7ff ff94 	bl	80064e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80065c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065c4:	f000 faa8 	bl	8006b18 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e0a7      	b.n	800671c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80065cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065ce:	3303      	adds	r3, #3
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80065dc:	b29b      	uxth	r3, r3
 80065de:	8b7a      	ldrh	r2, [r7, #26]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bf28      	it	cs
 80065e4:	4613      	movcs	r3, r2
 80065e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80065e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065ea:	3310      	adds	r3, #16
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	3303      	adds	r3, #3
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	4618      	mov	r0, r3
 80065f8:	89f9      	ldrh	r1, [r7, #14]
 80065fa:	8b7a      	ldrh	r2, [r7, #26]
 80065fc:	2300      	movs	r3, #0
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	460b      	mov	r3, r1
 8006606:	4601      	mov	r1, r0
 8006608:	6938      	ldr	r0, [r7, #16]
 800660a:	f7ff ff77 	bl	80064fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <pbuf_alloc+0xd8>
 800661a:	4b42      	ldr	r3, [pc, #264]	@ (8006724 <pbuf_alloc+0x1d4>)
 800661c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006620:	4941      	ldr	r1, [pc, #260]	@ (8006728 <pbuf_alloc+0x1d8>)
 8006622:	4842      	ldr	r0, [pc, #264]	@ (800672c <pbuf_alloc+0x1dc>)
 8006624:	f008 fd28 	bl	800f078 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006628:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800662a:	3303      	adds	r3, #3
 800662c:	f023 0303 	bic.w	r3, r3, #3
 8006630:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006634:	d106      	bne.n	8006644 <pbuf_alloc+0xf4>
 8006636:	4b3b      	ldr	r3, [pc, #236]	@ (8006724 <pbuf_alloc+0x1d4>)
 8006638:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800663c:	493c      	ldr	r1, [pc, #240]	@ (8006730 <pbuf_alloc+0x1e0>)
 800663e:	483b      	ldr	r0, [pc, #236]	@ (800672c <pbuf_alloc+0x1dc>)
 8006640:	f008 fd1a 	bl	800f078 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	627b      	str	r3, [r7, #36]	@ 0x24
 800664e:	e002      	b.n	8006656 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800665a:	8b7a      	ldrh	r2, [r7, #26]
 800665c:	89fb      	ldrh	r3, [r7, #14]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006666:	8b7b      	ldrh	r3, [r7, #26]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d19e      	bne.n	80065aa <pbuf_alloc+0x5a>
      break;
 800666c:	e055      	b.n	800671a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800666e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006670:	3303      	adds	r3, #3
 8006672:	b29b      	uxth	r3, r3
 8006674:	f023 0303 	bic.w	r3, r3, #3
 8006678:	b29a      	uxth	r2, r3
 800667a:	88bb      	ldrh	r3, [r7, #4]
 800667c:	3303      	adds	r3, #3
 800667e:	b29b      	uxth	r3, r3
 8006680:	f023 0303 	bic.w	r3, r3, #3
 8006684:	b29b      	uxth	r3, r3
 8006686:	4413      	add	r3, r2
 8006688:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800668a:	8b3b      	ldrh	r3, [r7, #24]
 800668c:	3310      	adds	r3, #16
 800668e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006690:	8b3a      	ldrh	r2, [r7, #24]
 8006692:	88bb      	ldrh	r3, [r7, #4]
 8006694:	3303      	adds	r3, #3
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	429a      	cmp	r2, r3
 800669c:	d306      	bcc.n	80066ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800669e:	8afa      	ldrh	r2, [r7, #22]
 80066a0:	88bb      	ldrh	r3, [r7, #4]
 80066a2:	3303      	adds	r3, #3
 80066a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d201      	bcs.n	80066b0 <pbuf_alloc+0x160>
        return NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	e035      	b.n	800671c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80066b0:	8afb      	ldrh	r3, [r7, #22]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff f9ba 	bl	8005a2c <mem_malloc>
 80066b8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <pbuf_alloc+0x174>
        return NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e02b      	b.n	800671c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80066c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066c6:	3310      	adds	r3, #16
 80066c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ca:	4413      	add	r3, r2
 80066cc:	3303      	adds	r3, #3
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	4618      	mov	r0, r3
 80066d4:	88b9      	ldrh	r1, [r7, #4]
 80066d6:	88ba      	ldrh	r2, [r7, #4]
 80066d8:	2300      	movs	r3, #0
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	887b      	ldrh	r3, [r7, #2]
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	460b      	mov	r3, r1
 80066e2:	4601      	mov	r1, r0
 80066e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066e6:	f7ff ff09 	bl	80064fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80066ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <pbuf_alloc+0x1c8>
 80066f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <pbuf_alloc+0x1d4>)
 80066f8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80066fc:	490d      	ldr	r1, [pc, #52]	@ (8006734 <pbuf_alloc+0x1e4>)
 80066fe:	480b      	ldr	r0, [pc, #44]	@ (800672c <pbuf_alloc+0x1dc>)
 8006700:	f008 fcba 	bl	800f078 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006704:	e008      	b.n	8006718 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <pbuf_alloc+0x1d4>)
 8006708:	f240 1227 	movw	r2, #295	@ 0x127
 800670c:	490a      	ldr	r1, [pc, #40]	@ (8006738 <pbuf_alloc+0x1e8>)
 800670e:	4807      	ldr	r0, [pc, #28]	@ (800672c <pbuf_alloc+0x1dc>)
 8006710:	f008 fcb2 	bl	800f078 <iprintf>
      return NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	e001      	b.n	800671c <pbuf_alloc+0x1cc>
      break;
 8006718:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800671c:	4618      	mov	r0, r3
 800671e:	3728      	adds	r7, #40	@ 0x28
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	08010470 	.word	0x08010470
 8006728:	080104a0 	.word	0x080104a0
 800672c:	080104d0 	.word	0x080104d0
 8006730:	080104f8 	.word	0x080104f8
 8006734:	0801052c 	.word	0x0801052c
 8006738:	08010558 	.word	0x08010558

0800673c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	807b      	strh	r3, [r7, #2]
 8006748:	4613      	mov	r3, r2
 800674a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800674c:	883b      	ldrh	r3, [r7, #0]
 800674e:	2b41      	cmp	r3, #65	@ 0x41
 8006750:	d009      	beq.n	8006766 <pbuf_alloc_reference+0x2a>
 8006752:	883b      	ldrh	r3, [r7, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d006      	beq.n	8006766 <pbuf_alloc_reference+0x2a>
 8006758:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <pbuf_alloc_reference+0x5c>)
 800675a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800675e:	490f      	ldr	r1, [pc, #60]	@ (800679c <pbuf_alloc_reference+0x60>)
 8006760:	480f      	ldr	r0, [pc, #60]	@ (80067a0 <pbuf_alloc_reference+0x64>)
 8006762:	f008 fc89 	bl	800f078 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006766:	2007      	movs	r0, #7
 8006768:	f7ff faf0 	bl	8005d4c <memp_malloc>
 800676c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006774:	2300      	movs	r3, #0
 8006776:	e00b      	b.n	8006790 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006778:	8879      	ldrh	r1, [r7, #2]
 800677a:	887a      	ldrh	r2, [r7, #2]
 800677c:	2300      	movs	r3, #0
 800677e:	9301      	str	r3, [sp, #4]
 8006780:	883b      	ldrh	r3, [r7, #0]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	460b      	mov	r3, r1
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff feb7 	bl	80064fc <pbuf_init_alloced_pbuf>
  return p;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	08010470 	.word	0x08010470
 800679c:	08010574 	.word	0x08010574
 80067a0:	080104d0 	.word	0x080104d0

080067a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	460b      	mov	r3, r1
 80067b2:	81bb      	strh	r3, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80067bc:	8a7b      	ldrh	r3, [r7, #18]
 80067be:	3303      	adds	r3, #3
 80067c0:	f023 0203 	bic.w	r2, r3, #3
 80067c4:	89bb      	ldrh	r3, [r7, #12]
 80067c6:	441a      	add	r2, r3
 80067c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d901      	bls.n	80067d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e018      	b.n	8006804 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80067d8:	8a7b      	ldrh	r3, [r7, #18]
 80067da:	3303      	adds	r3, #3
 80067dc:	f023 0303 	bic.w	r3, r3, #3
 80067e0:	6a3a      	ldr	r2, [r7, #32]
 80067e2:	4413      	add	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e001      	b.n	80067ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	89b9      	ldrh	r1, [r7, #12]
 80067f0:	89ba      	ldrh	r2, [r7, #12]
 80067f2:	2302      	movs	r3, #2
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	897b      	ldrh	r3, [r7, #10]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	460b      	mov	r3, r1
 80067fc:	6979      	ldr	r1, [r7, #20]
 80067fe:	f7ff fe7d 	bl	80064fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006802:	687b      	ldr	r3, [r7, #4]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <pbuf_realloc+0x20>
 800681e:	4b3a      	ldr	r3, [pc, #232]	@ (8006908 <pbuf_realloc+0xfc>)
 8006820:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006824:	4939      	ldr	r1, [pc, #228]	@ (800690c <pbuf_realloc+0x100>)
 8006826:	483a      	ldr	r0, [pc, #232]	@ (8006910 <pbuf_realloc+0x104>)
 8006828:	f008 fc26 	bl	800f078 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	891b      	ldrh	r3, [r3, #8]
 8006830:	887a      	ldrh	r2, [r7, #2]
 8006832:	429a      	cmp	r2, r3
 8006834:	d263      	bcs.n	80068fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	891a      	ldrh	r2, [r3, #8]
 800683a:	887b      	ldrh	r3, [r7, #2]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	817b      	strh	r3, [r7, #10]
  q = p;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006848:	e018      	b.n	800687c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	895b      	ldrh	r3, [r3, #10]
 800684e:	897a      	ldrh	r2, [r7, #10]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	891a      	ldrh	r2, [r3, #8]
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <pbuf_realloc+0x70>
 800686e:	4b26      	ldr	r3, [pc, #152]	@ (8006908 <pbuf_realloc+0xfc>)
 8006870:	f240 12af 	movw	r2, #431	@ 0x1af
 8006874:	4927      	ldr	r1, [pc, #156]	@ (8006914 <pbuf_realloc+0x108>)
 8006876:	4826      	ldr	r0, [pc, #152]	@ (8006910 <pbuf_realloc+0x104>)
 8006878:	f008 fbfe 	bl	800f078 <iprintf>
  while (rem_len > q->len) {
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	895b      	ldrh	r3, [r3, #10]
 8006880:	897a      	ldrh	r2, [r7, #10]
 8006882:	429a      	cmp	r2, r3
 8006884:	d8e1      	bhi.n	800684a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	7b1b      	ldrb	r3, [r3, #12]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	2b00      	cmp	r3, #0
 8006890:	d121      	bne.n	80068d6 <pbuf_realloc+0xca>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	895b      	ldrh	r3, [r3, #10]
 8006896:	897a      	ldrh	r2, [r7, #10]
 8006898:	429a      	cmp	r2, r3
 800689a:	d01c      	beq.n	80068d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	7b5b      	ldrb	r3, [r3, #13]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d116      	bne.n	80068d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	4413      	add	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7fe ffba 	bl	8005834 <mem_trim>
 80068c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <pbuf_realloc+0xca>
 80068c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <pbuf_realloc+0xfc>)
 80068ca:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80068ce:	4912      	ldr	r1, [pc, #72]	@ (8006918 <pbuf_realloc+0x10c>)
 80068d0:	480f      	ldr	r0, [pc, #60]	@ (8006910 <pbuf_realloc+0x104>)
 80068d2:	f008 fbd1 	bl	800f078 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	897a      	ldrh	r2, [r7, #10]
 80068da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	895a      	ldrh	r2, [r3, #10]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 f911 	bl	8006b18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	e000      	b.n	8006900 <pbuf_realloc+0xf4>
    return;
 80068fe:	bf00      	nop

}
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	08010470 	.word	0x08010470
 800690c:	08010588 	.word	0x08010588
 8006910:	080104d0 	.word	0x080104d0
 8006914:	080105a0 	.word	0x080105a0
 8006918:	080105b8 	.word	0x080105b8

0800691c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <pbuf_add_header_impl+0x22>
 8006930:	4b2b      	ldr	r3, [pc, #172]	@ (80069e0 <pbuf_add_header_impl+0xc4>)
 8006932:	f240 12df 	movw	r2, #479	@ 0x1df
 8006936:	492b      	ldr	r1, [pc, #172]	@ (80069e4 <pbuf_add_header_impl+0xc8>)
 8006938:	482b      	ldr	r0, [pc, #172]	@ (80069e8 <pbuf_add_header_impl+0xcc>)
 800693a:	f008 fb9d 	bl	800f078 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <pbuf_add_header_impl+0x30>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800694a:	d301      	bcc.n	8006950 <pbuf_add_header_impl+0x34>
    return 1;
 800694c:	2301      	movs	r3, #1
 800694e:	e043      	b.n	80069d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <pbuf_add_header_impl+0x3e>
    return 0;
 8006956:	2300      	movs	r3, #0
 8006958:	e03e      	b.n	80069d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	891a      	ldrh	r2, [r3, #8]
 8006962:	8a7b      	ldrh	r3, [r7, #18]
 8006964:	4413      	add	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	8a7a      	ldrh	r2, [r7, #18]
 800696a:	429a      	cmp	r2, r3
 800696c:	d901      	bls.n	8006972 <pbuf_add_header_impl+0x56>
    return 1;
 800696e:	2301      	movs	r3, #1
 8006970:	e032      	b.n	80069d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7b1b      	ldrb	r3, [r3, #12]
 8006976:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006978:	8a3b      	ldrh	r3, [r7, #16]
 800697a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	425b      	negs	r3, r3
 800698a:	4413      	add	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3310      	adds	r3, #16
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d20d      	bcs.n	80069b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006998:	2301      	movs	r3, #1
 800699a:	e01d      	b.n	80069d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	425b      	negs	r3, r3
 80069aa:	4413      	add	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e001      	b.n	80069b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e011      	b.n	80069d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	895a      	ldrh	r2, [r3, #10]
 80069be:	8a7b      	ldrh	r3, [r7, #18]
 80069c0:	4413      	add	r3, r2
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	891a      	ldrh	r2, [r3, #8]
 80069cc:	8a7b      	ldrh	r3, [r7, #18]
 80069ce:	4413      	add	r3, r2
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	811a      	strh	r2, [r3, #8]


  return 0;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	08010470 	.word	0x08010470
 80069e4:	080105d4 	.word	0x080105d4
 80069e8:	080104d0 	.word	0x080104d0

080069ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80069f6:	2200      	movs	r2, #0
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ff8e 	bl	800691c <pbuf_add_header_impl>
 8006a00:	4603      	mov	r3, r0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <pbuf_remove_header+0x1e>
 8006a1c:	4b20      	ldr	r3, [pc, #128]	@ (8006aa0 <pbuf_remove_header+0x94>)
 8006a1e:	f240 224b 	movw	r2, #587	@ 0x24b
 8006a22:	4920      	ldr	r1, [pc, #128]	@ (8006aa4 <pbuf_remove_header+0x98>)
 8006a24:	4820      	ldr	r0, [pc, #128]	@ (8006aa8 <pbuf_remove_header+0x9c>)
 8006a26:	f008 fb27 	bl	800f078 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <pbuf_remove_header+0x2c>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a36:	d301      	bcc.n	8006a3c <pbuf_remove_header+0x30>
    return 1;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e02c      	b.n	8006a96 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <pbuf_remove_header+0x3a>
    return 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e027      	b.n	8006a96 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	895b      	ldrh	r3, [r3, #10]
 8006a4e:	89fa      	ldrh	r2, [r7, #14]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d908      	bls.n	8006a66 <pbuf_remove_header+0x5a>
 8006a54:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <pbuf_remove_header+0x94>)
 8006a56:	f240 2255 	movw	r2, #597	@ 0x255
 8006a5a:	4914      	ldr	r1, [pc, #80]	@ (8006aac <pbuf_remove_header+0xa0>)
 8006a5c:	4812      	ldr	r0, [pc, #72]	@ (8006aa8 <pbuf_remove_header+0x9c>)
 8006a5e:	f008 fb0b 	bl	800f078 <iprintf>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e017      	b.n	8006a96 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	441a      	add	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	895a      	ldrh	r2, [r3, #10]
 8006a7c:	89fb      	ldrh	r3, [r7, #14]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	891a      	ldrh	r2, [r3, #8]
 8006a8a:	89fb      	ldrh	r3, [r7, #14]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08010470 	.word	0x08010470
 8006aa4:	080105d4 	.word	0x080105d4
 8006aa8:	080104d0 	.word	0x080104d0
 8006aac:	080105e0 	.word	0x080105e0

08006ab0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	807b      	strh	r3, [r7, #2]
 8006abc:	4613      	mov	r3, r2
 8006abe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006ac0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	da08      	bge.n	8006ada <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006acc:	425b      	negs	r3, r3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff ff9b 	bl	8006a0c <pbuf_remove_header>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	e007      	b.n	8006aea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006ada:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ade:	787a      	ldrb	r2, [r7, #1]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff ff1a 	bl	800691c <pbuf_add_header_impl>
 8006ae8:	4603      	mov	r3, r0
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006afe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b02:	2201      	movs	r2, #1
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff ffd2 	bl	8006ab0 <pbuf_header_impl>
 8006b0c:	4603      	mov	r3, r0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <pbuf_free+0x22>
 8006b2c:	4b38      	ldr	r3, [pc, #224]	@ (8006c10 <pbuf_free+0xf8>)
 8006b2e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006b32:	4938      	ldr	r1, [pc, #224]	@ (8006c14 <pbuf_free+0xfc>)
 8006b34:	4838      	ldr	r0, [pc, #224]	@ (8006c18 <pbuf_free+0x100>)
 8006b36:	f008 fa9f 	bl	800f078 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e063      	b.n	8006c06 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006b42:	e05c      	b.n	8006bfe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7b9b      	ldrb	r3, [r3, #14]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <pbuf_free+0x42>
 8006b4c:	4b30      	ldr	r3, [pc, #192]	@ (8006c10 <pbuf_free+0xf8>)
 8006b4e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006b52:	4932      	ldr	r1, [pc, #200]	@ (8006c1c <pbuf_free+0x104>)
 8006b54:	4830      	ldr	r0, [pc, #192]	@ (8006c18 <pbuf_free+0x100>)
 8006b56:	f008 fa8f 	bl	800f078 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7b9b      	ldrb	r3, [r3, #14]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	739a      	strb	r2, [r3, #14]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	7b9b      	ldrb	r3, [r3, #14]
 8006b6a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006b6c:	7dbb      	ldrb	r3, [r7, #22]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d143      	bne.n	8006bfa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7b1b      	ldrb	r3, [r3, #12]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7b5b      	ldrb	r3, [r3, #13]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d011      	beq.n	8006bb2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <pbuf_free+0x90>
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c10 <pbuf_free+0xf8>)
 8006b9c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8006ba0:	491f      	ldr	r1, [pc, #124]	@ (8006c20 <pbuf_free+0x108>)
 8006ba2:	481d      	ldr	r0, [pc, #116]	@ (8006c18 <pbuf_free+0x100>)
 8006ba4:	f008 fa68 	bl	800f078 <iprintf>
        pc->custom_free_function(p);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3
 8006bb0:	e01d      	b.n	8006bee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d104      	bne.n	8006bc2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	2008      	movs	r0, #8
 8006bbc:	f7ff f936 	bl	8005e2c <memp_free>
 8006bc0:	e015      	b.n	8006bee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d104      	bne.n	8006bd2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	2007      	movs	r0, #7
 8006bcc:	f7ff f92e 	bl	8005e2c <memp_free>
 8006bd0:	e00d      	b.n	8006bee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <pbuf_free+0xc8>
          mem_free(p);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fe fdc1 	bl	8005760 <mem_free>
 8006bde:	e006      	b.n	8006bee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006be0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <pbuf_free+0xf8>)
 8006be2:	f240 320f 	movw	r2, #783	@ 0x30f
 8006be6:	490f      	ldr	r1, [pc, #60]	@ (8006c24 <pbuf_free+0x10c>)
 8006be8:	480b      	ldr	r0, [pc, #44]	@ (8006c18 <pbuf_free+0x100>)
 8006bea:	f008 fa45 	bl	800f078 <iprintf>
        }
      }
      count++;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	607b      	str	r3, [r7, #4]
 8006bf8:	e001      	b.n	8006bfe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d19f      	bne.n	8006b44 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	08010470 	.word	0x08010470
 8006c14:	080105d4 	.word	0x080105d4
 8006c18:	080104d0 	.word	0x080104d0
 8006c1c:	08010600 	.word	0x08010600
 8006c20:	08010618 	.word	0x08010618
 8006c24:	0801063c 	.word	0x0801063c

08006c28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006c30:	2300      	movs	r3, #0
 8006c32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006c34:	e005      	b.n	8006c42 <pbuf_clen+0x1a>
    ++len;
 8006c36:	89fb      	ldrh	r3, [r7, #14]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f6      	bne.n	8006c36 <pbuf_clen+0xe>
  }
  return len;
 8006c48:	89fb      	ldrh	r3, [r7, #14]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	7b9b      	ldrb	r3, [r3, #14]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	7b9b      	ldrb	r3, [r3, #14]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <pbuf_ref+0x30>
 8006c7a:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <pbuf_ref+0x38>)
 8006c7c:	f240 3242 	movw	r2, #834	@ 0x342
 8006c80:	4904      	ldr	r1, [pc, #16]	@ (8006c94 <pbuf_ref+0x3c>)
 8006c82:	4805      	ldr	r0, [pc, #20]	@ (8006c98 <pbuf_ref+0x40>)
 8006c84:	f008 f9f8 	bl	800f078 <iprintf>
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	08010470 	.word	0x08010470
 8006c94:	08010650 	.word	0x08010650
 8006c98:	080104d0 	.word	0x080104d0

08006c9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <pbuf_cat+0x16>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d107      	bne.n	8006cc2 <pbuf_cat+0x26>
 8006cb2:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <pbuf_cat+0x98>)
 8006cb4:	f240 3259 	movw	r2, #857	@ 0x359
 8006cb8:	491f      	ldr	r1, [pc, #124]	@ (8006d38 <pbuf_cat+0x9c>)
 8006cba:	4820      	ldr	r0, [pc, #128]	@ (8006d3c <pbuf_cat+0xa0>)
 8006cbc:	f008 f9dc 	bl	800f078 <iprintf>
 8006cc0:	e034      	b.n	8006d2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e00a      	b.n	8006cde <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	891a      	ldrh	r2, [r3, #8]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	891b      	ldrh	r3, [r3, #8]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	891a      	ldrh	r2, [r3, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	895b      	ldrh	r3, [r3, #10]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d006      	beq.n	8006d00 <pbuf_cat+0x64>
 8006cf2:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <pbuf_cat+0x98>)
 8006cf4:	f240 3262 	movw	r2, #866	@ 0x362
 8006cf8:	4911      	ldr	r1, [pc, #68]	@ (8006d40 <pbuf_cat+0xa4>)
 8006cfa:	4810      	ldr	r0, [pc, #64]	@ (8006d3c <pbuf_cat+0xa0>)
 8006cfc:	f008 f9bc 	bl	800f078 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <pbuf_cat+0x7a>
 8006d08:	4b0a      	ldr	r3, [pc, #40]	@ (8006d34 <pbuf_cat+0x98>)
 8006d0a:	f240 3263 	movw	r2, #867	@ 0x363
 8006d0e:	490d      	ldr	r1, [pc, #52]	@ (8006d44 <pbuf_cat+0xa8>)
 8006d10:	480a      	ldr	r0, [pc, #40]	@ (8006d3c <pbuf_cat+0xa0>)
 8006d12:	f008 f9b1 	bl	800f078 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	891a      	ldrh	r2, [r3, #8]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	891b      	ldrh	r3, [r3, #8]
 8006d1e:	4413      	add	r3, r2
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	08010470 	.word	0x08010470
 8006d38:	08010664 	.word	0x08010664
 8006d3c:	080104d0 	.word	0x080104d0
 8006d40:	0801069c 	.word	0x0801069c
 8006d44:	080106cc 	.word	0x080106cc

08006d48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <pbuf_copy+0x2a>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <pbuf_copy+0x2a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	891a      	ldrh	r2, [r3, #8]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	891b      	ldrh	r3, [r3, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d209      	bcs.n	8006d86 <pbuf_copy+0x3e>
 8006d72:	4b57      	ldr	r3, [pc, #348]	@ (8006ed0 <pbuf_copy+0x188>)
 8006d74:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006d78:	4956      	ldr	r1, [pc, #344]	@ (8006ed4 <pbuf_copy+0x18c>)
 8006d7a:	4857      	ldr	r0, [pc, #348]	@ (8006ed8 <pbuf_copy+0x190>)
 8006d7c:	f008 f97c 	bl	800f078 <iprintf>
 8006d80:	f06f 030f 	mvn.w	r3, #15
 8006d84:	e09f      	b.n	8006ec6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	895b      	ldrh	r3, [r3, #10]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	895b      	ldrh	r3, [r3, #10]
 8006d94:	4619      	mov	r1, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1acb      	subs	r3, r1, r3
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d306      	bcc.n	8006dac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	895b      	ldrh	r3, [r3, #10]
 8006da2:	461a      	mov	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	e005      	b.n	8006db8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	895b      	ldrh	r3, [r3, #10]
 8006db0:	461a      	mov	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	18d0      	adds	r0, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f008 fa2f 	bl	800f22e <memcpy>
    offset_to += len;
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	895b      	ldrh	r3, [r3, #10]
 8006de4:	461a      	mov	r2, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d906      	bls.n	8006dfa <pbuf_copy+0xb2>
 8006dec:	4b38      	ldr	r3, [pc, #224]	@ (8006ed0 <pbuf_copy+0x188>)
 8006dee:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006df2:	493a      	ldr	r1, [pc, #232]	@ (8006edc <pbuf_copy+0x194>)
 8006df4:	4838      	ldr	r0, [pc, #224]	@ (8006ed8 <pbuf_copy+0x190>)
 8006df6:	f008 f93f 	bl	800f078 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	895b      	ldrh	r3, [r3, #10]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d906      	bls.n	8006e14 <pbuf_copy+0xcc>
 8006e06:	4b32      	ldr	r3, [pc, #200]	@ (8006ed0 <pbuf_copy+0x188>)
 8006e08:	f240 32da 	movw	r2, #986	@ 0x3da
 8006e0c:	4934      	ldr	r1, [pc, #208]	@ (8006ee0 <pbuf_copy+0x198>)
 8006e0e:	4832      	ldr	r0, [pc, #200]	@ (8006ed8 <pbuf_copy+0x190>)
 8006e10:	f008 f932 	bl	800f078 <iprintf>
    if (offset_from >= p_from->len) {
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	895b      	ldrh	r3, [r3, #10]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d304      	bcc.n	8006e2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	895b      	ldrh	r3, [r3, #10]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d114      	bne.n	8006e60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10c      	bne.n	8006e60 <pbuf_copy+0x118>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <pbuf_copy+0x118>
 8006e4c:	4b20      	ldr	r3, [pc, #128]	@ (8006ed0 <pbuf_copy+0x188>)
 8006e4e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006e52:	4924      	ldr	r1, [pc, #144]	@ (8006ee4 <pbuf_copy+0x19c>)
 8006e54:	4820      	ldr	r0, [pc, #128]	@ (8006ed8 <pbuf_copy+0x190>)
 8006e56:	f008 f90f 	bl	800f078 <iprintf>
 8006e5a:	f06f 030f 	mvn.w	r3, #15
 8006e5e:	e032      	b.n	8006ec6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d013      	beq.n	8006e8e <pbuf_copy+0x146>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	895a      	ldrh	r2, [r3, #10]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	891b      	ldrh	r3, [r3, #8]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d10d      	bne.n	8006e8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <pbuf_copy+0x146>
 8006e7a:	4b15      	ldr	r3, [pc, #84]	@ (8006ed0 <pbuf_copy+0x188>)
 8006e7c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006e80:	4919      	ldr	r1, [pc, #100]	@ (8006ee8 <pbuf_copy+0x1a0>)
 8006e82:	4815      	ldr	r0, [pc, #84]	@ (8006ed8 <pbuf_copy+0x190>)
 8006e84:	f008 f8f8 	bl	800f078 <iprintf>
 8006e88:	f06f 0305 	mvn.w	r3, #5
 8006e8c:	e01b      	b.n	8006ec6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d013      	beq.n	8006ebc <pbuf_copy+0x174>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	895a      	ldrh	r2, [r3, #10]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	891b      	ldrh	r3, [r3, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d10d      	bne.n	8006ebc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d009      	beq.n	8006ebc <pbuf_copy+0x174>
 8006ea8:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <pbuf_copy+0x188>)
 8006eaa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006eae:	490e      	ldr	r1, [pc, #56]	@ (8006ee8 <pbuf_copy+0x1a0>)
 8006eb0:	4809      	ldr	r0, [pc, #36]	@ (8006ed8 <pbuf_copy+0x190>)
 8006eb2:	f008 f8e1 	bl	800f078 <iprintf>
 8006eb6:	f06f 0305 	mvn.w	r3, #5
 8006eba:	e004      	b.n	8006ec6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f af61 	bne.w	8006d86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	08010470 	.word	0x08010470
 8006ed4:	08010718 	.word	0x08010718
 8006ed8:	080104d0 	.word	0x080104d0
 8006edc:	08010748 	.word	0x08010748
 8006ee0:	08010760 	.word	0x08010760
 8006ee4:	0801077c 	.word	0x0801077c
 8006ee8:	0801078c 	.word	0x0801078c

08006eec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	461a      	mov	r2, r3
 8006efa:	460b      	mov	r3, r1
 8006efc:	80fb      	strh	r3, [r7, #6]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d108      	bne.n	8006f22 <pbuf_copy_partial+0x36>
 8006f10:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc0 <pbuf_copy_partial+0xd4>)
 8006f12:	f240 420a 	movw	r2, #1034	@ 0x40a
 8006f16:	492b      	ldr	r1, [pc, #172]	@ (8006fc4 <pbuf_copy_partial+0xd8>)
 8006f18:	482b      	ldr	r0, [pc, #172]	@ (8006fc8 <pbuf_copy_partial+0xdc>)
 8006f1a:	f008 f8ad 	bl	800f078 <iprintf>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e04a      	b.n	8006fb8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d108      	bne.n	8006f3a <pbuf_copy_partial+0x4e>
 8006f28:	4b25      	ldr	r3, [pc, #148]	@ (8006fc0 <pbuf_copy_partial+0xd4>)
 8006f2a:	f240 420b 	movw	r2, #1035	@ 0x40b
 8006f2e:	4927      	ldr	r1, [pc, #156]	@ (8006fcc <pbuf_copy_partial+0xe0>)
 8006f30:	4825      	ldr	r0, [pc, #148]	@ (8006fc8 <pbuf_copy_partial+0xdc>)
 8006f32:	f008 f8a1 	bl	800f078 <iprintf>
 8006f36:	2300      	movs	r3, #0
 8006f38:	e03e      	b.n	8006fb8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	61fb      	str	r3, [r7, #28]
 8006f3e:	e034      	b.n	8006faa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006f40:	88bb      	ldrh	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <pbuf_copy_partial+0x70>
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	895b      	ldrh	r3, [r3, #10]
 8006f4a:	88ba      	ldrh	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d305      	bcc.n	8006f5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	895b      	ldrh	r3, [r3, #10]
 8006f54:	88ba      	ldrh	r2, [r7, #4]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	80bb      	strh	r3, [r7, #4]
 8006f5a:	e023      	b.n	8006fa4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	895a      	ldrh	r2, [r3, #10]
 8006f60:	88bb      	ldrh	r3, [r7, #4]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006f66:	8b3a      	ldrh	r2, [r7, #24]
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d901      	bls.n	8006f72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	18d0      	adds	r0, r2, r3
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	88bb      	ldrh	r3, [r7, #4]
 8006f7e:	4413      	add	r3, r2
 8006f80:	8b3a      	ldrh	r2, [r7, #24]
 8006f82:	4619      	mov	r1, r3
 8006f84:	f008 f953 	bl	800f22e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006f88:	8afa      	ldrh	r2, [r7, #22]
 8006f8a:	8b3b      	ldrh	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006f90:	8b7a      	ldrh	r2, [r7, #26]
 8006f92:	8b3b      	ldrh	r3, [r7, #24]
 8006f94:	4413      	add	r3, r2
 8006f96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	8b3b      	ldrh	r3, [r7, #24]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <pbuf_copy_partial+0xca>
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1c4      	bne.n	8006f40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006fb6:	8afb      	ldrh	r3, [r7, #22]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	08010470 	.word	0x08010470
 8006fc4:	080107b8 	.word	0x080107b8
 8006fc8:	080104d0 	.word	0x080104d0
 8006fcc:	080107d8 	.word	0x080107d8

08006fd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	603a      	str	r2, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	8919      	ldrh	r1, [r3, #8]
 8006fe4:	88ba      	ldrh	r2, [r7, #4]
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fab1 	bl	8006550 <pbuf_alloc>
 8006fee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <pbuf_clone+0x2a>
    return NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e011      	b.n	800701e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fea3 	bl	8006d48 <pbuf_copy>
 8007002:	4603      	mov	r3, r0
 8007004:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007006:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d006      	beq.n	800701c <pbuf_clone+0x4c>
 800700e:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <pbuf_clone+0x58>)
 8007010:	f240 5224 	movw	r2, #1316	@ 0x524
 8007014:	4905      	ldr	r1, [pc, #20]	@ (800702c <pbuf_clone+0x5c>)
 8007016:	4806      	ldr	r0, [pc, #24]	@ (8007030 <pbuf_clone+0x60>)
 8007018:	f008 f82e 	bl	800f078 <iprintf>
  return q;
 800701c:	68fb      	ldr	r3, [r7, #12]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	08010470 	.word	0x08010470
 800702c:	080108e4 	.word	0x080108e4
 8007030:	080104d0 	.word	0x080104d0

08007034 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007038:	f007 ff1e 	bl	800ee78 <rand>
 800703c:	4603      	mov	r3, r0
 800703e:	b29b      	uxth	r3, r3
 8007040:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007044:	b29b      	uxth	r3, r3
 8007046:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800704a:	b29a      	uxth	r2, r3
 800704c:	4b01      	ldr	r3, [pc, #4]	@ (8007054 <tcp_init+0x20>)
 800704e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007050:	bf00      	nop
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000020 	.word	0x20000020

08007058 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7d1b      	ldrb	r3, [r3, #20]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <tcp_free+0x1c>
 8007068:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <tcp_free+0x2c>)
 800706a:	22d4      	movs	r2, #212	@ 0xd4
 800706c:	4906      	ldr	r1, [pc, #24]	@ (8007088 <tcp_free+0x30>)
 800706e:	4807      	ldr	r0, [pc, #28]	@ (800708c <tcp_free+0x34>)
 8007070:	f008 f802 	bl	800f078 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	2001      	movs	r0, #1
 8007078:	f7fe fed8 	bl	8005e2c <memp_free>
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	08010970 	.word	0x08010970
 8007088:	080109a0 	.word	0x080109a0
 800708c:	080109b4 	.word	0x080109b4

08007090 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7d1b      	ldrb	r3, [r3, #20]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d105      	bne.n	80070ac <tcp_free_listen+0x1c>
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <tcp_free_listen+0x2c>)
 80070a2:	22df      	movs	r2, #223	@ 0xdf
 80070a4:	4906      	ldr	r1, [pc, #24]	@ (80070c0 <tcp_free_listen+0x30>)
 80070a6:	4807      	ldr	r0, [pc, #28]	@ (80070c4 <tcp_free_listen+0x34>)
 80070a8:	f007 ffe6 	bl	800f078 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	2002      	movs	r0, #2
 80070b0:	f7fe febc 	bl	8005e2c <memp_free>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	08010970 	.word	0x08010970
 80070c0:	080109dc 	.word	0x080109dc
 80070c4:	080109b4 	.word	0x080109b4

080070c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80070cc:	f000 fea4 	bl	8007e18 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80070d0:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <tcp_tmr+0x28>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <tcp_tmr+0x28>)
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <tcp_tmr+0x28>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80070e8:	f000 fb54 	bl	8007794 <tcp_slowtmr>
  }
}
 80070ec:	bf00      	nop
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	200082f1 	.word	0x200082f1

080070f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <tcp_remove_listener+0x1c>
 8007104:	4b0d      	ldr	r3, [pc, #52]	@ (800713c <tcp_remove_listener+0x48>)
 8007106:	22ff      	movs	r2, #255	@ 0xff
 8007108:	490d      	ldr	r1, [pc, #52]	@ (8007140 <tcp_remove_listener+0x4c>)
 800710a:	480e      	ldr	r0, [pc, #56]	@ (8007144 <tcp_remove_listener+0x50>)
 800710c:	f007 ffb4 	bl	800f078 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e00a      	b.n	800712c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d102      	bne.n	8007126 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f1      	bne.n	8007116 <tcp_remove_listener+0x22>
    }
  }
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	08010970 	.word	0x08010970
 8007140:	080109f8 	.word	0x080109f8
 8007144:	080109b4 	.word	0x080109b4

08007148 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <tcp_listen_closed+0x1c>
 8007156:	4b14      	ldr	r3, [pc, #80]	@ (80071a8 <tcp_listen_closed+0x60>)
 8007158:	f240 1211 	movw	r2, #273	@ 0x111
 800715c:	4913      	ldr	r1, [pc, #76]	@ (80071ac <tcp_listen_closed+0x64>)
 800715e:	4814      	ldr	r0, [pc, #80]	@ (80071b0 <tcp_listen_closed+0x68>)
 8007160:	f007 ff8a 	bl	800f078 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	7d1b      	ldrb	r3, [r3, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d006      	beq.n	800717a <tcp_listen_closed+0x32>
 800716c:	4b0e      	ldr	r3, [pc, #56]	@ (80071a8 <tcp_listen_closed+0x60>)
 800716e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007172:	4910      	ldr	r1, [pc, #64]	@ (80071b4 <tcp_listen_closed+0x6c>)
 8007174:	480e      	ldr	r0, [pc, #56]	@ (80071b0 <tcp_listen_closed+0x68>)
 8007176:	f007 ff7f 	bl	800f078 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800717a:	2301      	movs	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e00b      	b.n	8007198 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007180:	4a0d      	ldr	r2, [pc, #52]	@ (80071b8 <tcp_listen_closed+0x70>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff ffb1 	bl	80070f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d9f0      	bls.n	8007180 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	08010970 	.word	0x08010970
 80071ac:	08010a20 	.word	0x08010a20
 80071b0:	080109b4 	.word	0x080109b4
 80071b4:	08010a2c 	.word	0x08010a2c
 80071b8:	08012950 	.word	0x08012950

080071bc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80071bc:	b5b0      	push	{r4, r5, r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <tcp_close_shutdown+0x20>
 80071ce:	4b63      	ldr	r3, [pc, #396]	@ (800735c <tcp_close_shutdown+0x1a0>)
 80071d0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80071d4:	4962      	ldr	r1, [pc, #392]	@ (8007360 <tcp_close_shutdown+0x1a4>)
 80071d6:	4863      	ldr	r0, [pc, #396]	@ (8007364 <tcp_close_shutdown+0x1a8>)
 80071d8:	f007 ff4e 	bl	800f078 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d066      	beq.n	80072b0 <tcp_close_shutdown+0xf4>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7d1b      	ldrb	r3, [r3, #20]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d003      	beq.n	80071f2 <tcp_close_shutdown+0x36>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7d1b      	ldrb	r3, [r3, #20]
 80071ee:	2b07      	cmp	r3, #7
 80071f0:	d15e      	bne.n	80072b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <tcp_close_shutdown+0x48>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071fe:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007202:	d055      	beq.n	80072b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8b5b      	ldrh	r3, [r3, #26]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b00      	cmp	r3, #0
 800720e:	d106      	bne.n	800721e <tcp_close_shutdown+0x62>
 8007210:	4b52      	ldr	r3, [pc, #328]	@ (800735c <tcp_close_shutdown+0x1a0>)
 8007212:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007216:	4954      	ldr	r1, [pc, #336]	@ (8007368 <tcp_close_shutdown+0x1ac>)
 8007218:	4852      	ldr	r0, [pc, #328]	@ (8007364 <tcp_close_shutdown+0x1a8>)
 800721a:	f007 ff2d 	bl	800f078 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007226:	687d      	ldr	r5, [r7, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3304      	adds	r3, #4
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	8ad2      	ldrh	r2, [r2, #22]
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	8b09      	ldrh	r1, [r1, #24]
 8007234:	9102      	str	r1, [sp, #8]
 8007236:	9201      	str	r2, [sp, #4]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	462b      	mov	r3, r5
 800723c:	4622      	mov	r2, r4
 800723e:	4601      	mov	r1, r0
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f004 fe8d 	bl	800bf60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 f8c8 	bl	80083dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800724c:	4b47      	ldr	r3, [pc, #284]	@ (800736c <tcp_close_shutdown+0x1b0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d105      	bne.n	8007262 <tcp_close_shutdown+0xa6>
 8007256:	4b45      	ldr	r3, [pc, #276]	@ (800736c <tcp_close_shutdown+0x1b0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	4a43      	ldr	r2, [pc, #268]	@ (800736c <tcp_close_shutdown+0x1b0>)
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	e013      	b.n	800728a <tcp_close_shutdown+0xce>
 8007262:	4b42      	ldr	r3, [pc, #264]	@ (800736c <tcp_close_shutdown+0x1b0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e00c      	b.n	8007284 <tcp_close_shutdown+0xc8>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d104      	bne.n	800727e <tcp_close_shutdown+0xc2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	60da      	str	r2, [r3, #12]
 800727c:	e005      	b.n	800728a <tcp_close_shutdown+0xce>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1ef      	bne.n	800726a <tcp_close_shutdown+0xae>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	60da      	str	r2, [r3, #12]
 8007290:	4b37      	ldr	r3, [pc, #220]	@ (8007370 <tcp_close_shutdown+0x1b4>)
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007296:	4b37      	ldr	r3, [pc, #220]	@ (8007374 <tcp_close_shutdown+0x1b8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	d102      	bne.n	80072a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80072a0:	f003 fd5c 	bl	800ad5c <tcp_trigger_input_pcb_close>
 80072a4:	e002      	b.n	80072ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff fed6 	bl	8007058 <tcp_free>
      }
      return ERR_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e050      	b.n	8007352 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d03b      	beq.n	8007330 <tcp_close_shutdown+0x174>
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	dc44      	bgt.n	8007346 <tcp_close_shutdown+0x18a>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <tcp_close_shutdown+0x10a>
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d02a      	beq.n	800731a <tcp_close_shutdown+0x15e>
 80072c4:	e03f      	b.n	8007346 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8adb      	ldrh	r3, [r3, #22]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d021      	beq.n	8007312 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007378 <tcp_close_shutdown+0x1bc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d105      	bne.n	80072e4 <tcp_close_shutdown+0x128>
 80072d8:	4b27      	ldr	r3, [pc, #156]	@ (8007378 <tcp_close_shutdown+0x1bc>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	4a26      	ldr	r2, [pc, #152]	@ (8007378 <tcp_close_shutdown+0x1bc>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	e013      	b.n	800730c <tcp_close_shutdown+0x150>
 80072e4:	4b24      	ldr	r3, [pc, #144]	@ (8007378 <tcp_close_shutdown+0x1bc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]
 80072ea:	e00c      	b.n	8007306 <tcp_close_shutdown+0x14a>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d104      	bne.n	8007300 <tcp_close_shutdown+0x144>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	e005      	b.n	800730c <tcp_close_shutdown+0x150>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1ef      	bne.n	80072ec <tcp_close_shutdown+0x130>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fea0 	bl	8007058 <tcp_free>
      break;
 8007318:	e01a      	b.n	8007350 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ff14 	bl	8007148 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4816      	ldr	r0, [pc, #88]	@ (800737c <tcp_close_shutdown+0x1c0>)
 8007324:	f001 f8aa 	bl	800847c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff feb1 	bl	8007090 <tcp_free_listen>
      break;
 800732e:	e00f      	b.n	8007350 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	480e      	ldr	r0, [pc, #56]	@ (800736c <tcp_close_shutdown+0x1b0>)
 8007334:	f001 f8a2 	bl	800847c <tcp_pcb_remove>
 8007338:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <tcp_close_shutdown+0x1b4>)
 800733a:	2201      	movs	r2, #1
 800733c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff fe8a 	bl	8007058 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007344:	e004      	b.n	8007350 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f81a 	bl	8007380 <tcp_close_shutdown_fin>
 800734c:	4603      	mov	r3, r0
 800734e:	e000      	b.n	8007352 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bdb0      	pop	{r4, r5, r7, pc}
 800735a:	bf00      	nop
 800735c:	08010970 	.word	0x08010970
 8007360:	08010a44 	.word	0x08010a44
 8007364:	080109b4 	.word	0x080109b4
 8007368:	08010a64 	.word	0x08010a64
 800736c:	200082e8 	.word	0x200082e8
 8007370:	200082f0 	.word	0x200082f0
 8007374:	20008328 	.word	0x20008328
 8007378:	200082e0 	.word	0x200082e0
 800737c:	200082e4 	.word	0x200082e4

08007380 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <tcp_close_shutdown_fin+0x1c>
 800738e:	4b2e      	ldr	r3, [pc, #184]	@ (8007448 <tcp_close_shutdown_fin+0xc8>)
 8007390:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007394:	492d      	ldr	r1, [pc, #180]	@ (800744c <tcp_close_shutdown_fin+0xcc>)
 8007396:	482e      	ldr	r0, [pc, #184]	@ (8007450 <tcp_close_shutdown_fin+0xd0>)
 8007398:	f007 fe6e 	bl	800f078 <iprintf>

  switch (pcb->state) {
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	2b07      	cmp	r3, #7
 80073a2:	d020      	beq.n	80073e6 <tcp_close_shutdown_fin+0x66>
 80073a4:	2b07      	cmp	r3, #7
 80073a6:	dc2b      	bgt.n	8007400 <tcp_close_shutdown_fin+0x80>
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d002      	beq.n	80073b2 <tcp_close_shutdown_fin+0x32>
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d00d      	beq.n	80073cc <tcp_close_shutdown_fin+0x4c>
 80073b0:	e026      	b.n	8007400 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f003 fee2 	bl	800b17c <tcp_send_fin>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11f      	bne.n	8007404 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2205      	movs	r2, #5
 80073c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073ca:	e01b      	b.n	8007404 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f003 fed5 	bl	800b17c <tcp_send_fin>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d114      	bne.n	8007408 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2205      	movs	r2, #5
 80073e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073e4:	e010      	b.n	8007408 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f003 fec8 	bl	800b17c <tcp_send_fin>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2209      	movs	r2, #9
 80073fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073fe:	e005      	b.n	800740c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	e01c      	b.n	800743e <tcp_close_shutdown_fin+0xbe>
      break;
 8007404:	bf00      	nop
 8007406:	e002      	b.n	800740e <tcp_close_shutdown_fin+0x8e>
      break;
 8007408:	bf00      	nop
 800740a:	e000      	b.n	800740e <tcp_close_shutdown_fin+0x8e>
      break;
 800740c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800740e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d103      	bne.n	800741e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f003 ffee 	bl	800b3f8 <tcp_output>
 800741c:	e00d      	b.n	800743a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800741e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007426:	d108      	bne.n	800743a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8b5b      	ldrh	r3, [r3, #26]
 800742c:	f043 0308 	orr.w	r3, r3, #8
 8007430:	b29a      	uxth	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e001      	b.n	800743e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800743a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	08010970 	.word	0x08010970
 800744c:	08010a20 	.word	0x08010a20
 8007450:	080109b4 	.word	0x080109b4

08007454 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d109      	bne.n	8007476 <tcp_close+0x22>
 8007462:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <tcp_close+0x4c>)
 8007464:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007468:	490e      	ldr	r1, [pc, #56]	@ (80074a4 <tcp_close+0x50>)
 800746a:	480f      	ldr	r0, [pc, #60]	@ (80074a8 <tcp_close+0x54>)
 800746c:	f007 fe04 	bl	800f078 <iprintf>
 8007470:	f06f 030f 	mvn.w	r3, #15
 8007474:	e00f      	b.n	8007496 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	7d1b      	ldrb	r3, [r3, #20]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d006      	beq.n	800748c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8b5b      	ldrh	r3, [r3, #26]
 8007482:	f043 0310 	orr.w	r3, r3, #16
 8007486:	b29a      	uxth	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800748c:	2101      	movs	r1, #1
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff fe94 	bl	80071bc <tcp_close_shutdown>
 8007494:	4603      	mov	r3, r0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	08010970 	.word	0x08010970
 80074a4:	08010a80 	.word	0x08010a80
 80074a8:	080109b4 	.word	0x080109b4

080074ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08e      	sub	sp, #56	@ 0x38
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d107      	bne.n	80074cc <tcp_abandon+0x20>
 80074bc:	4b52      	ldr	r3, [pc, #328]	@ (8007608 <tcp_abandon+0x15c>)
 80074be:	f240 223d 	movw	r2, #573	@ 0x23d
 80074c2:	4952      	ldr	r1, [pc, #328]	@ (800760c <tcp_abandon+0x160>)
 80074c4:	4852      	ldr	r0, [pc, #328]	@ (8007610 <tcp_abandon+0x164>)
 80074c6:	f007 fdd7 	bl	800f078 <iprintf>
 80074ca:	e099      	b.n	8007600 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7d1b      	ldrb	r3, [r3, #20]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d106      	bne.n	80074e2 <tcp_abandon+0x36>
 80074d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007608 <tcp_abandon+0x15c>)
 80074d6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80074da:	494e      	ldr	r1, [pc, #312]	@ (8007614 <tcp_abandon+0x168>)
 80074dc:	484c      	ldr	r0, [pc, #304]	@ (8007610 <tcp_abandon+0x164>)
 80074de:	f007 fdcb 	bl	800f078 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7d1b      	ldrb	r3, [r3, #20]
 80074e6:	2b0a      	cmp	r3, #10
 80074e8:	d107      	bne.n	80074fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	484a      	ldr	r0, [pc, #296]	@ (8007618 <tcp_abandon+0x16c>)
 80074ee:	f000 ffc5 	bl	800847c <tcp_pcb_remove>
    tcp_free(pcb);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fdb0 	bl	8007058 <tcp_free>
 80074f8:	e082      	b.n	8007600 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007506:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007514:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7d1b      	ldrb	r3, [r3, #20]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d126      	bne.n	8007572 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8adb      	ldrh	r3, [r3, #22]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02e      	beq.n	800758a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800752c:	4b3b      	ldr	r3, [pc, #236]	@ (800761c <tcp_abandon+0x170>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d105      	bne.n	8007542 <tcp_abandon+0x96>
 8007536:	4b39      	ldr	r3, [pc, #228]	@ (800761c <tcp_abandon+0x170>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4a37      	ldr	r2, [pc, #220]	@ (800761c <tcp_abandon+0x170>)
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	e013      	b.n	800756a <tcp_abandon+0xbe>
 8007542:	4b36      	ldr	r3, [pc, #216]	@ (800761c <tcp_abandon+0x170>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e00c      	b.n	8007564 <tcp_abandon+0xb8>
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	429a      	cmp	r2, r3
 8007552:	d104      	bne.n	800755e <tcp_abandon+0xb2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	e005      	b.n	800756a <tcp_abandon+0xbe>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ef      	bne.n	800754a <tcp_abandon+0x9e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	60da      	str	r2, [r3, #12]
 8007570:	e00b      	b.n	800758a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8adb      	ldrh	r3, [r3, #22]
 800757a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4828      	ldr	r0, [pc, #160]	@ (8007620 <tcp_abandon+0x174>)
 8007580:	f000 ff7c 	bl	800847c <tcp_pcb_remove>
 8007584:	4b27      	ldr	r3, [pc, #156]	@ (8007624 <tcp_abandon+0x178>)
 8007586:	2201      	movs	r2, #1
 8007588:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758e:	2b00      	cmp	r3, #0
 8007590:	d004      	beq.n	800759c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4618      	mov	r0, r3
 8007598:	f000 fd1e 	bl	8007fd8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fd15 	bl	8007fd8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fd0c 	bl	8007fd8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00e      	beq.n	80075e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80075c6:	6879      	ldr	r1, [r7, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3304      	adds	r3, #4
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	8b12      	ldrh	r2, [r2, #24]
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80075d4:	9201      	str	r2, [sp, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	460b      	mov	r3, r1
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f004 fcbe 	bl	800bf60 <tcp_rst>
    }
    last_state = pcb->state;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7d1b      	ldrb	r3, [r3, #20]
 80075e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fd34 	bl	8007058 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <tcp_abandon+0x154>
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f06f 010c 	mvn.w	r1, #12
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	4798      	blx	r3
  }
}
 8007600:	3728      	adds	r7, #40	@ 0x28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	08010970 	.word	0x08010970
 800760c:	08010ab4 	.word	0x08010ab4
 8007610:	080109b4 	.word	0x080109b4
 8007614:	08010ad0 	.word	0x08010ad0
 8007618:	200082ec 	.word	0x200082ec
 800761c:	200082e0 	.word	0x200082e0
 8007620:	200082e8 	.word	0x200082e8
 8007624:	200082f0 	.word	0x200082f0

08007628 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007630:	2101      	movs	r1, #1
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff ff3a 	bl	80074ac <tcp_abandon>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d106      	bne.n	800765c <tcp_update_rcv_ann_wnd+0x1c>
 800764e:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8007650:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007654:	4924      	ldr	r1, [pc, #144]	@ (80076e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8007656:	4825      	ldr	r0, [pc, #148]	@ (80076ec <tcp_update_rcv_ann_wnd+0xac>)
 8007658:	f007 fd0e 	bl	800f078 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007664:	4413      	add	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007670:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007674:	bf28      	it	cs
 8007676:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800767a:	b292      	uxth	r2, r2
 800767c:	4413      	add	r3, r2
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	db08      	blt.n	8007698 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	e020      	b.n	80076da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dd03      	ble.n	80076ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80076ac:	e014      	b.n	80076d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c0:	d306      	bcc.n	80076d0 <tcp_update_rcv_ann_wnd+0x90>
 80076c2:	4b08      	ldr	r3, [pc, #32]	@ (80076e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80076c4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80076c8:	4909      	ldr	r1, [pc, #36]	@ (80076f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80076ca:	4808      	ldr	r0, [pc, #32]	@ (80076ec <tcp_update_rcv_ann_wnd+0xac>)
 80076cc:	f007 fcd4 	bl	800f078 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80076d8:	2300      	movs	r3, #0
  }
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	08010970 	.word	0x08010970
 80076e8:	08010bcc 	.word	0x08010bcc
 80076ec:	080109b4 	.word	0x080109b4
 80076f0:	08010bf0 	.word	0x08010bf0

080076f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	460b      	mov	r3, r1
 80076fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d107      	bne.n	8007716 <tcp_recved+0x22>
 8007706:	4b1f      	ldr	r3, [pc, #124]	@ (8007784 <tcp_recved+0x90>)
 8007708:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800770c:	491e      	ldr	r1, [pc, #120]	@ (8007788 <tcp_recved+0x94>)
 800770e:	481f      	ldr	r0, [pc, #124]	@ (800778c <tcp_recved+0x98>)
 8007710:	f007 fcb2 	bl	800f078 <iprintf>
 8007714:	e032      	b.n	800777c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7d1b      	ldrb	r3, [r3, #20]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d106      	bne.n	800772c <tcp_recved+0x38>
 800771e:	4b19      	ldr	r3, [pc, #100]	@ (8007784 <tcp_recved+0x90>)
 8007720:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007724:	491a      	ldr	r1, [pc, #104]	@ (8007790 <tcp_recved+0x9c>)
 8007726:	4819      	ldr	r0, [pc, #100]	@ (800778c <tcp_recved+0x98>)
 8007728:	f007 fca6 	bl	800f078 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	4413      	add	r3, r2
 8007734:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800773c:	d804      	bhi.n	8007748 <tcp_recved+0x54>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007742:	89fa      	ldrh	r2, [r7, #14]
 8007744:	429a      	cmp	r2, r3
 8007746:	d204      	bcs.n	8007752 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800774e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007750:	e002      	b.n	8007758 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	89fa      	ldrh	r2, [r7, #14]
 8007756:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ff71 	bl	8007640 <tcp_update_rcv_ann_wnd>
 800775e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8007766:	d309      	bcc.n	800777c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8b5b      	ldrh	r3, [r3, #26]
 800776c:	f043 0302 	orr.w	r3, r3, #2
 8007770:	b29a      	uxth	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f003 fe3e 	bl	800b3f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	08010970 	.word	0x08010970
 8007788:	08010c0c 	.word	0x08010c0c
 800778c:	080109b4 	.word	0x080109b4
 8007790:	08010c24 	.word	0x08010c24

08007794 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007794:	b5b0      	push	{r4, r5, r7, lr}
 8007796:	b090      	sub	sp, #64	@ 0x40
 8007798:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80077a0:	4b95      	ldr	r3, [pc, #596]	@ (80079f8 <tcp_slowtmr+0x264>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	4a94      	ldr	r2, [pc, #592]	@ (80079f8 <tcp_slowtmr+0x264>)
 80077a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80077aa:	4b94      	ldr	r3, [pc, #592]	@ (80079fc <tcp_slowtmr+0x268>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	4b92      	ldr	r3, [pc, #584]	@ (80079fc <tcp_slowtmr+0x268>)
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	e000      	b.n	80077ba <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80077b8:	bf00      	nop
  prev = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80077be:	4b90      	ldr	r3, [pc, #576]	@ (8007a00 <tcp_slowtmr+0x26c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80077c4:	e29f      	b.n	8007d06 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	7d1b      	ldrb	r3, [r3, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <tcp_slowtmr+0x48>
 80077ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007a04 <tcp_slowtmr+0x270>)
 80077d0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80077d4:	498c      	ldr	r1, [pc, #560]	@ (8007a08 <tcp_slowtmr+0x274>)
 80077d6:	488d      	ldr	r0, [pc, #564]	@ (8007a0c <tcp_slowtmr+0x278>)
 80077d8:	f007 fc4e 	bl	800f078 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80077dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077de:	7d1b      	ldrb	r3, [r3, #20]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d106      	bne.n	80077f2 <tcp_slowtmr+0x5e>
 80077e4:	4b87      	ldr	r3, [pc, #540]	@ (8007a04 <tcp_slowtmr+0x270>)
 80077e6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80077ea:	4989      	ldr	r1, [pc, #548]	@ (8007a10 <tcp_slowtmr+0x27c>)
 80077ec:	4887      	ldr	r0, [pc, #540]	@ (8007a0c <tcp_slowtmr+0x278>)
 80077ee:	f007 fc43 	bl	800f078 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	7d1b      	ldrb	r3, [r3, #20]
 80077f6:	2b0a      	cmp	r3, #10
 80077f8:	d106      	bne.n	8007808 <tcp_slowtmr+0x74>
 80077fa:	4b82      	ldr	r3, [pc, #520]	@ (8007a04 <tcp_slowtmr+0x270>)
 80077fc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8007800:	4984      	ldr	r1, [pc, #528]	@ (8007a14 <tcp_slowtmr+0x280>)
 8007802:	4882      	ldr	r0, [pc, #520]	@ (8007a0c <tcp_slowtmr+0x278>)
 8007804:	f007 fc38 	bl	800f078 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	7f9a      	ldrb	r2, [r3, #30]
 800780c:	4b7b      	ldr	r3, [pc, #492]	@ (80079fc <tcp_slowtmr+0x268>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d105      	bne.n	8007820 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007816:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800781e:	e272      	b.n	8007d06 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8007820:	4b76      	ldr	r3, [pc, #472]	@ (80079fc <tcp_slowtmr+0x268>)
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007826:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d10a      	bne.n	8007852 <tcp_slowtmr+0xbe>
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007842:	2b05      	cmp	r3, #5
 8007844:	d905      	bls.n	8007852 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800784a:	3301      	adds	r3, #1
 800784c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007850:	e11e      	b.n	8007a90 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007854:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007858:	2b0b      	cmp	r3, #11
 800785a:	d905      	bls.n	8007868 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800785c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007860:	3301      	adds	r3, #1
 8007862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007866:	e113      	b.n	8007a90 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800786e:	2b00      	cmp	r3, #0
 8007870:	d075      	beq.n	800795e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007876:	2b00      	cmp	r3, #0
 8007878:	d006      	beq.n	8007888 <tcp_slowtmr+0xf4>
 800787a:	4b62      	ldr	r3, [pc, #392]	@ (8007a04 <tcp_slowtmr+0x270>)
 800787c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007880:	4965      	ldr	r1, [pc, #404]	@ (8007a18 <tcp_slowtmr+0x284>)
 8007882:	4862      	ldr	r0, [pc, #392]	@ (8007a0c <tcp_slowtmr+0x278>)
 8007884:	f007 fbf8 	bl	800f078 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d106      	bne.n	800789e <tcp_slowtmr+0x10a>
 8007890:	4b5c      	ldr	r3, [pc, #368]	@ (8007a04 <tcp_slowtmr+0x270>)
 8007892:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007896:	4961      	ldr	r1, [pc, #388]	@ (8007a1c <tcp_slowtmr+0x288>)
 8007898:	485c      	ldr	r0, [pc, #368]	@ (8007a0c <tcp_slowtmr+0x278>)
 800789a:	f007 fbed 	bl	800f078 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800789e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80078a4:	2b0b      	cmp	r3, #11
 80078a6:	d905      	bls.n	80078b4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80078a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078ac:	3301      	adds	r3, #1
 80078ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80078b2:	e0ed      	b.n	8007a90 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80078b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80078ba:	3b01      	subs	r3, #1
 80078bc:	4a58      	ldr	r2, [pc, #352]	@ (8007a20 <tcp_slowtmr+0x28c>)
 80078be:	5cd3      	ldrb	r3, [r2, r3]
 80078c0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80078c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80078c8:	7c7a      	ldrb	r2, [r7, #17]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d907      	bls.n	80078de <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80078d4:	3301      	adds	r3, #1
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80078de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80078e4:	7c7a      	ldrb	r2, [r7, #17]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	f200 80d2 	bhi.w	8007a90 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80078ec:	2301      	movs	r3, #1
 80078ee:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80078f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d108      	bne.n	800790c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80078fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078fc:	f004 fc24 	bl	800c148 <tcp_zero_window_probe>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d014      	beq.n	8007930 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8007906:	2300      	movs	r3, #0
 8007908:	623b      	str	r3, [r7, #32]
 800790a:	e011      	b.n	8007930 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007912:	4619      	mov	r1, r3
 8007914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007916:	f003 fae9 	bl	800aeec <tcp_split_unsent_seg>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d107      	bne.n	8007930 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007922:	f003 fd69 	bl	800b3f8 <tcp_output>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80ac 	beq.w	8007a90 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007946:	2b06      	cmp	r3, #6
 8007948:	f200 80a2 	bhi.w	8007a90 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007952:	3301      	adds	r3, #1
 8007954:	b2da      	uxtb	r2, r3
 8007956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007958:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800795c:	e098      	b.n	8007a90 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800795e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007960:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007964:	2b00      	cmp	r3, #0
 8007966:	db0f      	blt.n	8007988 <tcp_slowtmr+0x1f4>
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800796e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007972:	4293      	cmp	r3, r2
 8007974:	d008      	beq.n	8007988 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007978:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800797c:	b29b      	uxth	r3, r3
 800797e:	3301      	adds	r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	b21a      	sxth	r2, r3
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800798e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007990:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007994:	429a      	cmp	r2, r3
 8007996:	db7b      	blt.n	8007a90 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800799a:	f004 f821 	bl	800b9e0 <tcp_rexmit_rto_prepare>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <tcp_slowtmr+0x220>
 80079a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d171      	bne.n	8007a90 <tcp_slowtmr+0x2fc>
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d06d      	beq.n	8007a90 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80079b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b6:	7d1b      	ldrb	r3, [r3, #20]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d03a      	beq.n	8007a32 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80079bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079c2:	2b0c      	cmp	r3, #12
 80079c4:	bf28      	it	cs
 80079c6:	230c      	movcs	r3, #12
 80079c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80079ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80079d0:	10db      	asrs	r3, r3, #3
 80079d2:	b21b      	sxth	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80079dc:	4413      	add	r3, r2
 80079de:	7efa      	ldrb	r2, [r7, #27]
 80079e0:	4910      	ldr	r1, [pc, #64]	@ (8007a24 <tcp_slowtmr+0x290>)
 80079e2:	5c8a      	ldrb	r2, [r1, r2]
 80079e4:	4093      	lsls	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80079ee:	4293      	cmp	r3, r2
 80079f0:	dc1a      	bgt.n	8007a28 <tcp_slowtmr+0x294>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	b21a      	sxth	r2, r3
 80079f6:	e019      	b.n	8007a2c <tcp_slowtmr+0x298>
 80079f8:	200082dc 	.word	0x200082dc
 80079fc:	200082f2 	.word	0x200082f2
 8007a00:	200082e8 	.word	0x200082e8
 8007a04:	08010970 	.word	0x08010970
 8007a08:	08010cb4 	.word	0x08010cb4
 8007a0c:	080109b4 	.word	0x080109b4
 8007a10:	08010ce0 	.word	0x08010ce0
 8007a14:	08010d0c 	.word	0x08010d0c
 8007a18:	08010d3c 	.word	0x08010d3c
 8007a1c:	08010d70 	.word	0x08010d70
 8007a20:	08012948 	.word	0x08012948
 8007a24:	08012938 	.word	0x08012938
 8007a28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a34:	2200      	movs	r2, #0
 8007a36:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007a44:	4293      	cmp	r3, r2
 8007a46:	bf28      	it	cs
 8007a48:	4613      	movcs	r3, r2
 8007a4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007a4c:	8a7b      	ldrh	r3, [r7, #18]
 8007a4e:	085b      	lsrs	r3, r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d206      	bcs.n	8007a78 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a74:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007a8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a8c:	f004 f818 	bl	800bac0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8007a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a92:	7d1b      	ldrb	r3, [r3, #20]
 8007a94:	2b06      	cmp	r3, #6
 8007a96:	d111      	bne.n	8007abc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9a:	8b5b      	ldrh	r3, [r3, #26]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00b      	beq.n	8007abc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d1c <tcp_slowtmr+0x588>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b28      	cmp	r3, #40	@ 0x28
 8007ab0:	d904      	bls.n	8007abc <tcp_slowtmr+0x328>
          ++pcb_remove;
 8007ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	7a5b      	ldrb	r3, [r3, #9]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d04c      	beq.n	8007b62 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d003      	beq.n	8007ad8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007ad4:	2b07      	cmp	r3, #7
 8007ad6:	d144      	bne.n	8007b62 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ad8:	4b90      	ldr	r3, [pc, #576]	@ (8007d1c <tcp_slowtmr+0x588>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8007aec:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8007af0:	498b      	ldr	r1, [pc, #556]	@ (8007d20 <tcp_slowtmr+0x58c>)
 8007af2:	fba1 1303 	umull	r1, r3, r1, r3
 8007af6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d90a      	bls.n	8007b12 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8007afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b00:	3301      	adds	r3, #1
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007b06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b10:	e027      	b.n	8007b62 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b12:	4b82      	ldr	r3, [pc, #520]	@ (8007d1c <tcp_slowtmr+0x588>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b1e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b24:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007b28:	4618      	mov	r0, r3
 8007b2a:	4b7e      	ldr	r3, [pc, #504]	@ (8007d24 <tcp_slowtmr+0x590>)
 8007b2c:	fb00 f303 	mul.w	r3, r0, r3
 8007b30:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007b32:	497b      	ldr	r1, [pc, #492]	@ (8007d20 <tcp_slowtmr+0x58c>)
 8007b34:	fba1 1303 	umull	r1, r3, r1, r3
 8007b38:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d911      	bls.n	8007b62 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8007b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b40:	f004 fac2 	bl	800c0c8 <tcp_keepalive>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8007b4a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d107      	bne.n	8007b62 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007b58:	3301      	adds	r3, #1
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d011      	beq.n	8007b8e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8007d1c <tcp_slowtmr+0x588>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b76:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	440b      	add	r3, r1
 8007b82:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d302      	bcc.n	8007b8e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8007b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b8a:	f000 fddb 	bl	8008744 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	7d1b      	ldrb	r3, [r3, #20]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d10b      	bne.n	8007bae <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b96:	4b61      	ldr	r3, [pc, #388]	@ (8007d1c <tcp_slowtmr+0x588>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b28      	cmp	r3, #40	@ 0x28
 8007ba2:	d904      	bls.n	8007bae <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba8:	3301      	adds	r3, #1
 8007baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8007bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb0:	7d1b      	ldrb	r3, [r3, #20]
 8007bb2:	2b09      	cmp	r3, #9
 8007bb4:	d10b      	bne.n	8007bce <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007bb6:	4b59      	ldr	r3, [pc, #356]	@ (8007d1c <tcp_slowtmr+0x588>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2bf0      	cmp	r3, #240	@ 0xf0
 8007bc2:	d904      	bls.n	8007bce <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8007bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bc8:	3301      	adds	r3, #1
 8007bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8007bce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d060      	beq.n	8007c98 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8007bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bdc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8007bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007be0:	f000 fbfc 	bl	80083dc <tcp_pcb_purge>
      if (prev != NULL) {
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d010      	beq.n	8007c0c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007bea:	4b4f      	ldr	r3, [pc, #316]	@ (8007d28 <tcp_slowtmr+0x594>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d106      	bne.n	8007c02 <tcp_slowtmr+0x46e>
 8007bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8007d2c <tcp_slowtmr+0x598>)
 8007bf6:	f240 526d 	movw	r2, #1389	@ 0x56d
 8007bfa:	494d      	ldr	r1, [pc, #308]	@ (8007d30 <tcp_slowtmr+0x59c>)
 8007bfc:	484d      	ldr	r0, [pc, #308]	@ (8007d34 <tcp_slowtmr+0x5a0>)
 8007bfe:	f007 fa3b 	bl	800f078 <iprintf>
        prev->next = pcb->next;
 8007c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	e00f      	b.n	8007c2c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007c0c:	4b46      	ldr	r3, [pc, #280]	@ (8007d28 <tcp_slowtmr+0x594>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d006      	beq.n	8007c24 <tcp_slowtmr+0x490>
 8007c16:	4b45      	ldr	r3, [pc, #276]	@ (8007d2c <tcp_slowtmr+0x598>)
 8007c18:	f240 5271 	movw	r2, #1393	@ 0x571
 8007c1c:	4946      	ldr	r1, [pc, #280]	@ (8007d38 <tcp_slowtmr+0x5a4>)
 8007c1e:	4845      	ldr	r0, [pc, #276]	@ (8007d34 <tcp_slowtmr+0x5a0>)
 8007c20:	f007 fa2a 	bl	800f078 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	4a3f      	ldr	r2, [pc, #252]	@ (8007d28 <tcp_slowtmr+0x594>)
 8007c2a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8007c2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d013      	beq.n	8007c5c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007c3c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8007c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c40:	3304      	adds	r3, #4
 8007c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c44:	8ad2      	ldrh	r2, [r2, #22]
 8007c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c48:	8b09      	ldrh	r1, [r1, #24]
 8007c4a:	9102      	str	r1, [sp, #8]
 8007c4c:	9201      	str	r2, [sp, #4]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	462b      	mov	r3, r5
 8007c52:	4622      	mov	r2, r4
 8007c54:	4601      	mov	r1, r0
 8007c56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c58:	f004 f982 	bl	800bf60 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c64:	7d1b      	ldrb	r3, [r3, #20]
 8007c66:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007c72:	6838      	ldr	r0, [r7, #0]
 8007c74:	f7ff f9f0 	bl	8007058 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007c78:	4b30      	ldr	r3, [pc, #192]	@ (8007d3c <tcp_slowtmr+0x5a8>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d004      	beq.n	8007c8e <tcp_slowtmr+0x4fa>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f06f 010c 	mvn.w	r1, #12
 8007c8a:	68b8      	ldr	r0, [r7, #8]
 8007c8c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d3c <tcp_slowtmr+0x5a8>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d037      	beq.n	8007d06 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8007c96:	e590      	b.n	80077ba <tcp_slowtmr+0x26>
      prev = pcb;
 8007c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	7f1b      	ldrb	r3, [r3, #28]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	7f1a      	ldrb	r2, [r3, #28]
 8007cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb4:	7f5b      	ldrb	r3, [r3, #29]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d325      	bcc.n	8007d06 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8007cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007d3c <tcp_slowtmr+0x5a8>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <tcp_slowtmr+0x554>
 8007cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd8:	6912      	ldr	r2, [r2, #16]
 8007cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007ce6:	e002      	b.n	8007cee <tcp_slowtmr+0x55a>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8007cee:	4b13      	ldr	r3, [pc, #76]	@ (8007d3c <tcp_slowtmr+0x5a8>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f47f ad60 	bne.w	80077b8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007cf8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8007d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d02:	f003 fb79 	bl	800b3f8 <tcp_output>
  while (pcb != NULL) {
 8007d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f47f ad5c 	bne.w	80077c6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007d12:	4b0b      	ldr	r3, [pc, #44]	@ (8007d40 <tcp_slowtmr+0x5ac>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007d18:	e067      	b.n	8007dea <tcp_slowtmr+0x656>
 8007d1a:	bf00      	nop
 8007d1c:	200082dc 	.word	0x200082dc
 8007d20:	10624dd3 	.word	0x10624dd3
 8007d24:	000124f8 	.word	0x000124f8
 8007d28:	200082e8 	.word	0x200082e8
 8007d2c:	08010970 	.word	0x08010970
 8007d30:	08010da8 	.word	0x08010da8
 8007d34:	080109b4 	.word	0x080109b4
 8007d38:	08010dd4 	.word	0x08010dd4
 8007d3c:	200082f0 	.word	0x200082f0
 8007d40:	200082ec 	.word	0x200082ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d46:	7d1b      	ldrb	r3, [r3, #20]
 8007d48:	2b0a      	cmp	r3, #10
 8007d4a:	d006      	beq.n	8007d5a <tcp_slowtmr+0x5c6>
 8007d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007dfc <tcp_slowtmr+0x668>)
 8007d4e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007d52:	492b      	ldr	r1, [pc, #172]	@ (8007e00 <tcp_slowtmr+0x66c>)
 8007d54:	482b      	ldr	r0, [pc, #172]	@ (8007e04 <tcp_slowtmr+0x670>)
 8007d56:	f007 f98f 	bl	800f078 <iprintf>
    pcb_remove = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007d60:	4b29      	ldr	r3, [pc, #164]	@ (8007e08 <tcp_slowtmr+0x674>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2bf0      	cmp	r3, #240	@ 0xf0
 8007d6c:	d904      	bls.n	8007d78 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8007d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d72:	3301      	adds	r3, #1
 8007d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d02f      	beq.n	8007de0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007d80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d82:	f000 fb2b 	bl	80083dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8007e0c <tcp_slowtmr+0x678>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d106      	bne.n	8007da4 <tcp_slowtmr+0x610>
 8007d96:	4b19      	ldr	r3, [pc, #100]	@ (8007dfc <tcp_slowtmr+0x668>)
 8007d98:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007d9c:	491c      	ldr	r1, [pc, #112]	@ (8007e10 <tcp_slowtmr+0x67c>)
 8007d9e:	4819      	ldr	r0, [pc, #100]	@ (8007e04 <tcp_slowtmr+0x670>)
 8007da0:	f007 f96a 	bl	800f078 <iprintf>
        prev->next = pcb->next;
 8007da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007daa:	60da      	str	r2, [r3, #12]
 8007dac:	e00f      	b.n	8007dce <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007dae:	4b17      	ldr	r3, [pc, #92]	@ (8007e0c <tcp_slowtmr+0x678>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d006      	beq.n	8007dc6 <tcp_slowtmr+0x632>
 8007db8:	4b10      	ldr	r3, [pc, #64]	@ (8007dfc <tcp_slowtmr+0x668>)
 8007dba:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007dbe:	4915      	ldr	r1, [pc, #84]	@ (8007e14 <tcp_slowtmr+0x680>)
 8007dc0:	4810      	ldr	r0, [pc, #64]	@ (8007e04 <tcp_slowtmr+0x670>)
 8007dc2:	f007 f959 	bl	800f078 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	4a10      	ldr	r2, [pc, #64]	@ (8007e0c <tcp_slowtmr+0x678>)
 8007dcc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007dd8:	69f8      	ldr	r0, [r7, #28]
 8007dda:	f7ff f93d 	bl	8007058 <tcp_free>
 8007dde:	e004      	b.n	8007dea <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1a9      	bne.n	8007d44 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	3730      	adds	r7, #48	@ 0x30
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	08010970 	.word	0x08010970
 8007e00:	08010e00 	.word	0x08010e00
 8007e04:	080109b4 	.word	0x080109b4
 8007e08:	200082dc 	.word	0x200082dc
 8007e0c:	200082ec 	.word	0x200082ec
 8007e10:	08010e30 	.word	0x08010e30
 8007e14:	08010e58 	.word	0x08010e58

08007e18 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ed4 <tcp_fasttmr+0xbc>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	3301      	adds	r3, #1
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed4 <tcp_fasttmr+0xbc>)
 8007e28:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007e2a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed8 <tcp_fasttmr+0xc0>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007e30:	e048      	b.n	8007ec4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7f9a      	ldrb	r2, [r3, #30]
 8007e36:	4b27      	ldr	r3, [pc, #156]	@ (8007ed4 <tcp_fasttmr+0xbc>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d03f      	beq.n	8007ebe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007e3e:	4b25      	ldr	r3, [pc, #148]	@ (8007ed4 <tcp_fasttmr+0xbc>)
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	8b5b      	ldrh	r3, [r3, #26]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	8b5b      	ldrh	r3, [r3, #26]
 8007e56:	f043 0302 	orr.w	r3, r3, #2
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f003 fac9 	bl	800b3f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	8b5b      	ldrh	r3, [r3, #26]
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8b5b      	ldrh	r3, [r3, #26]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8b5b      	ldrh	r3, [r3, #26]
 8007e84:	f023 0308 	bic.w	r3, r3, #8
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff fa76 	bl	8007380 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8007edc <tcp_fasttmr+0xc4>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f819 	bl	8007ee0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007eae:	4b0b      	ldr	r3, [pc, #44]	@ (8007edc <tcp_fasttmr+0xc4>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d000      	beq.n	8007eb8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007eb6:	e7b8      	b.n	8007e2a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	607b      	str	r3, [r7, #4]
 8007ebc:	e002      	b.n	8007ec4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1b3      	bne.n	8007e32 <tcp_fasttmr+0x1a>
    }
  }
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	200082f2 	.word	0x200082f2
 8007ed8:	200082e8 	.word	0x200082e8
 8007edc:	200082f0 	.word	0x200082f0

08007ee0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <tcp_process_refused_data+0x22>
 8007eee:	4b37      	ldr	r3, [pc, #220]	@ (8007fcc <tcp_process_refused_data+0xec>)
 8007ef0:	f240 6209 	movw	r2, #1545	@ 0x609
 8007ef4:	4936      	ldr	r1, [pc, #216]	@ (8007fd0 <tcp_process_refused_data+0xf0>)
 8007ef6:	4837      	ldr	r0, [pc, #220]	@ (8007fd4 <tcp_process_refused_data+0xf4>)
 8007ef8:	f007 f8be 	bl	800f078 <iprintf>
 8007efc:	f06f 030f 	mvn.w	r3, #15
 8007f00:	e060      	b.n	8007fc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f06:	7b5b      	ldrb	r3, [r3, #13]
 8007f08:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f0e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <tcp_process_refused_data+0x58>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6918      	ldr	r0, [r3, #16]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	47a0      	blx	r4
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]
 8007f36:	e007      	b.n	8007f48 <tcp_process_refused_data+0x68>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f000 f8a4 	bl	800808c <tcp_recv_null>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d12a      	bne.n	8007fa6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d033      	beq.n	8007fc2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007f62:	d005      	beq.n	8007f70 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f68:	3301      	adds	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <tcp_process_refused_data+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6918      	ldr	r0, [r3, #16]
 8007f84:	2300      	movs	r3, #0
 8007f86:	2200      	movs	r2, #0
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	47a0      	blx	r4
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	e001      	b.n	8007f96 <tcp_process_refused_data+0xb6>
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f9a:	f113 0f0d 	cmn.w	r3, #13
 8007f9e:	d110      	bne.n	8007fc2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007fa0:	f06f 030c 	mvn.w	r3, #12
 8007fa4:	e00e      	b.n	8007fc4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007faa:	f113 0f0d 	cmn.w	r3, #13
 8007fae:	d102      	bne.n	8007fb6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007fb0:	f06f 030c 	mvn.w	r3, #12
 8007fb4:	e006      	b.n	8007fc4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007fbc:	f06f 0304 	mvn.w	r3, #4
 8007fc0:	e000      	b.n	8007fc4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd90      	pop	{r4, r7, pc}
 8007fcc:	08010970 	.word	0x08010970
 8007fd0:	08010e80 	.word	0x08010e80
 8007fd4:	080109b4 	.word	0x080109b4

08007fd8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007fe0:	e007      	b.n	8007ff2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f80a 	bl	8008002 <tcp_seg_free>
    seg = next;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f4      	bne.n	8007fe2 <tcp_segs_free+0xa>
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00c      	beq.n	800802a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe fd7b 	bl	8006b18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	2003      	movs	r0, #3
 8008026:	f7fd ff01 	bl	8005e2c <memp_free>
  }
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <tcp_seg_copy+0x1c>
 8008042:	4b0f      	ldr	r3, [pc, #60]	@ (8008080 <tcp_seg_copy+0x4c>)
 8008044:	f240 6282 	movw	r2, #1666	@ 0x682
 8008048:	490e      	ldr	r1, [pc, #56]	@ (8008084 <tcp_seg_copy+0x50>)
 800804a:	480f      	ldr	r0, [pc, #60]	@ (8008088 <tcp_seg_copy+0x54>)
 800804c:	f007 f814 	bl	800f078 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008050:	2003      	movs	r0, #3
 8008052:	f7fd fe7b 	bl	8005d4c <memp_malloc>
 8008056:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <tcp_seg_copy+0x2e>
    return NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	e00a      	b.n	8008078 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008062:	2210      	movs	r2, #16
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f007 f8e1 	bl	800f22e <memcpy>
  pbuf_ref(cseg->p);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fdf1 	bl	8006c58 <pbuf_ref>
  return cseg;
 8008076:	68fb      	ldr	r3, [r7, #12]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	08010970 	.word	0x08010970
 8008084:	08010ec4 	.word	0x08010ec4
 8008088:	080109b4 	.word	0x080109b4

0800808c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <tcp_recv_null+0x28>
 80080a0:	4b12      	ldr	r3, [pc, #72]	@ (80080ec <tcp_recv_null+0x60>)
 80080a2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80080a6:	4912      	ldr	r1, [pc, #72]	@ (80080f0 <tcp_recv_null+0x64>)
 80080a8:	4812      	ldr	r0, [pc, #72]	@ (80080f4 <tcp_recv_null+0x68>)
 80080aa:	f006 ffe5 	bl	800f078 <iprintf>
 80080ae:	f06f 030f 	mvn.w	r3, #15
 80080b2:	e016      	b.n	80080e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	891b      	ldrh	r3, [r3, #8]
 80080be:	4619      	mov	r1, r3
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	f7ff fb17 	bl	80076f4 <tcp_recved>
    pbuf_free(p);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fe fd26 	bl	8006b18 <pbuf_free>
 80080cc:	e008      	b.n	80080e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80080ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d104      	bne.n	80080e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80080d6:	68b8      	ldr	r0, [r7, #8]
 80080d8:	f7ff f9bc 	bl	8007454 <tcp_close>
 80080dc:	4603      	mov	r3, r0
 80080de:	e000      	b.n	80080e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	08010970 	.word	0x08010970
 80080f0:	08010ee0 	.word	0x08010ee0
 80080f4:	080109b4 	.word	0x080109b4

080080f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008106:	2b00      	cmp	r3, #0
 8008108:	db01      	blt.n	800810e <tcp_kill_prio+0x16>
 800810a:	79fb      	ldrb	r3, [r7, #7]
 800810c:	e000      	b.n	8008110 <tcp_kill_prio+0x18>
 800810e:	237f      	movs	r3, #127	@ 0x7f
 8008110:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008112:	7afb      	ldrb	r3, [r7, #11]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d034      	beq.n	8008182 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3b01      	subs	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008122:	2300      	movs	r3, #0
 8008124:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008126:	4b19      	ldr	r3, [pc, #100]	@ (800818c <tcp_kill_prio+0x94>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e01f      	b.n	800816e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	7d5b      	ldrb	r3, [r3, #21]
 8008132:	7afa      	ldrb	r2, [r7, #11]
 8008134:	429a      	cmp	r2, r3
 8008136:	d80c      	bhi.n	8008152 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800813c:	7afa      	ldrb	r2, [r7, #11]
 800813e:	429a      	cmp	r2, r3
 8008140:	d112      	bne.n	8008168 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008142:	4b13      	ldr	r3, [pc, #76]	@ (8008190 <tcp_kill_prio+0x98>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	429a      	cmp	r2, r3
 8008150:	d80a      	bhi.n	8008168 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008152:	4b0f      	ldr	r3, [pc, #60]	@ (8008190 <tcp_kill_prio+0x98>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	7d5b      	ldrb	r3, [r3, #21]
 8008166:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1dc      	bne.n	800812e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800817a:	6938      	ldr	r0, [r7, #16]
 800817c:	f7ff fa54 	bl	8007628 <tcp_abort>
 8008180:	e000      	b.n	8008184 <tcp_kill_prio+0x8c>
    return;
 8008182:	bf00      	nop
  }
}
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	200082e8 	.word	0x200082e8
 8008190:	200082dc 	.word	0x200082dc

08008194 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d009      	beq.n	80081b8 <tcp_kill_state+0x24>
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b09      	cmp	r3, #9
 80081a8:	d006      	beq.n	80081b8 <tcp_kill_state+0x24>
 80081aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008214 <tcp_kill_state+0x80>)
 80081ac:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80081b0:	4919      	ldr	r1, [pc, #100]	@ (8008218 <tcp_kill_state+0x84>)
 80081b2:	481a      	ldr	r0, [pc, #104]	@ (800821c <tcp_kill_state+0x88>)
 80081b4:	f006 ff60 	bl	800f078 <iprintf>

  inactivity = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081c0:	4b17      	ldr	r3, [pc, #92]	@ (8008220 <tcp_kill_state+0x8c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	e017      	b.n	80081f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	7d1b      	ldrb	r3, [r3, #20]
 80081cc:	79fa      	ldrb	r2, [r7, #7]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d10f      	bne.n	80081f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80081d2:	4b14      	ldr	r3, [pc, #80]	@ (8008224 <tcp_kill_state+0x90>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d807      	bhi.n	80081f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80081e2:	4b10      	ldr	r3, [pc, #64]	@ (8008224 <tcp_kill_state+0x90>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e4      	bne.n	80081c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008204:	2100      	movs	r1, #0
 8008206:	6938      	ldr	r0, [r7, #16]
 8008208:	f7ff f950 	bl	80074ac <tcp_abandon>
  }
}
 800820c:	bf00      	nop
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08010970 	.word	0x08010970
 8008218:	08010efc 	.word	0x08010efc
 800821c:	080109b4 	.word	0x080109b4
 8008220:	200082e8 	.word	0x200082e8
 8008224:	200082dc 	.word	0x200082dc

08008228 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008236:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <tcp_kill_timewait+0x58>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e012      	b.n	8008264 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800823e:	4b11      	ldr	r3, [pc, #68]	@ (8008284 <tcp_kill_timewait+0x5c>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d807      	bhi.n	800825e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800824e:	4b0d      	ldr	r3, [pc, #52]	@ (8008284 <tcp_kill_timewait+0x5c>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e9      	bne.n	800823e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008270:	68b8      	ldr	r0, [r7, #8]
 8008272:	f7ff f9d9 	bl	8007628 <tcp_abort>
  }
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	200082ec 	.word	0x200082ec
 8008284:	200082dc 	.word	0x200082dc

08008288 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800828e:	4b10      	ldr	r3, [pc, #64]	@ (80082d0 <tcp_handle_closepend+0x48>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008294:	e014      	b.n	80082c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	8b5b      	ldrh	r3, [r3, #26]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d009      	beq.n	80082bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8b5b      	ldrh	r3, [r3, #26]
 80082ac:	f023 0308 	bic.w	r3, r3, #8
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff f862 	bl	8007380 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e7      	bne.n	8008296 <tcp_handle_closepend+0xe>
  }
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	200082e8 	.word	0x200082e8

080082d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082de:	2001      	movs	r0, #1
 80082e0:	f7fd fd34 	bl	8005d4c <memp_malloc>
 80082e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d126      	bne.n	800833a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80082ec:	f7ff ffcc 	bl	8008288 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80082f0:	f7ff ff9a 	bl	8008228 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80082f4:	2001      	movs	r0, #1
 80082f6:	f7fd fd29 	bl	8005d4c <memp_malloc>
 80082fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d11b      	bne.n	800833a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008302:	2009      	movs	r0, #9
 8008304:	f7ff ff46 	bl	8008194 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008308:	2001      	movs	r0, #1
 800830a:	f7fd fd1f 	bl	8005d4c <memp_malloc>
 800830e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d111      	bne.n	800833a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008316:	2008      	movs	r0, #8
 8008318:	f7ff ff3c 	bl	8008194 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800831c:	2001      	movs	r0, #1
 800831e:	f7fd fd15 	bl	8005d4c <memp_malloc>
 8008322:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d107      	bne.n	800833a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fee3 	bl	80080f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008332:	2001      	movs	r0, #1
 8008334:	f7fd fd0a 	bl	8005d4c <memp_malloc>
 8008338:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d03f      	beq.n	80083c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008340:	229c      	movs	r2, #156	@ 0x9c
 8008342:	2100      	movs	r1, #0
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f006 fefc 	bl	800f142 <memset>
    pcb->prio = prio;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	79fa      	ldrb	r2, [r7, #7]
 800834e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008356:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008360:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	22ff      	movs	r2, #255	@ 0xff
 800836e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008376:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2206      	movs	r2, #6
 800837c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2206      	movs	r2, #6
 8008384:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800838c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8008396:	4b0d      	ldr	r3, [pc, #52]	@ (80083cc <tcp_alloc+0xf8>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800839e:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <tcp_alloc+0xfc>)
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80083ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a08      	ldr	r2, [pc, #32]	@ (80083d4 <tcp_alloc+0x100>)
 80083b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4a07      	ldr	r2, [pc, #28]	@ (80083d8 <tcp_alloc+0x104>)
 80083bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	200082dc 	.word	0x200082dc
 80083d0:	200082f2 	.word	0x200082f2
 80083d4:	0800808d 	.word	0x0800808d
 80083d8:	006ddd00 	.word	0x006ddd00

080083dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d107      	bne.n	80083fa <tcp_pcb_purge+0x1e>
 80083ea:	4b21      	ldr	r3, [pc, #132]	@ (8008470 <tcp_pcb_purge+0x94>)
 80083ec:	f640 0251 	movw	r2, #2129	@ 0x851
 80083f0:	4920      	ldr	r1, [pc, #128]	@ (8008474 <tcp_pcb_purge+0x98>)
 80083f2:	4821      	ldr	r0, [pc, #132]	@ (8008478 <tcp_pcb_purge+0x9c>)
 80083f4:	f006 fe40 	bl	800f078 <iprintf>
 80083f8:	e037      	b.n	800846a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d033      	beq.n	800846a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008406:	2b0a      	cmp	r3, #10
 8008408:	d02f      	beq.n	800846a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800840e:	2b01      	cmp	r3, #1
 8008410:	d02b      	beq.n	800846a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008416:	2b00      	cmp	r3, #0
 8008418:	d007      	beq.n	800842a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fb7a 	bl	8006b18 <pbuf_free>
      pcb->refused_data = NULL;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f986 	bl	8008744 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800843e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fdc7 	bl	8007fd8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fdc2 	bl	8007fd8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	66da      	str	r2, [r3, #108]	@ 0x6c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	08010970 	.word	0x08010970
 8008474:	08010fbc 	.word	0x08010fbc
 8008478:	080109b4 	.word	0x080109b4

0800847c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d106      	bne.n	800849a <tcp_pcb_remove+0x1e>
 800848c:	4b3e      	ldr	r3, [pc, #248]	@ (8008588 <tcp_pcb_remove+0x10c>)
 800848e:	f640 0283 	movw	r2, #2179	@ 0x883
 8008492:	493e      	ldr	r1, [pc, #248]	@ (800858c <tcp_pcb_remove+0x110>)
 8008494:	483e      	ldr	r0, [pc, #248]	@ (8008590 <tcp_pcb_remove+0x114>)
 8008496:	f006 fdef 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <tcp_pcb_remove+0x32>
 80084a0:	4b39      	ldr	r3, [pc, #228]	@ (8008588 <tcp_pcb_remove+0x10c>)
 80084a2:	f640 0284 	movw	r2, #2180	@ 0x884
 80084a6:	493b      	ldr	r1, [pc, #236]	@ (8008594 <tcp_pcb_remove+0x118>)
 80084a8:	4839      	ldr	r0, [pc, #228]	@ (8008590 <tcp_pcb_remove+0x114>)
 80084aa:	f006 fde5 	bl	800f078 <iprintf>

  TCP_RMV(pcblist, pcb);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d105      	bne.n	80084c4 <tcp_pcb_remove+0x48>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e013      	b.n	80084ec <tcp_pcb_remove+0x70>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	e00c      	b.n	80084e6 <tcp_pcb_remove+0x6a>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d104      	bne.n	80084e0 <tcp_pcb_remove+0x64>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	e005      	b.n	80084ec <tcp_pcb_remove+0x70>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1ef      	bne.n	80084cc <tcp_pcb_remove+0x50>
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80084f2:	6838      	ldr	r0, [r7, #0]
 80084f4:	f7ff ff72 	bl	80083dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	7d1b      	ldrb	r3, [r3, #20]
 80084fc:	2b0a      	cmp	r3, #10
 80084fe:	d013      	beq.n	8008528 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008504:	2b01      	cmp	r3, #1
 8008506:	d00f      	beq.n	8008528 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	8b5b      	ldrh	r3, [r3, #26]
 800850c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	8b5b      	ldrh	r3, [r3, #26]
 8008518:	f043 0302 	orr.w	r3, r3, #2
 800851c:	b29a      	uxth	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008522:	6838      	ldr	r0, [r7, #0]
 8008524:	f002 ff68 	bl	800b3f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	7d1b      	ldrb	r3, [r3, #20]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d020      	beq.n	8008572 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <tcp_pcb_remove+0xca>
 8008538:	4b13      	ldr	r3, [pc, #76]	@ (8008588 <tcp_pcb_remove+0x10c>)
 800853a:	f640 0293 	movw	r2, #2195	@ 0x893
 800853e:	4916      	ldr	r1, [pc, #88]	@ (8008598 <tcp_pcb_remove+0x11c>)
 8008540:	4813      	ldr	r0, [pc, #76]	@ (8008590 <tcp_pcb_remove+0x114>)
 8008542:	f006 fd99 	bl	800f078 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854a:	2b00      	cmp	r3, #0
 800854c:	d006      	beq.n	800855c <tcp_pcb_remove+0xe0>
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <tcp_pcb_remove+0x10c>)
 8008550:	f640 0294 	movw	r2, #2196	@ 0x894
 8008554:	4911      	ldr	r1, [pc, #68]	@ (800859c <tcp_pcb_remove+0x120>)
 8008556:	480e      	ldr	r0, [pc, #56]	@ (8008590 <tcp_pcb_remove+0x114>)
 8008558:	f006 fd8e 	bl	800f078 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008560:	2b00      	cmp	r3, #0
 8008562:	d006      	beq.n	8008572 <tcp_pcb_remove+0xf6>
 8008564:	4b08      	ldr	r3, [pc, #32]	@ (8008588 <tcp_pcb_remove+0x10c>)
 8008566:	f640 0296 	movw	r2, #2198	@ 0x896
 800856a:	490d      	ldr	r1, [pc, #52]	@ (80085a0 <tcp_pcb_remove+0x124>)
 800856c:	4808      	ldr	r0, [pc, #32]	@ (8008590 <tcp_pcb_remove+0x114>)
 800856e:	f006 fd83 	bl	800f078 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2200      	movs	r2, #0
 8008576:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2200      	movs	r2, #0
 800857c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	08010970 	.word	0x08010970
 800858c:	08010fd8 	.word	0x08010fd8
 8008590:	080109b4 	.word	0x080109b4
 8008594:	08010ff4 	.word	0x08010ff4
 8008598:	08011014 	.word	0x08011014
 800859c:	0801102c 	.word	0x0801102c
 80085a0:	08011048 	.word	0x08011048

080085a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <tcp_next_iss+0x1c>
 80085b2:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <tcp_next_iss+0x38>)
 80085b4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80085b8:	4909      	ldr	r1, [pc, #36]	@ (80085e0 <tcp_next_iss+0x3c>)
 80085ba:	480a      	ldr	r0, [pc, #40]	@ (80085e4 <tcp_next_iss+0x40>)
 80085bc:	f006 fd5c 	bl	800f078 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80085c0:	4b09      	ldr	r3, [pc, #36]	@ (80085e8 <tcp_next_iss+0x44>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b09      	ldr	r3, [pc, #36]	@ (80085ec <tcp_next_iss+0x48>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4413      	add	r3, r2
 80085ca:	4a07      	ldr	r2, [pc, #28]	@ (80085e8 <tcp_next_iss+0x44>)
 80085cc:	6013      	str	r3, [r2, #0]
  return iss;
 80085ce:	4b06      	ldr	r3, [pc, #24]	@ (80085e8 <tcp_next_iss+0x44>)
 80085d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	08010970 	.word	0x08010970
 80085e0:	08011060 	.word	0x08011060
 80085e4:	080109b4 	.word	0x080109b4
 80085e8:	20000024 	.word	0x20000024
 80085ec:	200082dc 	.word	0x200082dc

080085f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <tcp_eff_send_mss_netif+0x22>
 8008604:	4b14      	ldr	r3, [pc, #80]	@ (8008658 <tcp_eff_send_mss_netif+0x68>)
 8008606:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800860a:	4914      	ldr	r1, [pc, #80]	@ (800865c <tcp_eff_send_mss_netif+0x6c>)
 800860c:	4814      	ldr	r0, [pc, #80]	@ (8008660 <tcp_eff_send_mss_netif+0x70>)
 800860e:	f006 fd33 	bl	800f078 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008618:	89fb      	ldrh	r3, [r7, #14]
 800861a:	e019      	b.n	8008650 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008620:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008622:	8afb      	ldrh	r3, [r7, #22]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d012      	beq.n	800864e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008628:	2328      	movs	r3, #40	@ 0x28
 800862a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800862c:	8afa      	ldrh	r2, [r7, #22]
 800862e:	8abb      	ldrh	r3, [r7, #20]
 8008630:	429a      	cmp	r2, r3
 8008632:	d904      	bls.n	800863e <tcp_eff_send_mss_netif+0x4e>
 8008634:	8afa      	ldrh	r2, [r7, #22]
 8008636:	8abb      	ldrh	r3, [r7, #20]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	b29b      	uxth	r3, r3
 800863c:	e000      	b.n	8008640 <tcp_eff_send_mss_netif+0x50>
 800863e:	2300      	movs	r3, #0
 8008640:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008642:	8a7a      	ldrh	r2, [r7, #18]
 8008644:	89fb      	ldrh	r3, [r7, #14]
 8008646:	4293      	cmp	r3, r2
 8008648:	bf28      	it	cs
 800864a:	4613      	movcs	r3, r2
 800864c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800864e:	89fb      	ldrh	r3, [r7, #14]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	08010970 	.word	0x08010970
 800865c:	0801107c 	.word	0x0801107c
 8008660:	080109b4 	.word	0x080109b4

08008664 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d119      	bne.n	80086ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008678:	4b10      	ldr	r3, [pc, #64]	@ (80086bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800867a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800867e:	4910      	ldr	r1, [pc, #64]	@ (80086c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008680:	4810      	ldr	r0, [pc, #64]	@ (80086c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008682:	f006 fcf9 	bl	800f078 <iprintf>

  while (pcb != NULL) {
 8008686:	e011      	b.n	80086ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d108      	bne.n	80086a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f7fe ffc4 	bl	8007628 <tcp_abort>
      pcb = next;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e002      	b.n	80086ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1ea      	bne.n	8008688 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	08010970 	.word	0x08010970
 80086c0:	080110a4 	.word	0x080110a4
 80086c4:	080109b4 	.word	0x080109b4

080086c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d02a      	beq.n	800872e <tcp_netif_ip_addr_changed+0x66>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d026      	beq.n	800872e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80086e0:	4b15      	ldr	r3, [pc, #84]	@ (8008738 <tcp_netif_ip_addr_changed+0x70>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff ffbc 	bl	8008664 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80086ec:	4b13      	ldr	r3, [pc, #76]	@ (800873c <tcp_netif_ip_addr_changed+0x74>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff ffb6 	bl	8008664 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <tcp_netif_ip_addr_changed+0x66>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d013      	beq.n	800872e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008706:	4b0e      	ldr	r3, [pc, #56]	@ (8008740 <tcp_netif_ip_addr_changed+0x78>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	e00c      	b.n	8008728 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d103      	bne.n	8008722 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1ef      	bne.n	800870e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	200082e8 	.word	0x200082e8
 800873c:	200082e0 	.word	0x200082e0
 8008740:	200082e4 	.word	0x200082e4

08008744 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008750:	2b00      	cmp	r3, #0
 8008752:	d007      	beq.n	8008764 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff fc3d 	bl	8007fd8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800876c:	b590      	push	{r4, r7, lr}
 800876e:	b08d      	sub	sp, #52	@ 0x34
 8008770:	af04      	add	r7, sp, #16
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d105      	bne.n	8008788 <tcp_input+0x1c>
 800877c:	4b9b      	ldr	r3, [pc, #620]	@ (80089ec <tcp_input+0x280>)
 800877e:	2283      	movs	r2, #131	@ 0x83
 8008780:	499b      	ldr	r1, [pc, #620]	@ (80089f0 <tcp_input+0x284>)
 8008782:	489c      	ldr	r0, [pc, #624]	@ (80089f4 <tcp_input+0x288>)
 8008784:	f006 fc78 	bl	800f078 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4a9a      	ldr	r2, [pc, #616]	@ (80089f8 <tcp_input+0x28c>)
 800878e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	895b      	ldrh	r3, [r3, #10]
 8008794:	2b13      	cmp	r3, #19
 8008796:	f240 83d1 	bls.w	8008f3c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800879a:	4b98      	ldr	r3, [pc, #608]	@ (80089fc <tcp_input+0x290>)
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	4a97      	ldr	r2, [pc, #604]	@ (80089fc <tcp_input+0x290>)
 80087a0:	6812      	ldr	r2, [r2, #0]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f005 fc11 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 83c7 	bne.w	8008f40 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80087b2:	4b92      	ldr	r3, [pc, #584]	@ (80089fc <tcp_input+0x290>)
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80087ba:	2be0      	cmp	r3, #224	@ 0xe0
 80087bc:	f000 83c0 	beq.w	8008f40 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80087c0:	4b8d      	ldr	r3, [pc, #564]	@ (80089f8 <tcp_input+0x28c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	899b      	ldrh	r3, [r3, #12]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fc fe47 	bl	800545c <lwip_htons>
 80087ce:	4603      	mov	r3, r0
 80087d0:	0b1b      	lsrs	r3, r3, #12
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80087da:	7cbb      	ldrb	r3, [r7, #18]
 80087dc:	2b13      	cmp	r3, #19
 80087de:	f240 83b1 	bls.w	8008f44 <tcp_input+0x7d8>
 80087e2:	7cbb      	ldrb	r3, [r7, #18]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	891b      	ldrh	r3, [r3, #8]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	f200 83aa 	bhi.w	8008f44 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80087f0:	7cbb      	ldrb	r3, [r7, #18]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b14      	subs	r3, #20
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	4b81      	ldr	r3, [pc, #516]	@ (8008a00 <tcp_input+0x294>)
 80087fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80087fc:	4b81      	ldr	r3, [pc, #516]	@ (8008a04 <tcp_input+0x298>)
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	895a      	ldrh	r2, [r3, #10]
 8008806:	7cbb      	ldrb	r3, [r7, #18]
 8008808:	b29b      	uxth	r3, r3
 800880a:	429a      	cmp	r2, r3
 800880c:	d309      	bcc.n	8008822 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800880e:	4b7c      	ldr	r3, [pc, #496]	@ (8008a00 <tcp_input+0x294>)
 8008810:	881a      	ldrh	r2, [r3, #0]
 8008812:	4b7d      	ldr	r3, [pc, #500]	@ (8008a08 <tcp_input+0x29c>)
 8008814:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008816:	7cbb      	ldrb	r3, [r7, #18]
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fe f8f6 	bl	8006a0c <pbuf_remove_header>
 8008820:	e04e      	b.n	80088c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <tcp_input+0xca>
 800882a:	4b70      	ldr	r3, [pc, #448]	@ (80089ec <tcp_input+0x280>)
 800882c:	22c2      	movs	r2, #194	@ 0xc2
 800882e:	4977      	ldr	r1, [pc, #476]	@ (8008a0c <tcp_input+0x2a0>)
 8008830:	4870      	ldr	r0, [pc, #448]	@ (80089f4 <tcp_input+0x288>)
 8008832:	f006 fc21 	bl	800f078 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008836:	2114      	movs	r1, #20
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7fe f8e7 	bl	8006a0c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	895a      	ldrh	r2, [r3, #10]
 8008842:	4b71      	ldr	r3, [pc, #452]	@ (8008a08 <tcp_input+0x29c>)
 8008844:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008846:	4b6e      	ldr	r3, [pc, #440]	@ (8008a00 <tcp_input+0x294>)
 8008848:	881a      	ldrh	r2, [r3, #0]
 800884a:	4b6f      	ldr	r3, [pc, #444]	@ (8008a08 <tcp_input+0x29c>)
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008852:	4b6d      	ldr	r3, [pc, #436]	@ (8008a08 <tcp_input+0x29c>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7fe f8d7 	bl	8006a0c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	895b      	ldrh	r3, [r3, #10]
 8008864:	8a3a      	ldrh	r2, [r7, #16]
 8008866:	429a      	cmp	r2, r3
 8008868:	f200 836e 	bhi.w	8008f48 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	4a64      	ldr	r2, [pc, #400]	@ (8008a04 <tcp_input+0x298>)
 8008874:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	8a3a      	ldrh	r2, [r7, #16]
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe f8c4 	bl	8006a0c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	891a      	ldrh	r2, [r3, #8]
 8008888:	8a3b      	ldrh	r3, [r7, #16]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	895b      	ldrh	r3, [r3, #10]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <tcp_input+0x13a>
 800889a:	4b54      	ldr	r3, [pc, #336]	@ (80089ec <tcp_input+0x280>)
 800889c:	22df      	movs	r2, #223	@ 0xdf
 800889e:	495c      	ldr	r1, [pc, #368]	@ (8008a10 <tcp_input+0x2a4>)
 80088a0:	4854      	ldr	r0, [pc, #336]	@ (80089f4 <tcp_input+0x288>)
 80088a2:	f006 fbe9 	bl	800f078 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	891a      	ldrh	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	891b      	ldrh	r3, [r3, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d005      	beq.n	80088c0 <tcp_input+0x154>
 80088b4:	4b4d      	ldr	r3, [pc, #308]	@ (80089ec <tcp_input+0x280>)
 80088b6:	22e0      	movs	r2, #224	@ 0xe0
 80088b8:	4956      	ldr	r1, [pc, #344]	@ (8008a14 <tcp_input+0x2a8>)
 80088ba:	484e      	ldr	r0, [pc, #312]	@ (80089f4 <tcp_input+0x288>)
 80088bc:	f006 fbdc 	bl	800f078 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80088c0:	4b4d      	ldr	r3, [pc, #308]	@ (80089f8 <tcp_input+0x28c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	4a4b      	ldr	r2, [pc, #300]	@ (80089f8 <tcp_input+0x28c>)
 80088ca:	6814      	ldr	r4, [r2, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fc fdc5 	bl	800545c <lwip_htons>
 80088d2:	4603      	mov	r3, r0
 80088d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80088d6:	4b48      	ldr	r3, [pc, #288]	@ (80089f8 <tcp_input+0x28c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	885b      	ldrh	r3, [r3, #2]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	4a46      	ldr	r2, [pc, #280]	@ (80089f8 <tcp_input+0x28c>)
 80088e0:	6814      	ldr	r4, [r2, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fc fdba 	bl	800545c <lwip_htons>
 80088e8:	4603      	mov	r3, r0
 80088ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80088ec:	4b42      	ldr	r3, [pc, #264]	@ (80089f8 <tcp_input+0x28c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	4a41      	ldr	r2, [pc, #260]	@ (80089f8 <tcp_input+0x28c>)
 80088f4:	6814      	ldr	r4, [r2, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fc fdc5 	bl	8005486 <lwip_htonl>
 80088fc:	4603      	mov	r3, r0
 80088fe:	6063      	str	r3, [r4, #4]
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	4a45      	ldr	r2, [pc, #276]	@ (8008a18 <tcp_input+0x2ac>)
 8008904:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008906:	4b3c      	ldr	r3, [pc, #240]	@ (80089f8 <tcp_input+0x28c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	4a3a      	ldr	r2, [pc, #232]	@ (80089f8 <tcp_input+0x28c>)
 800890e:	6814      	ldr	r4, [r2, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7fc fdb8 	bl	8005486 <lwip_htonl>
 8008916:	4603      	mov	r3, r0
 8008918:	60a3      	str	r3, [r4, #8]
 800891a:	68a3      	ldr	r3, [r4, #8]
 800891c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a1c <tcp_input+0x2b0>)
 800891e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008920:	4b35      	ldr	r3, [pc, #212]	@ (80089f8 <tcp_input+0x28c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	89db      	ldrh	r3, [r3, #14]
 8008926:	b29b      	uxth	r3, r3
 8008928:	4a33      	ldr	r2, [pc, #204]	@ (80089f8 <tcp_input+0x28c>)
 800892a:	6814      	ldr	r4, [r2, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7fc fd95 	bl	800545c <lwip_htons>
 8008932:	4603      	mov	r3, r0
 8008934:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008936:	4b30      	ldr	r3, [pc, #192]	@ (80089f8 <tcp_input+0x28c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	899b      	ldrh	r3, [r3, #12]
 800893c:	b29b      	uxth	r3, r3
 800893e:	4618      	mov	r0, r3
 8008940:	f7fc fd8c 	bl	800545c <lwip_htons>
 8008944:	4603      	mov	r3, r0
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800894c:	b2da      	uxtb	r2, r3
 800894e:	4b34      	ldr	r3, [pc, #208]	@ (8008a20 <tcp_input+0x2b4>)
 8008950:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	891a      	ldrh	r2, [r3, #8]
 8008956:	4b33      	ldr	r3, [pc, #204]	@ (8008a24 <tcp_input+0x2b8>)
 8008958:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800895a:	4b31      	ldr	r3, [pc, #196]	@ (8008a20 <tcp_input+0x2b4>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <tcp_input+0x214>
    tcplen++;
 8008966:	4b2f      	ldr	r3, [pc, #188]	@ (8008a24 <tcp_input+0x2b8>)
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	b29a      	uxth	r2, r3
 800896e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a24 <tcp_input+0x2b8>)
 8008970:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	891a      	ldrh	r2, [r3, #8]
 8008976:	4b2b      	ldr	r3, [pc, #172]	@ (8008a24 <tcp_input+0x2b8>)
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	f200 82e6 	bhi.w	8008f4c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008980:	2300      	movs	r3, #0
 8008982:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008984:	4b28      	ldr	r3, [pc, #160]	@ (8008a28 <tcp_input+0x2bc>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e09d      	b.n	8008ac8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	7d1b      	ldrb	r3, [r3, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <tcp_input+0x234>
 8008994:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <tcp_input+0x280>)
 8008996:	22fb      	movs	r2, #251	@ 0xfb
 8008998:	4924      	ldr	r1, [pc, #144]	@ (8008a2c <tcp_input+0x2c0>)
 800899a:	4816      	ldr	r0, [pc, #88]	@ (80089f4 <tcp_input+0x288>)
 800899c:	f006 fb6c 	bl	800f078 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	7d1b      	ldrb	r3, [r3, #20]
 80089a4:	2b0a      	cmp	r3, #10
 80089a6:	d105      	bne.n	80089b4 <tcp_input+0x248>
 80089a8:	4b10      	ldr	r3, [pc, #64]	@ (80089ec <tcp_input+0x280>)
 80089aa:	22fc      	movs	r2, #252	@ 0xfc
 80089ac:	4920      	ldr	r1, [pc, #128]	@ (8008a30 <tcp_input+0x2c4>)
 80089ae:	4811      	ldr	r0, [pc, #68]	@ (80089f4 <tcp_input+0x288>)
 80089b0:	f006 fb62 	bl	800f078 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	7d1b      	ldrb	r3, [r3, #20]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d105      	bne.n	80089c8 <tcp_input+0x25c>
 80089bc:	4b0b      	ldr	r3, [pc, #44]	@ (80089ec <tcp_input+0x280>)
 80089be:	22fd      	movs	r2, #253	@ 0xfd
 80089c0:	491c      	ldr	r1, [pc, #112]	@ (8008a34 <tcp_input+0x2c8>)
 80089c2:	480c      	ldr	r0, [pc, #48]	@ (80089f4 <tcp_input+0x288>)
 80089c4:	f006 fb58 	bl	800f078 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	7a1b      	ldrb	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d033      	beq.n	8008a38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	7a1a      	ldrb	r2, [r3, #8]
 80089d4:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <tcp_input+0x290>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80089dc:	3301      	adds	r3, #1
 80089de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d029      	beq.n	8008a38 <tcp_input+0x2cc>
      prev = pcb;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	61bb      	str	r3, [r7, #24]
      continue;
 80089e8:	e06b      	b.n	8008ac2 <tcp_input+0x356>
 80089ea:	bf00      	nop
 80089ec:	080110d8 	.word	0x080110d8
 80089f0:	0801110c 	.word	0x0801110c
 80089f4:	08011124 	.word	0x08011124
 80089f8:	20008304 	.word	0x20008304
 80089fc:	20004d6c 	.word	0x20004d6c
 8008a00:	20008308 	.word	0x20008308
 8008a04:	2000830c 	.word	0x2000830c
 8008a08:	2000830a 	.word	0x2000830a
 8008a0c:	0801114c 	.word	0x0801114c
 8008a10:	0801115c 	.word	0x0801115c
 8008a14:	08011168 	.word	0x08011168
 8008a18:	20008314 	.word	0x20008314
 8008a1c:	20008318 	.word	0x20008318
 8008a20:	20008320 	.word	0x20008320
 8008a24:	2000831e 	.word	0x2000831e
 8008a28:	200082e8 	.word	0x200082e8
 8008a2c:	08011188 	.word	0x08011188
 8008a30:	080111b0 	.word	0x080111b0
 8008a34:	080111dc 	.word	0x080111dc
    }

    if (pcb->remote_port == tcphdr->src &&
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	8b1a      	ldrh	r2, [r3, #24]
 8008a3c:	4b72      	ldr	r3, [pc, #456]	@ (8008c08 <tcp_input+0x49c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d13a      	bne.n	8008abe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	8ada      	ldrh	r2, [r3, #22]
 8008a4c:	4b6e      	ldr	r3, [pc, #440]	@ (8008c08 <tcp_input+0x49c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d132      	bne.n	8008abe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8008c0c <tcp_input+0x4a0>)
 8008a5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d12c      	bne.n	8008abe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	4b68      	ldr	r3, [pc, #416]	@ (8008c0c <tcp_input+0x4a0>)
 8008a6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d126      	bne.n	8008abe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d106      	bne.n	8008a88 <tcp_input+0x31c>
 8008a7a:	4b65      	ldr	r3, [pc, #404]	@ (8008c10 <tcp_input+0x4a4>)
 8008a7c:	f240 120d 	movw	r2, #269	@ 0x10d
 8008a80:	4964      	ldr	r1, [pc, #400]	@ (8008c14 <tcp_input+0x4a8>)
 8008a82:	4865      	ldr	r0, [pc, #404]	@ (8008c18 <tcp_input+0x4ac>)
 8008a84:	f006 faf8 	bl	800f078 <iprintf>
      if (prev != NULL) {
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <tcp_input+0x338>
        prev->next = pcb->next;
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008a96:	4b61      	ldr	r3, [pc, #388]	@ (8008c1c <tcp_input+0x4b0>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008a9e:	4a5f      	ldr	r2, [pc, #380]	@ (8008c1c <tcp_input+0x4b0>)
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d111      	bne.n	8008ad2 <tcp_input+0x366>
 8008aae:	4b58      	ldr	r3, [pc, #352]	@ (8008c10 <tcp_input+0x4a4>)
 8008ab0:	f240 1215 	movw	r2, #277	@ 0x115
 8008ab4:	495a      	ldr	r1, [pc, #360]	@ (8008c20 <tcp_input+0x4b4>)
 8008ab6:	4858      	ldr	r0, [pc, #352]	@ (8008c18 <tcp_input+0x4ac>)
 8008ab8:	f006 fade 	bl	800f078 <iprintf>
      break;
 8008abc:	e009      	b.n	8008ad2 <tcp_input+0x366>
    }
    prev = pcb;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	61fb      	str	r3, [r7, #28]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f47f af5e 	bne.w	800898c <tcp_input+0x220>
 8008ad0:	e000      	b.n	8008ad4 <tcp_input+0x368>
      break;
 8008ad2:	bf00      	nop
  }

  if (pcb == NULL) {
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f040 80aa 	bne.w	8008c30 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008adc:	4b51      	ldr	r3, [pc, #324]	@ (8008c24 <tcp_input+0x4b8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	61fb      	str	r3, [r7, #28]
 8008ae2:	e03f      	b.n	8008b64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	7d1b      	ldrb	r3, [r3, #20]
 8008ae8:	2b0a      	cmp	r3, #10
 8008aea:	d006      	beq.n	8008afa <tcp_input+0x38e>
 8008aec:	4b48      	ldr	r3, [pc, #288]	@ (8008c10 <tcp_input+0x4a4>)
 8008aee:	f240 121f 	movw	r2, #287	@ 0x11f
 8008af2:	494d      	ldr	r1, [pc, #308]	@ (8008c28 <tcp_input+0x4bc>)
 8008af4:	4848      	ldr	r0, [pc, #288]	@ (8008c18 <tcp_input+0x4ac>)
 8008af6:	f006 fabf 	bl	800f078 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	7a1b      	ldrb	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	7a1a      	ldrb	r2, [r3, #8]
 8008b06:	4b41      	ldr	r3, [pc, #260]	@ (8008c0c <tcp_input+0x4a0>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b0e:	3301      	adds	r3, #1
 8008b10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d122      	bne.n	8008b5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	8b1a      	ldrh	r2, [r3, #24]
 8008b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8008c08 <tcp_input+0x49c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d11b      	bne.n	8008b5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	8ada      	ldrh	r2, [r3, #22]
 8008b2a:	4b37      	ldr	r3, [pc, #220]	@ (8008c08 <tcp_input+0x49c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	885b      	ldrh	r3, [r3, #2]
 8008b30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d113      	bne.n	8008b5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	4b34      	ldr	r3, [pc, #208]	@ (8008c0c <tcp_input+0x4a0>)
 8008b3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d10d      	bne.n	8008b5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b31      	ldr	r3, [pc, #196]	@ (8008c0c <tcp_input+0x4a0>)
 8008b48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d107      	bne.n	8008b5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008b4e:	69f8      	ldr	r0, [r7, #28]
 8008b50:	f000 fb56 	bl	8009200 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7fd ffdf 	bl	8006b18 <pbuf_free>
        return;
 8008b5a:	e1fd      	b.n	8008f58 <tcp_input+0x7ec>
        continue;
 8008b5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1bc      	bne.n	8008ae4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008c2c <tcp_input+0x4c0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e02a      	b.n	8008bcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	7a1b      	ldrb	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	7a1a      	ldrb	r2, [r3, #8]
 8008b82:	4b22      	ldr	r3, [pc, #136]	@ (8008c0c <tcp_input+0x4a0>)
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d002      	beq.n	8008b98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	61bb      	str	r3, [r7, #24]
        continue;
 8008b96:	e016      	b.n	8008bc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	8ada      	ldrh	r2, [r3, #22]
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c08 <tcp_input+0x49c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d10c      	bne.n	8008bc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b17      	ldr	r3, [pc, #92]	@ (8008c0c <tcp_input+0x4a0>)
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d00f      	beq.n	8008bd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <tcp_input+0x46a>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1d1      	bne.n	8008b76 <tcp_input+0x40a>
 8008bd2:	e000      	b.n	8008bd6 <tcp_input+0x46a>
            break;
 8008bd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d029      	beq.n	8008c30 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008bea:	4b10      	ldr	r3, [pc, #64]	@ (8008c2c <tcp_input+0x4c0>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c2c <tcp_input+0x4c0>)
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008bf8:	6978      	ldr	r0, [r7, #20]
 8008bfa:	f000 fa03 	bl	8009004 <tcp_listen_input>
      }
      pbuf_free(p);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fd ff8a 	bl	8006b18 <pbuf_free>
      return;
 8008c04:	e1a8      	b.n	8008f58 <tcp_input+0x7ec>
 8008c06:	bf00      	nop
 8008c08:	20008304 	.word	0x20008304
 8008c0c:	20004d6c 	.word	0x20004d6c
 8008c10:	080110d8 	.word	0x080110d8
 8008c14:	08011204 	.word	0x08011204
 8008c18:	08011124 	.word	0x08011124
 8008c1c:	200082e8 	.word	0x200082e8
 8008c20:	08011230 	.word	0x08011230
 8008c24:	200082ec 	.word	0x200082ec
 8008c28:	0801125c 	.word	0x0801125c
 8008c2c:	200082e4 	.word	0x200082e4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f000 8158 	beq.w	8008ee8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008c38:	4b95      	ldr	r3, [pc, #596]	@ (8008e90 <tcp_input+0x724>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	891a      	ldrh	r2, [r3, #8]
 8008c42:	4b93      	ldr	r3, [pc, #588]	@ (8008e90 <tcp_input+0x724>)
 8008c44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008c46:	4a92      	ldr	r2, [pc, #584]	@ (8008e90 <tcp_input+0x724>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008c4c:	4b91      	ldr	r3, [pc, #580]	@ (8008e94 <tcp_input+0x728>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a8f      	ldr	r2, [pc, #572]	@ (8008e90 <tcp_input+0x724>)
 8008c52:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008c54:	4b90      	ldr	r3, [pc, #576]	@ (8008e98 <tcp_input+0x72c>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008c5a:	4b90      	ldr	r3, [pc, #576]	@ (8008e9c <tcp_input+0x730>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008c60:	4b8f      	ldr	r3, [pc, #572]	@ (8008ea0 <tcp_input+0x734>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008c66:	4b8f      	ldr	r3, [pc, #572]	@ (8008ea4 <tcp_input+0x738>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	f003 0308 	and.w	r3, r3, #8
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	7b5b      	ldrb	r3, [r3, #13]
 8008c76:	f043 0301 	orr.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d017      	beq.n	8008cb8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008c88:	69f8      	ldr	r0, [r7, #28]
 8008c8a:	f7ff f929 	bl	8007ee0 <tcp_process_refused_data>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f113 0f0d 	cmn.w	r3, #13
 8008c94:	d007      	beq.n	8008ca6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00c      	beq.n	8008cb8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008c9e:	4b82      	ldr	r3, [pc, #520]	@ (8008ea8 <tcp_input+0x73c>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d008      	beq.n	8008cb8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f040 80e3 	bne.w	8008e76 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008cb0:	69f8      	ldr	r0, [r7, #28]
 8008cb2:	f003 f9a7 	bl	800c004 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008cb6:	e0de      	b.n	8008e76 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008cb8:	4a7c      	ldr	r2, [pc, #496]	@ (8008eac <tcp_input+0x740>)
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008cbe:	69f8      	ldr	r0, [r7, #28]
 8008cc0:	f000 fb18 	bl	80092f4 <tcp_process>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008cc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ccc:	f113 0f0d 	cmn.w	r3, #13
 8008cd0:	f000 80d3 	beq.w	8008e7a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008cd4:	4b71      	ldr	r3, [pc, #452]	@ (8008e9c <tcp_input+0x730>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d015      	beq.n	8008d0c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <tcp_input+0x590>
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	6912      	ldr	r2, [r2, #16]
 8008cf4:	f06f 010d 	mvn.w	r1, #13
 8008cf8:	4610      	mov	r0, r2
 8008cfa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008cfc:	69f9      	ldr	r1, [r7, #28]
 8008cfe:	486c      	ldr	r0, [pc, #432]	@ (8008eb0 <tcp_input+0x744>)
 8008d00:	f7ff fbbc 	bl	800847c <tcp_pcb_remove>
        tcp_free(pcb);
 8008d04:	69f8      	ldr	r0, [r7, #28]
 8008d06:	f7fe f9a7 	bl	8007058 <tcp_free>
 8008d0a:	e0da      	b.n	8008ec2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008d10:	4b63      	ldr	r3, [pc, #396]	@ (8008ea0 <tcp_input+0x734>)
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01d      	beq.n	8008d54 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008d18:	4b61      	ldr	r3, [pc, #388]	@ (8008ea0 <tcp_input+0x734>)
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <tcp_input+0x5d2>
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	6910      	ldr	r0, [r2, #16]
 8008d32:	89fa      	ldrh	r2, [r7, #14]
 8008d34:	69f9      	ldr	r1, [r7, #28]
 8008d36:	4798      	blx	r3
 8008d38:	4603      	mov	r3, r0
 8008d3a:	74fb      	strb	r3, [r7, #19]
 8008d3c:	e001      	b.n	8008d42 <tcp_input+0x5d6>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008d42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d46:	f113 0f0d 	cmn.w	r3, #13
 8008d4a:	f000 8098 	beq.w	8008e7e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008d4e:	4b54      	ldr	r3, [pc, #336]	@ (8008ea0 <tcp_input+0x734>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008d54:	69f8      	ldr	r0, [r7, #28]
 8008d56:	f000 f915 	bl	8008f84 <tcp_input_delayed_close>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 8090 	bne.w	8008e82 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008d62:	4b4d      	ldr	r3, [pc, #308]	@ (8008e98 <tcp_input+0x72c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d041      	beq.n	8008dee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d006      	beq.n	8008d80 <tcp_input+0x614>
 8008d72:	4b50      	ldr	r3, [pc, #320]	@ (8008eb4 <tcp_input+0x748>)
 8008d74:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008d78:	494f      	ldr	r1, [pc, #316]	@ (8008eb8 <tcp_input+0x74c>)
 8008d7a:	4850      	ldr	r0, [pc, #320]	@ (8008ebc <tcp_input+0x750>)
 8008d7c:	f006 f97c 	bl	800f078 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	8b5b      	ldrh	r3, [r3, #26]
 8008d84:	f003 0310 	and.w	r3, r3, #16
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d008      	beq.n	8008d9e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008d8c:	4b42      	ldr	r3, [pc, #264]	@ (8008e98 <tcp_input+0x72c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fd fec1 	bl	8006b18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008d96:	69f8      	ldr	r0, [r7, #28]
 8008d98:	f7fe fc46 	bl	8007628 <tcp_abort>
            goto aborted;
 8008d9c:	e091      	b.n	8008ec2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00c      	beq.n	8008dc2 <tcp_input+0x656>
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	6918      	ldr	r0, [r3, #16]
 8008db2:	4b39      	ldr	r3, [pc, #228]	@ (8008e98 <tcp_input+0x72c>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	69f9      	ldr	r1, [r7, #28]
 8008dba:	47a0      	blx	r4
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	74fb      	strb	r3, [r7, #19]
 8008dc0:	e008      	b.n	8008dd4 <tcp_input+0x668>
 8008dc2:	4b35      	ldr	r3, [pc, #212]	@ (8008e98 <tcp_input+0x72c>)
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	69f9      	ldr	r1, [r7, #28]
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f7ff f95e 	bl	800808c <tcp_recv_null>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008dd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dd8:	f113 0f0d 	cmn.w	r3, #13
 8008ddc:	d053      	beq.n	8008e86 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008dde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008de6:	4b2c      	ldr	r3, [pc, #176]	@ (8008e98 <tcp_input+0x72c>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008dee:	4b2b      	ldr	r3, [pc, #172]	@ (8008e9c <tcp_input+0x730>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d030      	beq.n	8008e5c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d009      	beq.n	8008e16 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e06:	7b5a      	ldrb	r2, [r3, #13]
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e0c:	f042 0220 	orr.w	r2, r2, #32
 8008e10:	b2d2      	uxtb	r2, r2
 8008e12:	735a      	strb	r2, [r3, #13]
 8008e14:	e022      	b.n	8008e5c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e1a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008e1e:	d005      	beq.n	8008e2c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e24:	3301      	adds	r3, #1
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00b      	beq.n	8008e4e <tcp_input+0x6e2>
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	6918      	ldr	r0, [r3, #16]
 8008e40:	2300      	movs	r3, #0
 8008e42:	2200      	movs	r2, #0
 8008e44:	69f9      	ldr	r1, [r7, #28]
 8008e46:	47a0      	blx	r4
 8008e48:	4603      	mov	r3, r0
 8008e4a:	74fb      	strb	r3, [r7, #19]
 8008e4c:	e001      	b.n	8008e52 <tcp_input+0x6e6>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e56:	f113 0f0d 	cmn.w	r3, #13
 8008e5a:	d016      	beq.n	8008e8a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008e5c:	4b13      	ldr	r3, [pc, #76]	@ (8008eac <tcp_input+0x740>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008e62:	69f8      	ldr	r0, [r7, #28]
 8008e64:	f000 f88e 	bl	8008f84 <tcp_input_delayed_close>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d128      	bne.n	8008ec0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008e6e:	69f8      	ldr	r0, [r7, #28]
 8008e70:	f002 fac2 	bl	800b3f8 <tcp_output>
 8008e74:	e025      	b.n	8008ec2 <tcp_input+0x756>
        goto aborted;
 8008e76:	bf00      	nop
 8008e78:	e023      	b.n	8008ec2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008e7a:	bf00      	nop
 8008e7c:	e021      	b.n	8008ec2 <tcp_input+0x756>
              goto aborted;
 8008e7e:	bf00      	nop
 8008e80:	e01f      	b.n	8008ec2 <tcp_input+0x756>
          goto aborted;
 8008e82:	bf00      	nop
 8008e84:	e01d      	b.n	8008ec2 <tcp_input+0x756>
            goto aborted;
 8008e86:	bf00      	nop
 8008e88:	e01b      	b.n	8008ec2 <tcp_input+0x756>
              goto aborted;
 8008e8a:	bf00      	nop
 8008e8c:	e019      	b.n	8008ec2 <tcp_input+0x756>
 8008e8e:	bf00      	nop
 8008e90:	200082f4 	.word	0x200082f4
 8008e94:	20008304 	.word	0x20008304
 8008e98:	20008324 	.word	0x20008324
 8008e9c:	20008321 	.word	0x20008321
 8008ea0:	2000831c 	.word	0x2000831c
 8008ea4:	20008320 	.word	0x20008320
 8008ea8:	2000831e 	.word	0x2000831e
 8008eac:	20008328 	.word	0x20008328
 8008eb0:	200082e8 	.word	0x200082e8
 8008eb4:	080110d8 	.word	0x080110d8
 8008eb8:	0801128c 	.word	0x0801128c
 8008ebc:	08011124 	.word	0x08011124
          goto aborted;
 8008ec0:	bf00      	nop
    tcp_input_pcb = NULL;
 8008ec2:	4b27      	ldr	r3, [pc, #156]	@ (8008f60 <tcp_input+0x7f4>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008ec8:	4b26      	ldr	r3, [pc, #152]	@ (8008f64 <tcp_input+0x7f8>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008ece:	4b26      	ldr	r3, [pc, #152]	@ (8008f68 <tcp_input+0x7fc>)
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d03f      	beq.n	8008f56 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008ed6:	4b24      	ldr	r3, [pc, #144]	@ (8008f68 <tcp_input+0x7fc>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd fe1c 	bl	8006b18 <pbuf_free>
      inseg.p = NULL;
 8008ee0:	4b21      	ldr	r3, [pc, #132]	@ (8008f68 <tcp_input+0x7fc>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008ee6:	e036      	b.n	8008f56 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008ee8:	4b20      	ldr	r3, [pc, #128]	@ (8008f6c <tcp_input+0x800>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	899b      	ldrh	r3, [r3, #12]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fc fab3 	bl	800545c <lwip_htons>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d118      	bne.n	8008f34 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f02:	4b1b      	ldr	r3, [pc, #108]	@ (8008f70 <tcp_input+0x804>)
 8008f04:	6819      	ldr	r1, [r3, #0]
 8008f06:	4b1b      	ldr	r3, [pc, #108]	@ (8008f74 <tcp_input+0x808>)
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <tcp_input+0x80c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f12:	4b16      	ldr	r3, [pc, #88]	@ (8008f6c <tcp_input+0x800>)
 8008f14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f16:	885b      	ldrh	r3, [r3, #2]
 8008f18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f1a:	4a14      	ldr	r2, [pc, #80]	@ (8008f6c <tcp_input+0x800>)
 8008f1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f1e:	8812      	ldrh	r2, [r2, #0]
 8008f20:	b292      	uxth	r2, r2
 8008f22:	9202      	str	r2, [sp, #8]
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	4b15      	ldr	r3, [pc, #84]	@ (8008f7c <tcp_input+0x810>)
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4b15      	ldr	r3, [pc, #84]	@ (8008f80 <tcp_input+0x814>)
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f003 f816 	bl	800bf60 <tcp_rst>
    pbuf_free(p);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7fd fdef 	bl	8006b18 <pbuf_free>
  return;
 8008f3a:	e00c      	b.n	8008f56 <tcp_input+0x7ea>
    goto dropped;
 8008f3c:	bf00      	nop
 8008f3e:	e006      	b.n	8008f4e <tcp_input+0x7e2>
    goto dropped;
 8008f40:	bf00      	nop
 8008f42:	e004      	b.n	8008f4e <tcp_input+0x7e2>
    goto dropped;
 8008f44:	bf00      	nop
 8008f46:	e002      	b.n	8008f4e <tcp_input+0x7e2>
      goto dropped;
 8008f48:	bf00      	nop
 8008f4a:	e000      	b.n	8008f4e <tcp_input+0x7e2>
      goto dropped;
 8008f4c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fd fde2 	bl	8006b18 <pbuf_free>
 8008f54:	e000      	b.n	8008f58 <tcp_input+0x7ec>
  return;
 8008f56:	bf00      	nop
}
 8008f58:	3724      	adds	r7, #36	@ 0x24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd90      	pop	{r4, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20008328 	.word	0x20008328
 8008f64:	20008324 	.word	0x20008324
 8008f68:	200082f4 	.word	0x200082f4
 8008f6c:	20008304 	.word	0x20008304
 8008f70:	20008318 	.word	0x20008318
 8008f74:	2000831e 	.word	0x2000831e
 8008f78:	20008314 	.word	0x20008314
 8008f7c:	20004d7c 	.word	0x20004d7c
 8008f80:	20004d80 	.word	0x20004d80

08008f84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d106      	bne.n	8008fa0 <tcp_input_delayed_close+0x1c>
 8008f92:	4b17      	ldr	r3, [pc, #92]	@ (8008ff0 <tcp_input_delayed_close+0x6c>)
 8008f94:	f240 225a 	movw	r2, #602	@ 0x25a
 8008f98:	4916      	ldr	r1, [pc, #88]	@ (8008ff4 <tcp_input_delayed_close+0x70>)
 8008f9a:	4817      	ldr	r0, [pc, #92]	@ (8008ff8 <tcp_input_delayed_close+0x74>)
 8008f9c:	f006 f86c 	bl	800f078 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008fa0:	4b16      	ldr	r3, [pc, #88]	@ (8008ffc <tcp_input_delayed_close+0x78>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01c      	beq.n	8008fe6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8b5b      	ldrh	r3, [r3, #26]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10d      	bne.n	8008fd4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d008      	beq.n	8008fd4 <tcp_input_delayed_close+0x50>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6912      	ldr	r2, [r2, #16]
 8008fcc:	f06f 010e 	mvn.w	r1, #14
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	480a      	ldr	r0, [pc, #40]	@ (8009000 <tcp_input_delayed_close+0x7c>)
 8008fd8:	f7ff fa50 	bl	800847c <tcp_pcb_remove>
    tcp_free(pcb);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7fe f83b 	bl	8007058 <tcp_free>
    return 1;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	080110d8 	.word	0x080110d8
 8008ff4:	080112a8 	.word	0x080112a8
 8008ff8:	08011124 	.word	0x08011124
 8008ffc:	20008321 	.word	0x20008321
 8009000:	200082e8 	.word	0x200082e8

08009004 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b08b      	sub	sp, #44	@ 0x2c
 8009008:	af04      	add	r7, sp, #16
 800900a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800900c:	4b6f      	ldr	r3, [pc, #444]	@ (80091cc <tcp_listen_input+0x1c8>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	f040 80d2 	bne.w	80091be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <tcp_listen_input+0x2a>
 8009020:	4b6b      	ldr	r3, [pc, #428]	@ (80091d0 <tcp_listen_input+0x1cc>)
 8009022:	f240 2281 	movw	r2, #641	@ 0x281
 8009026:	496b      	ldr	r1, [pc, #428]	@ (80091d4 <tcp_listen_input+0x1d0>)
 8009028:	486b      	ldr	r0, [pc, #428]	@ (80091d8 <tcp_listen_input+0x1d4>)
 800902a:	f006 f825 	bl	800f078 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800902e:	4b67      	ldr	r3, [pc, #412]	@ (80091cc <tcp_listen_input+0x1c8>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f003 0310 	and.w	r3, r3, #16
 8009036:	2b00      	cmp	r3, #0
 8009038:	d019      	beq.n	800906e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800903a:	4b68      	ldr	r3, [pc, #416]	@ (80091dc <tcp_listen_input+0x1d8>)
 800903c:	6819      	ldr	r1, [r3, #0]
 800903e:	4b68      	ldr	r3, [pc, #416]	@ (80091e0 <tcp_listen_input+0x1dc>)
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	4b67      	ldr	r3, [pc, #412]	@ (80091e4 <tcp_listen_input+0x1e0>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800904a:	4b67      	ldr	r3, [pc, #412]	@ (80091e8 <tcp_listen_input+0x1e4>)
 800904c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800904e:	885b      	ldrh	r3, [r3, #2]
 8009050:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009052:	4a65      	ldr	r2, [pc, #404]	@ (80091e8 <tcp_listen_input+0x1e4>)
 8009054:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009056:	8812      	ldrh	r2, [r2, #0]
 8009058:	b292      	uxth	r2, r2
 800905a:	9202      	str	r2, [sp, #8]
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	4b63      	ldr	r3, [pc, #396]	@ (80091ec <tcp_listen_input+0x1e8>)
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	4b63      	ldr	r3, [pc, #396]	@ (80091f0 <tcp_listen_input+0x1ec>)
 8009064:	4602      	mov	r2, r0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f002 ff7a 	bl	800bf60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800906c:	e0a9      	b.n	80091c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800906e:	4b57      	ldr	r3, [pc, #348]	@ (80091cc <tcp_listen_input+0x1c8>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80a3 	beq.w	80091c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	7d5b      	ldrb	r3, [r3, #21]
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff f927 	bl	80082d4 <tcp_alloc>
 8009086:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d111      	bne.n	80090b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <tcp_listen_input+0xa8>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	6910      	ldr	r0, [r2, #16]
 800909e:	f04f 32ff 	mov.w	r2, #4294967295
 80090a2:	2100      	movs	r1, #0
 80090a4:	4798      	blx	r3
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]
      return;
 80090aa:	e08b      	b.n	80091c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80090ac:	23f0      	movs	r3, #240	@ 0xf0
 80090ae:	73bb      	strb	r3, [r7, #14]
      return;
 80090b0:	e088      	b.n	80091c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80090b2:	4b50      	ldr	r3, [pc, #320]	@ (80091f4 <tcp_listen_input+0x1f0>)
 80090b4:	695a      	ldr	r2, [r3, #20]
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80090ba:	4b4e      	ldr	r3, [pc, #312]	@ (80091f4 <tcp_listen_input+0x1f0>)
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8ada      	ldrh	r2, [r3, #22]
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80090ca:	4b47      	ldr	r3, [pc, #284]	@ (80091e8 <tcp_listen_input+0x1e4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2203      	movs	r2, #3
 80090da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80090dc:	4b41      	ldr	r3, [pc, #260]	@ (80091e4 <tcp_listen_input+0x1e0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f7ff fa58 	bl	80085a4 <tcp_next_iss>
 80090f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800910e:	4b35      	ldr	r3, [pc, #212]	@ (80091e4 <tcp_listen_input+0x1e0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7a5b      	ldrb	r3, [r3, #9]
 800912a:	f003 030c 	and.w	r3, r3, #12
 800912e:	b2da      	uxtb	r2, r3
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7a1a      	ldrb	r2, [r3, #8]
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800913c:	4b2e      	ldr	r3, [pc, #184]	@ (80091f8 <tcp_listen_input+0x1f4>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	60da      	str	r2, [r3, #12]
 8009144:	4a2c      	ldr	r2, [pc, #176]	@ (80091f8 <tcp_listen_input+0x1f4>)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	f003 f8cb 	bl	800c2e4 <tcp_timer_needed>
 800914e:	4b2b      	ldr	r3, [pc, #172]	@ (80091fc <tcp_listen_input+0x1f8>)
 8009150:	2201      	movs	r2, #1
 8009152:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009154:	6978      	ldr	r0, [r7, #20]
 8009156:	f001 fd8b 	bl	800ac70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800915a:	4b23      	ldr	r3, [pc, #140]	@ (80091e8 <tcp_listen_input+0x1e4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	89db      	ldrh	r3, [r3, #14]
 8009160:	b29a      	uxth	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f004 fc8f 	bl	800daa0 <ip4_route>
 8009182:	4601      	mov	r1, r0
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	3304      	adds	r3, #4
 8009188:	461a      	mov	r2, r3
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fa30 	bl	80085f0 <tcp_eff_send_mss_netif>
 8009190:	4603      	mov	r3, r0
 8009192:	461a      	mov	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009198:	2112      	movs	r1, #18
 800919a:	6978      	ldr	r0, [r7, #20]
 800919c:	f002 f83e 	bl	800b21c <tcp_enqueue_flags>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80091a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80091ac:	2100      	movs	r1, #0
 80091ae:	6978      	ldr	r0, [r7, #20]
 80091b0:	f7fe f97c 	bl	80074ac <tcp_abandon>
      return;
 80091b4:	e006      	b.n	80091c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80091b6:	6978      	ldr	r0, [r7, #20]
 80091b8:	f002 f91e 	bl	800b3f8 <tcp_output>
  return;
 80091bc:	e001      	b.n	80091c2 <tcp_listen_input+0x1be>
    return;
 80091be:	bf00      	nop
 80091c0:	e000      	b.n	80091c4 <tcp_listen_input+0x1c0>
  return;
 80091c2:	bf00      	nop
}
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd90      	pop	{r4, r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20008320 	.word	0x20008320
 80091d0:	080110d8 	.word	0x080110d8
 80091d4:	080112d0 	.word	0x080112d0
 80091d8:	08011124 	.word	0x08011124
 80091dc:	20008318 	.word	0x20008318
 80091e0:	2000831e 	.word	0x2000831e
 80091e4:	20008314 	.word	0x20008314
 80091e8:	20008304 	.word	0x20008304
 80091ec:	20004d7c 	.word	0x20004d7c
 80091f0:	20004d80 	.word	0x20004d80
 80091f4:	20004d6c 	.word	0x20004d6c
 80091f8:	200082e8 	.word	0x200082e8
 80091fc:	200082f0 	.word	0x200082f0

08009200 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af04      	add	r7, sp, #16
 8009206:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009208:	4b2f      	ldr	r3, [pc, #188]	@ (80092c8 <tcp_timewait_input+0xc8>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d153      	bne.n	80092bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d106      	bne.n	8009228 <tcp_timewait_input+0x28>
 800921a:	4b2c      	ldr	r3, [pc, #176]	@ (80092cc <tcp_timewait_input+0xcc>)
 800921c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009220:	492b      	ldr	r1, [pc, #172]	@ (80092d0 <tcp_timewait_input+0xd0>)
 8009222:	482c      	ldr	r0, [pc, #176]	@ (80092d4 <tcp_timewait_input+0xd4>)
 8009224:	f005 ff28 	bl	800f078 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009228:	4b27      	ldr	r3, [pc, #156]	@ (80092c8 <tcp_timewait_input+0xc8>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	f003 0302 	and.w	r3, r3, #2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d02a      	beq.n	800928a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009234:	4b28      	ldr	r3, [pc, #160]	@ (80092d8 <tcp_timewait_input+0xd8>)
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	db2d      	blt.n	800929e <tcp_timewait_input+0x9e>
 8009242:	4b25      	ldr	r3, [pc, #148]	@ (80092d8 <tcp_timewait_input+0xd8>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800924e:	440b      	add	r3, r1
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	dc23      	bgt.n	800929e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009256:	4b21      	ldr	r3, [pc, #132]	@ (80092dc <tcp_timewait_input+0xdc>)
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	4b21      	ldr	r3, [pc, #132]	@ (80092e0 <tcp_timewait_input+0xe0>)
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	4b1d      	ldr	r3, [pc, #116]	@ (80092d8 <tcp_timewait_input+0xd8>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009266:	4b1f      	ldr	r3, [pc, #124]	@ (80092e4 <tcp_timewait_input+0xe4>)
 8009268:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800926a:	885b      	ldrh	r3, [r3, #2]
 800926c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800926e:	4a1d      	ldr	r2, [pc, #116]	@ (80092e4 <tcp_timewait_input+0xe4>)
 8009270:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009272:	8812      	ldrh	r2, [r2, #0]
 8009274:	b292      	uxth	r2, r2
 8009276:	9202      	str	r2, [sp, #8]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <tcp_timewait_input+0xe8>)
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	4b1b      	ldr	r3, [pc, #108]	@ (80092ec <tcp_timewait_input+0xec>)
 8009280:	4602      	mov	r2, r0
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f002 fe6c 	bl	800bf60 <tcp_rst>
      return;
 8009288:	e01b      	b.n	80092c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800928a:	4b0f      	ldr	r3, [pc, #60]	@ (80092c8 <tcp_timewait_input+0xc8>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009296:	4b16      	ldr	r3, [pc, #88]	@ (80092f0 <tcp_timewait_input+0xf0>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800929e:	4b10      	ldr	r3, [pc, #64]	@ (80092e0 <tcp_timewait_input+0xe0>)
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00c      	beq.n	80092c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	8b5b      	ldrh	r3, [r3, #26]
 80092aa:	f043 0302 	orr.w	r3, r3, #2
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f002 f89f 	bl	800b3f8 <tcp_output>
  }
  return;
 80092ba:	e001      	b.n	80092c0 <tcp_timewait_input+0xc0>
    return;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <tcp_timewait_input+0xc2>
  return;
 80092c0:	bf00      	nop
}
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20008320 	.word	0x20008320
 80092cc:	080110d8 	.word	0x080110d8
 80092d0:	080112f0 	.word	0x080112f0
 80092d4:	08011124 	.word	0x08011124
 80092d8:	20008314 	.word	0x20008314
 80092dc:	20008318 	.word	0x20008318
 80092e0:	2000831e 	.word	0x2000831e
 80092e4:	20008304 	.word	0x20008304
 80092e8:	20004d7c 	.word	0x20004d7c
 80092ec:	20004d80 	.word	0x20004d80
 80092f0:	200082dc 	.word	0x200082dc

080092f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b08d      	sub	sp, #52	@ 0x34
 80092f8:	af04      	add	r7, sp, #16
 80092fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <tcp_process+0x24>
 800930a:	4b9d      	ldr	r3, [pc, #628]	@ (8009580 <tcp_process+0x28c>)
 800930c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009310:	499c      	ldr	r1, [pc, #624]	@ (8009584 <tcp_process+0x290>)
 8009312:	489d      	ldr	r0, [pc, #628]	@ (8009588 <tcp_process+0x294>)
 8009314:	f005 feb0 	bl	800f078 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009318:	4b9c      	ldr	r3, [pc, #624]	@ (800958c <tcp_process+0x298>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d04e      	beq.n	80093c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7d1b      	ldrb	r3, [r3, #20]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d108      	bne.n	800933e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009330:	4b97      	ldr	r3, [pc, #604]	@ (8009590 <tcp_process+0x29c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	429a      	cmp	r2, r3
 8009336:	d123      	bne.n	8009380 <tcp_process+0x8c>
        acceptable = 1;
 8009338:	2301      	movs	r3, #1
 800933a:	76fb      	strb	r3, [r7, #27]
 800933c:	e020      	b.n	8009380 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009342:	4b94      	ldr	r3, [pc, #592]	@ (8009594 <tcp_process+0x2a0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d102      	bne.n	8009350 <tcp_process+0x5c>
        acceptable = 1;
 800934a:	2301      	movs	r3, #1
 800934c:	76fb      	strb	r3, [r7, #27]
 800934e:	e017      	b.n	8009380 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009350:	4b90      	ldr	r3, [pc, #576]	@ (8009594 <tcp_process+0x2a0>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	db10      	blt.n	8009380 <tcp_process+0x8c>
 800935e:	4b8d      	ldr	r3, [pc, #564]	@ (8009594 <tcp_process+0x2a0>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800936a:	440b      	add	r3, r1
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	dc06      	bgt.n	8009380 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	8b5b      	ldrh	r3, [r3, #26]
 8009376:	f043 0302 	orr.w	r3, r3, #2
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009380:	7efb      	ldrb	r3, [r7, #27]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01b      	beq.n	80093be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7d1b      	ldrb	r3, [r3, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d106      	bne.n	800939c <tcp_process+0xa8>
 800938e:	4b7c      	ldr	r3, [pc, #496]	@ (8009580 <tcp_process+0x28c>)
 8009390:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009394:	4980      	ldr	r1, [pc, #512]	@ (8009598 <tcp_process+0x2a4>)
 8009396:	487c      	ldr	r0, [pc, #496]	@ (8009588 <tcp_process+0x294>)
 8009398:	f005 fe6e 	bl	800f078 <iprintf>
      recv_flags |= TF_RESET;
 800939c:	4b7f      	ldr	r3, [pc, #508]	@ (800959c <tcp_process+0x2a8>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	f043 0308 	orr.w	r3, r3, #8
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	4b7d      	ldr	r3, [pc, #500]	@ (800959c <tcp_process+0x2a8>)
 80093a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	8b5b      	ldrh	r3, [r3, #26]
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80093b8:	f06f 030d 	mvn.w	r3, #13
 80093bc:	e37a      	b.n	8009ab4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	e378      	b.n	8009ab4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80093c2:	4b72      	ldr	r3, [pc, #456]	@ (800958c <tcp_process+0x298>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d010      	beq.n	80093f0 <tcp_process+0xfc>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7d1b      	ldrb	r3, [r3, #20]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d00c      	beq.n	80093f0 <tcp_process+0xfc>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7d1b      	ldrb	r3, [r3, #20]
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d008      	beq.n	80093f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8b5b      	ldrh	r3, [r3, #26]
 80093e2:	f043 0302 	orr.w	r3, r3, #2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	e361      	b.n	8009ab4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8b5b      	ldrh	r3, [r3, #26]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d103      	bne.n	8009404 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80093fc:	4b68      	ldr	r3, [pc, #416]	@ (80095a0 <tcp_process+0x2ac>)
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fc2b 	bl	800ac70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7d1b      	ldrb	r3, [r3, #20]
 800941e:	3b02      	subs	r3, #2
 8009420:	2b07      	cmp	r3, #7
 8009422:	f200 8337 	bhi.w	8009a94 <tcp_process+0x7a0>
 8009426:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <tcp_process+0x138>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	0800944d 	.word	0x0800944d
 8009430:	0800967d 	.word	0x0800967d
 8009434:	080097f5 	.word	0x080097f5
 8009438:	0800981f 	.word	0x0800981f
 800943c:	08009943 	.word	0x08009943
 8009440:	080097f5 	.word	0x080097f5
 8009444:	080099cf 	.word	0x080099cf
 8009448:	08009a5f 	.word	0x08009a5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800944c:	4b4f      	ldr	r3, [pc, #316]	@ (800958c <tcp_process+0x298>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 0310 	and.w	r3, r3, #16
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80e4 	beq.w	8009622 <tcp_process+0x32e>
 800945a:	4b4c      	ldr	r3, [pc, #304]	@ (800958c <tcp_process+0x298>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 80dd 	beq.w	8009622 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	4b48      	ldr	r3, [pc, #288]	@ (8009590 <tcp_process+0x29c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	f040 80d5 	bne.w	8009622 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009478:	4b46      	ldr	r3, [pc, #280]	@ (8009594 <tcp_process+0x2a0>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800948a:	4b41      	ldr	r3, [pc, #260]	@ (8009590 <tcp_process+0x29c>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009492:	4b44      	ldr	r3, [pc, #272]	@ (80095a4 <tcp_process+0x2b0>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	89db      	ldrh	r3, [r3, #14]
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80094ac:	4b39      	ldr	r3, [pc, #228]	@ (8009594 <tcp_process+0x2a0>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	1e5a      	subs	r2, r3, #1
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2204      	movs	r2, #4
 80094ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f004 faeb 	bl	800daa0 <ip4_route>
 80094ca:	4601      	mov	r1, r0
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	461a      	mov	r2, r3
 80094d2:	4620      	mov	r0, r4
 80094d4:	f7ff f88c 	bl	80085f0 <tcp_eff_send_mss_netif>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094e4:	009a      	lsls	r2, r3, #2
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	f241 111c 	movw	r1, #4380	@ 0x111c
 80094f0:	428b      	cmp	r3, r1
 80094f2:	bf38      	it	cc
 80094f4:	460b      	movcc	r3, r1
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d204      	bcs.n	8009504 <tcp_process+0x210>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	b29b      	uxth	r3, r3
 8009502:	e00d      	b.n	8009520 <tcp_process+0x22c>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800950e:	4293      	cmp	r3, r2
 8009510:	d904      	bls.n	800951c <tcp_process+0x228>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009516:	005b      	lsls	r3, r3, #1
 8009518:	b29b      	uxth	r3, r3
 800951a:	e001      	b.n	8009520 <tcp_process+0x22c>
 800951c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <tcp_process+0x24a>
 8009530:	4b13      	ldr	r3, [pc, #76]	@ (8009580 <tcp_process+0x28c>)
 8009532:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8009536:	491c      	ldr	r1, [pc, #112]	@ (80095a8 <tcp_process+0x2b4>)
 8009538:	4813      	ldr	r0, [pc, #76]	@ (8009588 <tcp_process+0x294>)
 800953a:	f005 fd9d 	bl	800f078 <iprintf>
        --pcb->snd_queuelen;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009544:	3b01      	subs	r3, #1
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009552:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d12a      	bne.n	80095b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800955e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <tcp_process+0x280>
 8009566:	4b06      	ldr	r3, [pc, #24]	@ (8009580 <tcp_process+0x28c>)
 8009568:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800956c:	490f      	ldr	r1, [pc, #60]	@ (80095ac <tcp_process+0x2b8>)
 800956e:	4806      	ldr	r0, [pc, #24]	@ (8009588 <tcp_process+0x294>)
 8009570:	f005 fd82 	bl	800f078 <iprintf>
          pcb->unsent = rseg->next;
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800957c:	e01c      	b.n	80095b8 <tcp_process+0x2c4>
 800957e:	bf00      	nop
 8009580:	080110d8 	.word	0x080110d8
 8009584:	08011310 	.word	0x08011310
 8009588:	08011124 	.word	0x08011124
 800958c:	20008320 	.word	0x20008320
 8009590:	20008318 	.word	0x20008318
 8009594:	20008314 	.word	0x20008314
 8009598:	0801132c 	.word	0x0801132c
 800959c:	20008321 	.word	0x20008321
 80095a0:	200082dc 	.word	0x200082dc
 80095a4:	20008304 	.word	0x20008304
 80095a8:	0801134c 	.word	0x0801134c
 80095ac:	08011364 	.word	0x08011364
        } else {
          pcb->unacked = rseg->next;
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80095b8:	69f8      	ldr	r0, [r7, #28]
 80095ba:	f7fe fd22 	bl	8008002 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095cc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80095ce:	e006      	b.n	80095de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <tcp_process+0x30a>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6910      	ldr	r0, [r2, #16]
 80095f2:	2200      	movs	r2, #0
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	4798      	blx	r3
 80095f8:	4603      	mov	r3, r0
 80095fa:	76bb      	strb	r3, [r7, #26]
 80095fc:	e001      	b.n	8009602 <tcp_process+0x30e>
 80095fe:	2300      	movs	r3, #0
 8009600:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009602:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009606:	f113 0f0d 	cmn.w	r3, #13
 800960a:	d102      	bne.n	8009612 <tcp_process+0x31e>
          return ERR_ABRT;
 800960c:	f06f 030c 	mvn.w	r3, #12
 8009610:	e250      	b.n	8009ab4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8b5b      	ldrh	r3, [r3, #26]
 8009616:	f043 0302 	orr.w	r3, r3, #2
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009620:	e23a      	b.n	8009a98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009622:	4b98      	ldr	r3, [pc, #608]	@ (8009884 <tcp_process+0x590>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 0310 	and.w	r3, r3, #16
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8234 	beq.w	8009a98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009630:	4b95      	ldr	r3, [pc, #596]	@ (8009888 <tcp_process+0x594>)
 8009632:	6819      	ldr	r1, [r3, #0]
 8009634:	4b95      	ldr	r3, [pc, #596]	@ (800988c <tcp_process+0x598>)
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	4b95      	ldr	r3, [pc, #596]	@ (8009890 <tcp_process+0x59c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009640:	4b94      	ldr	r3, [pc, #592]	@ (8009894 <tcp_process+0x5a0>)
 8009642:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009644:	885b      	ldrh	r3, [r3, #2]
 8009646:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009648:	4a92      	ldr	r2, [pc, #584]	@ (8009894 <tcp_process+0x5a0>)
 800964a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800964c:	8812      	ldrh	r2, [r2, #0]
 800964e:	b292      	uxth	r2, r2
 8009650:	9202      	str	r2, [sp, #8]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	4b90      	ldr	r3, [pc, #576]	@ (8009898 <tcp_process+0x5a4>)
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4b90      	ldr	r3, [pc, #576]	@ (800989c <tcp_process+0x5a8>)
 800965a:	4602      	mov	r2, r0
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f002 fc7f 	bl	800bf60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009668:	2b05      	cmp	r3, #5
 800966a:	f200 8215 	bhi.w	8009a98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f002 fa4b 	bl	800bb10 <tcp_rexmit_rto>
      break;
 800967a:	e20d      	b.n	8009a98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800967c:	4b81      	ldr	r3, [pc, #516]	@ (8009884 <tcp_process+0x590>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80a1 	beq.w	80097cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800968a:	4b7f      	ldr	r3, [pc, #508]	@ (8009888 <tcp_process+0x594>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	db7e      	blt.n	8009798 <tcp_process+0x4a4>
 800969a:	4b7b      	ldr	r3, [pc, #492]	@ (8009888 <tcp_process+0x594>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dc77      	bgt.n	8009798 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2204      	movs	r2, #4
 80096ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d102      	bne.n	80096bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80096b6:	23fa      	movs	r3, #250	@ 0xfa
 80096b8:	76bb      	strb	r3, [r7, #26]
 80096ba:	e01d      	b.n	80096f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <tcp_process+0x3e0>
 80096c6:	4b76      	ldr	r3, [pc, #472]	@ (80098a0 <tcp_process+0x5ac>)
 80096c8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80096cc:	4975      	ldr	r1, [pc, #468]	@ (80098a4 <tcp_process+0x5b0>)
 80096ce:	4876      	ldr	r0, [pc, #472]	@ (80098a8 <tcp_process+0x5b4>)
 80096d0:	f005 fcd2 	bl	800f078 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <tcp_process+0x400>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6910      	ldr	r0, [r2, #16]
 80096e8:	2200      	movs	r2, #0
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	76bb      	strb	r3, [r7, #26]
 80096f2:	e001      	b.n	80096f8 <tcp_process+0x404>
 80096f4:	23f0      	movs	r3, #240	@ 0xf0
 80096f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80096f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00a      	beq.n	8009716 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009700:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009704:	f113 0f0d 	cmn.w	r3, #13
 8009708:	d002      	beq.n	8009710 <tcp_process+0x41c>
              tcp_abort(pcb);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7fd ff8c 	bl	8007628 <tcp_abort>
            }
            return ERR_ABRT;
 8009710:	f06f 030c 	mvn.w	r3, #12
 8009714:	e1ce      	b.n	8009ab4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fae0 	bl	8009cdc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800971c:	4b63      	ldr	r3, [pc, #396]	@ (80098ac <tcp_process+0x5b8>)
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d005      	beq.n	8009730 <tcp_process+0x43c>
            recv_acked--;
 8009724:	4b61      	ldr	r3, [pc, #388]	@ (80098ac <tcp_process+0x5b8>)
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	4b5f      	ldr	r3, [pc, #380]	@ (80098ac <tcp_process+0x5b8>)
 800972e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009734:	009a      	lsls	r2, r3, #2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009740:	428b      	cmp	r3, r1
 8009742:	bf38      	it	cc
 8009744:	460b      	movcc	r3, r1
 8009746:	429a      	cmp	r2, r3
 8009748:	d204      	bcs.n	8009754 <tcp_process+0x460>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	b29b      	uxth	r3, r3
 8009752:	e00d      	b.n	8009770 <tcp_process+0x47c>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800975e:	4293      	cmp	r3, r2
 8009760:	d904      	bls.n	800976c <tcp_process+0x478>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	b29b      	uxth	r3, r3
 800976a:	e001      	b.n	8009770 <tcp_process+0x47c>
 800976c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009776:	4b4e      	ldr	r3, [pc, #312]	@ (80098b0 <tcp_process+0x5bc>)
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b00      	cmp	r3, #0
 8009780:	d037      	beq.n	80097f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	8b5b      	ldrh	r3, [r3, #26]
 8009786:	f043 0302 	orr.w	r3, r3, #2
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2207      	movs	r2, #7
 8009794:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009796:	e02c      	b.n	80097f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009798:	4b3b      	ldr	r3, [pc, #236]	@ (8009888 <tcp_process+0x594>)
 800979a:	6819      	ldr	r1, [r3, #0]
 800979c:	4b3b      	ldr	r3, [pc, #236]	@ (800988c <tcp_process+0x598>)
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4b3b      	ldr	r3, [pc, #236]	@ (8009890 <tcp_process+0x59c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097a8:	4b3a      	ldr	r3, [pc, #232]	@ (8009894 <tcp_process+0x5a0>)
 80097aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097b0:	4a38      	ldr	r2, [pc, #224]	@ (8009894 <tcp_process+0x5a0>)
 80097b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097b4:	8812      	ldrh	r2, [r2, #0]
 80097b6:	b292      	uxth	r2, r2
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	4b36      	ldr	r3, [pc, #216]	@ (8009898 <tcp_process+0x5a4>)
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	4b36      	ldr	r3, [pc, #216]	@ (800989c <tcp_process+0x5a8>)
 80097c2:	4602      	mov	r2, r0
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f002 fbcb 	bl	800bf60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80097ca:	e167      	b.n	8009a9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80097cc:	4b2d      	ldr	r3, [pc, #180]	@ (8009884 <tcp_process+0x590>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8161 	beq.w	8009a9c <tcp_process+0x7a8>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097de:	1e5a      	subs	r2, r3, #1
 80097e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009890 <tcp_process+0x59c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	f040 8159 	bne.w	8009a9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f002 f9b2 	bl	800bb54 <tcp_rexmit>
      break;
 80097f0:	e154      	b.n	8009a9c <tcp_process+0x7a8>
 80097f2:	e153      	b.n	8009a9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa71 	bl	8009cdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80097fa:	4b2d      	ldr	r3, [pc, #180]	@ (80098b0 <tcp_process+0x5bc>)
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 814c 	beq.w	8009aa0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	8b5b      	ldrh	r3, [r3, #26]
 800980c:	f043 0302 	orr.w	r3, r3, #2
 8009810:	b29a      	uxth	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2207      	movs	r2, #7
 800981a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800981c:	e140      	b.n	8009aa0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 fa5c 	bl	8009cdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009824:	4b22      	ldr	r3, [pc, #136]	@ (80098b0 <tcp_process+0x5bc>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	f003 0320 	and.w	r3, r3, #32
 800982c:	2b00      	cmp	r3, #0
 800982e:	d071      	beq.n	8009914 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009830:	4b14      	ldr	r3, [pc, #80]	@ (8009884 <tcp_process+0x590>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d060      	beq.n	80098fe <tcp_process+0x60a>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009840:	4b11      	ldr	r3, [pc, #68]	@ (8009888 <tcp_process+0x594>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d15a      	bne.n	80098fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800984c:	2b00      	cmp	r3, #0
 800984e:	d156      	bne.n	80098fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8b5b      	ldrh	r3, [r3, #26]
 8009854:	f043 0302 	orr.w	r3, r3, #2
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fe fdbc 	bl	80083dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009864:	4b13      	ldr	r3, [pc, #76]	@ (80098b4 <tcp_process+0x5c0>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	429a      	cmp	r2, r3
 800986c:	d105      	bne.n	800987a <tcp_process+0x586>
 800986e:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <tcp_process+0x5c0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4a0f      	ldr	r2, [pc, #60]	@ (80098b4 <tcp_process+0x5c0>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	e02e      	b.n	80098d8 <tcp_process+0x5e4>
 800987a:	4b0e      	ldr	r3, [pc, #56]	@ (80098b4 <tcp_process+0x5c0>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	e027      	b.n	80098d2 <tcp_process+0x5de>
 8009882:	bf00      	nop
 8009884:	20008320 	.word	0x20008320
 8009888:	20008318 	.word	0x20008318
 800988c:	2000831e 	.word	0x2000831e
 8009890:	20008314 	.word	0x20008314
 8009894:	20008304 	.word	0x20008304
 8009898:	20004d7c 	.word	0x20004d7c
 800989c:	20004d80 	.word	0x20004d80
 80098a0:	080110d8 	.word	0x080110d8
 80098a4:	08011378 	.word	0x08011378
 80098a8:	08011124 	.word	0x08011124
 80098ac:	2000831c 	.word	0x2000831c
 80098b0:	20008321 	.word	0x20008321
 80098b4:	200082e8 	.word	0x200082e8
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d104      	bne.n	80098cc <tcp_process+0x5d8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	60da      	str	r2, [r3, #12]
 80098ca:	e005      	b.n	80098d8 <tcp_process+0x5e4>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1ef      	bne.n	80098b8 <tcp_process+0x5c4>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	60da      	str	r2, [r3, #12]
 80098de:	4b77      	ldr	r3, [pc, #476]	@ (8009abc <tcp_process+0x7c8>)
 80098e0:	2201      	movs	r2, #1
 80098e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	220a      	movs	r2, #10
 80098e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80098ea:	4b75      	ldr	r3, [pc, #468]	@ (8009ac0 <tcp_process+0x7cc>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60da      	str	r2, [r3, #12]
 80098f2:	4a73      	ldr	r2, [pc, #460]	@ (8009ac0 <tcp_process+0x7cc>)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	f002 fcf4 	bl	800c2e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80098fc:	e0d2      	b.n	8009aa4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8b5b      	ldrh	r3, [r3, #26]
 8009902:	f043 0302 	orr.w	r3, r3, #2
 8009906:	b29a      	uxth	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2208      	movs	r2, #8
 8009910:	751a      	strb	r2, [r3, #20]
      break;
 8009912:	e0c7      	b.n	8009aa4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009914:	4b6b      	ldr	r3, [pc, #428]	@ (8009ac4 <tcp_process+0x7d0>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	f003 0310 	and.w	r3, r3, #16
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 80c1 	beq.w	8009aa4 <tcp_process+0x7b0>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009926:	4b68      	ldr	r3, [pc, #416]	@ (8009ac8 <tcp_process+0x7d4>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	f040 80ba 	bne.w	8009aa4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009934:	2b00      	cmp	r3, #0
 8009936:	f040 80b5 	bne.w	8009aa4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2206      	movs	r2, #6
 800993e:	751a      	strb	r2, [r3, #20]
      break;
 8009940:	e0b0      	b.n	8009aa4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9ca 	bl	8009cdc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009948:	4b60      	ldr	r3, [pc, #384]	@ (8009acc <tcp_process+0x7d8>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	f003 0320 	and.w	r3, r3, #32
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80a9 	beq.w	8009aa8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	8b5b      	ldrh	r3, [r3, #26]
 800995a:	f043 0302 	orr.w	r3, r3, #2
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7fe fd39 	bl	80083dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800996a:	4b59      	ldr	r3, [pc, #356]	@ (8009ad0 <tcp_process+0x7dc>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d105      	bne.n	8009980 <tcp_process+0x68c>
 8009974:	4b56      	ldr	r3, [pc, #344]	@ (8009ad0 <tcp_process+0x7dc>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	4a55      	ldr	r2, [pc, #340]	@ (8009ad0 <tcp_process+0x7dc>)
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e013      	b.n	80099a8 <tcp_process+0x6b4>
 8009980:	4b53      	ldr	r3, [pc, #332]	@ (8009ad0 <tcp_process+0x7dc>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	613b      	str	r3, [r7, #16]
 8009986:	e00c      	b.n	80099a2 <tcp_process+0x6ae>
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	429a      	cmp	r2, r3
 8009990:	d104      	bne.n	800999c <tcp_process+0x6a8>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	60da      	str	r2, [r3, #12]
 800999a:	e005      	b.n	80099a8 <tcp_process+0x6b4>
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1ef      	bne.n	8009988 <tcp_process+0x694>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	60da      	str	r2, [r3, #12]
 80099ae:	4b43      	ldr	r3, [pc, #268]	@ (8009abc <tcp_process+0x7c8>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	220a      	movs	r2, #10
 80099b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80099ba:	4b41      	ldr	r3, [pc, #260]	@ (8009ac0 <tcp_process+0x7cc>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60da      	str	r2, [r3, #12]
 80099c2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ac0 <tcp_process+0x7cc>)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	f002 fc8c 	bl	800c2e4 <tcp_timer_needed>
      }
      break;
 80099cc:	e06c      	b.n	8009aa8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f984 	bl	8009cdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80099d4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac4 <tcp_process+0x7d0>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 0310 	and.w	r3, r3, #16
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d065      	beq.n	8009aac <tcp_process+0x7b8>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099e4:	4b38      	ldr	r3, [pc, #224]	@ (8009ac8 <tcp_process+0x7d4>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d15f      	bne.n	8009aac <tcp_process+0x7b8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d15b      	bne.n	8009aac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe fcf1 	bl	80083dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80099fa:	4b35      	ldr	r3, [pc, #212]	@ (8009ad0 <tcp_process+0x7dc>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d105      	bne.n	8009a10 <tcp_process+0x71c>
 8009a04:	4b32      	ldr	r3, [pc, #200]	@ (8009ad0 <tcp_process+0x7dc>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	4a31      	ldr	r2, [pc, #196]	@ (8009ad0 <tcp_process+0x7dc>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	e013      	b.n	8009a38 <tcp_process+0x744>
 8009a10:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad0 <tcp_process+0x7dc>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60fb      	str	r3, [r7, #12]
 8009a16:	e00c      	b.n	8009a32 <tcp_process+0x73e>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d104      	bne.n	8009a2c <tcp_process+0x738>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	e005      	b.n	8009a38 <tcp_process+0x744>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1ef      	bne.n	8009a18 <tcp_process+0x724>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	60da      	str	r2, [r3, #12]
 8009a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8009abc <tcp_process+0x7c8>)
 8009a40:	2201      	movs	r2, #1
 8009a42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	220a      	movs	r2, #10
 8009a48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac0 <tcp_process+0x7cc>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60da      	str	r2, [r3, #12]
 8009a52:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac0 <tcp_process+0x7cc>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	f002 fc44 	bl	800c2e4 <tcp_timer_needed>
      }
      break;
 8009a5c:	e026      	b.n	8009aac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f93c 	bl	8009cdc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009a64:	4b17      	ldr	r3, [pc, #92]	@ (8009ac4 <tcp_process+0x7d0>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d01f      	beq.n	8009ab0 <tcp_process+0x7bc>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a74:	4b14      	ldr	r3, [pc, #80]	@ (8009ac8 <tcp_process+0x7d4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d119      	bne.n	8009ab0 <tcp_process+0x7bc>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d115      	bne.n	8009ab0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009a84:	4b11      	ldr	r3, [pc, #68]	@ (8009acc <tcp_process+0x7d8>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f043 0310 	orr.w	r3, r3, #16
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009acc <tcp_process+0x7d8>)
 8009a90:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009a92:	e00d      	b.n	8009ab0 <tcp_process+0x7bc>
    default:
      break;
 8009a94:	bf00      	nop
 8009a96:	e00c      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e00a      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009a9c:	bf00      	nop
 8009a9e:	e008      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e006      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e004      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e002      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009aac:	bf00      	nop
 8009aae:	e000      	b.n	8009ab2 <tcp_process+0x7be>
      break;
 8009ab0:	bf00      	nop
  }
  return ERR_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3724      	adds	r7, #36	@ 0x24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd90      	pop	{r4, r7, pc}
 8009abc:	200082f0 	.word	0x200082f0
 8009ac0:	200082ec 	.word	0x200082ec
 8009ac4:	20008320 	.word	0x20008320
 8009ac8:	20008318 	.word	0x20008318
 8009acc:	20008321 	.word	0x20008321
 8009ad0:	200082e8 	.word	0x200082e8

08009ad4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d106      	bne.n	8009af2 <tcp_oos_insert_segment+0x1e>
 8009ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd4 <tcp_oos_insert_segment+0x100>)
 8009ae6:	f240 421f 	movw	r2, #1055	@ 0x41f
 8009aea:	493b      	ldr	r1, [pc, #236]	@ (8009bd8 <tcp_oos_insert_segment+0x104>)
 8009aec:	483b      	ldr	r0, [pc, #236]	@ (8009bdc <tcp_oos_insert_segment+0x108>)
 8009aee:	f005 fac3 	bl	800f078 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	899b      	ldrh	r3, [r3, #12]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fb fcae 	bl	800545c <lwip_htons>
 8009b00:	4603      	mov	r3, r0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d028      	beq.n	8009b5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009b0c:	6838      	ldr	r0, [r7, #0]
 8009b0e:	f7fe fa63 	bl	8007fd8 <tcp_segs_free>
    next = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	603b      	str	r3, [r7, #0]
 8009b16:	e056      	b.n	8009bc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	899b      	ldrh	r3, [r3, #12]
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fb fc9b 	bl	800545c <lwip_htons>
 8009b26:	4603      	mov	r3, r0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00d      	beq.n	8009b4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	899b      	ldrh	r3, [r3, #12]
 8009b38:	b29c      	uxth	r4, r3
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	f7fb fc8e 	bl	800545c <lwip_htons>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4322      	orrs	r2, r4
 8009b4a:	b292      	uxth	r2, r2
 8009b4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7fe fa52 	bl	8008002 <tcp_seg_free>
    while (next &&
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00e      	beq.n	8009b82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	891b      	ldrh	r3, [r3, #8]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009be0 <tcp_oos_insert_segment+0x10c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	441a      	add	r2, r3
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	8909      	ldrh	r1, [r1, #8]
 8009b7a:	440b      	add	r3, r1
 8009b7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	daca      	bge.n	8009b18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01e      	beq.n	8009bc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	891b      	ldrh	r3, [r3, #8]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4b14      	ldr	r3, [pc, #80]	@ (8009be0 <tcp_oos_insert_segment+0x10c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	441a      	add	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dd12      	ble.n	8009bc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8009be0 <tcp_oos_insert_segment+0x10c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685a      	ldr	r2, [r3, #4]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	891b      	ldrh	r3, [r3, #8]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	f7fc fe23 	bl	800680c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	601a      	str	r2, [r3, #0]
}
 8009bcc:	bf00      	nop
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd90      	pop	{r4, r7, pc}
 8009bd4:	080110d8 	.word	0x080110d8
 8009bd8:	08011398 	.word	0x08011398
 8009bdc:	08011124 	.word	0x08011124
 8009be0:	20008314 	.word	0x20008314

08009be4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009be4:	b5b0      	push	{r4, r5, r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009bf2:	e03e      	b.n	8009c72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fd f810 	bl	8006c28 <pbuf_clen>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009c12:	8a7a      	ldrh	r2, [r7, #18]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d906      	bls.n	8009c26 <tcp_free_acked_segments+0x42>
 8009c18:	4b2a      	ldr	r3, [pc, #168]	@ (8009cc4 <tcp_free_acked_segments+0xe0>)
 8009c1a:	f240 4257 	movw	r2, #1111	@ 0x457
 8009c1e:	492a      	ldr	r1, [pc, #168]	@ (8009cc8 <tcp_free_acked_segments+0xe4>)
 8009c20:	482a      	ldr	r0, [pc, #168]	@ (8009ccc <tcp_free_acked_segments+0xe8>)
 8009c22:	f005 fa29 	bl	800f078 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8009c2c:	8a7b      	ldrh	r3, [r7, #18]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	891a      	ldrh	r2, [r3, #8]
 8009c3c:	4b24      	ldr	r3, [pc, #144]	@ (8009cd0 <tcp_free_acked_segments+0xec>)
 8009c3e:	881b      	ldrh	r3, [r3, #0]
 8009c40:	4413      	add	r3, r2
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	4b22      	ldr	r3, [pc, #136]	@ (8009cd0 <tcp_free_acked_segments+0xec>)
 8009c46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009c48:	6978      	ldr	r0, [r7, #20]
 8009c4a:	f7fe f9da 	bl	8008002 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00c      	beq.n	8009c72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <tcp_free_acked_segments+0x8e>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <tcp_free_acked_segments+0x8e>
 8009c64:	4b17      	ldr	r3, [pc, #92]	@ (8009cc4 <tcp_free_acked_segments+0xe0>)
 8009c66:	f240 4261 	movw	r2, #1121	@ 0x461
 8009c6a:	491a      	ldr	r1, [pc, #104]	@ (8009cd4 <tcp_free_acked_segments+0xf0>)
 8009c6c:	4817      	ldr	r0, [pc, #92]	@ (8009ccc <tcp_free_acked_segments+0xe8>)
 8009c6e:	f005 fa03 	bl	800f078 <iprintf>
  while (seg_list != NULL &&
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d020      	beq.n	8009cba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fb fc01 	bl	8005486 <lwip_htonl>
 8009c84:	4604      	mov	r4, r0
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	891b      	ldrh	r3, [r3, #8]
 8009c8a:	461d      	mov	r5, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	899b      	ldrh	r3, [r3, #12]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fb fbe1 	bl	800545c <lwip_htons>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <tcp_free_acked_segments+0xc6>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e000      	b.n	8009cac <tcp_free_acked_segments+0xc8>
 8009caa:	2300      	movs	r3, #0
 8009cac:	442b      	add	r3, r5
 8009cae:	18e2      	adds	r2, r4, r3
 8009cb0:	4b09      	ldr	r3, [pc, #36]	@ (8009cd8 <tcp_free_acked_segments+0xf4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd9c      	ble.n	8009bf4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009cba:	68bb      	ldr	r3, [r7, #8]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc4:	080110d8 	.word	0x080110d8
 8009cc8:	080113c0 	.word	0x080113c0
 8009ccc:	08011124 	.word	0x08011124
 8009cd0:	2000831c 	.word	0x2000831c
 8009cd4:	080113e8 	.word	0x080113e8
 8009cd8:	20008318 	.word	0x20008318

08009cdc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009cdc:	b5b0      	push	{r4, r5, r7, lr}
 8009cde:	b094      	sub	sp, #80	@ 0x50
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <tcp_receive+0x20>
 8009cee:	4b91      	ldr	r3, [pc, #580]	@ (8009f34 <tcp_receive+0x258>)
 8009cf0:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009cf4:	4990      	ldr	r1, [pc, #576]	@ (8009f38 <tcp_receive+0x25c>)
 8009cf6:	4891      	ldr	r0, [pc, #580]	@ (8009f3c <tcp_receive+0x260>)
 8009cf8:	f005 f9be 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	7d1b      	ldrb	r3, [r3, #20]
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d806      	bhi.n	8009d12 <tcp_receive+0x36>
 8009d04:	4b8b      	ldr	r3, [pc, #556]	@ (8009f34 <tcp_receive+0x258>)
 8009d06:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009d0a:	498d      	ldr	r1, [pc, #564]	@ (8009f40 <tcp_receive+0x264>)
 8009d0c:	488b      	ldr	r0, [pc, #556]	@ (8009f3c <tcp_receive+0x260>)
 8009d0e:	f005 f9b3 	bl	800f078 <iprintf>

  if (flags & TCP_ACK) {
 8009d12:	4b8c      	ldr	r3, [pc, #560]	@ (8009f44 <tcp_receive+0x268>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f003 0310 	and.w	r3, r3, #16
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 8264 	beq.w	800a1e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2c:	4413      	add	r3, r2
 8009d2e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d34:	4b84      	ldr	r3, [pc, #528]	@ (8009f48 <tcp_receive+0x26c>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	db1b      	blt.n	8009d76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d42:	4b81      	ldr	r3, [pc, #516]	@ (8009f48 <tcp_receive+0x26c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d106      	bne.n	8009d58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8009f4c <tcp_receive+0x270>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	db0e      	blt.n	8009d76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8009f4c <tcp_receive+0x270>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d125      	bne.n	8009db0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009d64:	4b7a      	ldr	r3, [pc, #488]	@ (8009f50 <tcp_receive+0x274>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	89db      	ldrh	r3, [r3, #14]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d91c      	bls.n	8009db0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009d76:	4b76      	ldr	r3, [pc, #472]	@ (8009f50 <tcp_receive+0x274>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	89db      	ldrh	r3, [r3, #14]
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d205      	bcs.n	8009da0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009da0:	4b69      	ldr	r3, [pc, #420]	@ (8009f48 <tcp_receive+0x26c>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009da8:	4b68      	ldr	r3, [pc, #416]	@ (8009f4c <tcp_receive+0x270>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009db0:	4b66      	ldr	r3, [pc, #408]	@ (8009f4c <tcp_receive+0x270>)
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dc58      	bgt.n	8009e70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009dbe:	4b65      	ldr	r3, [pc, #404]	@ (8009f54 <tcp_receive+0x278>)
 8009dc0:	881b      	ldrh	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d14b      	bne.n	8009e5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009dd0:	4413      	add	r3, r2
 8009dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d142      	bne.n	8009e5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	db3d      	blt.n	8009e5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009de6:	4b59      	ldr	r3, [pc, #356]	@ (8009f4c <tcp_receive+0x270>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d137      	bne.n	8009e5e <tcp_receive+0x182>
              found_dupack = 1;
 8009dee:	2301      	movs	r3, #1
 8009df0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009df8:	2bff      	cmp	r3, #255	@ 0xff
 8009dfa:	d007      	beq.n	8009e0c <tcp_receive+0x130>
                ++pcb->dupacks;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e02:	3301      	adds	r3, #1
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d91b      	bls.n	8009e4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e20:	4413      	add	r3, r2
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d30a      	bcc.n	8009e44 <tcp_receive+0x168>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e38:	4413      	add	r3, r2
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009e42:	e004      	b.n	8009e4e <tcp_receive+0x172>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d902      	bls.n	8009e5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f001 fee7 	bl	800bc2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f040 8161 	bne.w	800a128 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e6e:	e15b      	b.n	800a128 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e70:	4b36      	ldr	r3, [pc, #216]	@ (8009f4c <tcp_receive+0x270>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f2c0 814e 	blt.w	800a11e <tcp_receive+0x442>
 8009e82:	4b32      	ldr	r3, [pc, #200]	@ (8009f4c <tcp_receive+0x270>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f300 8146 	bgt.w	800a11e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	8b5b      	ldrh	r3, [r3, #26]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d010      	beq.n	8009ec0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	8b5b      	ldrh	r3, [r3, #26]
 8009ea2:	f023 0304 	bic.w	r3, r3, #4
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009ece:	10db      	asrs	r3, r3, #3
 8009ed0:	b21b      	sxth	r3, r3
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	4413      	add	r3, r2
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	b21a      	sxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009ee8:	4b18      	ldr	r3, [pc, #96]	@ (8009f4c <tcp_receive+0x270>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	1ad3      	subs	r3, r2, r3
 8009ef6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009f00:	4b12      	ldr	r3, [pc, #72]	@ (8009f4c <tcp_receive+0x270>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7d1b      	ldrb	r3, [r3, #20]
 8009f0c:	2b03      	cmp	r3, #3
 8009f0e:	f240 8097 	bls.w	800a040 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d245      	bcs.n	8009fae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	8b5b      	ldrh	r3, [r3, #26]
 8009f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d014      	beq.n	8009f58 <tcp_receive+0x27c>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e013      	b.n	8009f5a <tcp_receive+0x27e>
 8009f32:	bf00      	nop
 8009f34:	080110d8 	.word	0x080110d8
 8009f38:	08011408 	.word	0x08011408
 8009f3c:	08011124 	.word	0x08011124
 8009f40:	08011424 	.word	0x08011424
 8009f44:	20008320 	.word	0x20008320
 8009f48:	20008314 	.word	0x20008314
 8009f4c:	20008318 	.word	0x20008318
 8009f50:	20008304 	.word	0x20008304
 8009f54:	2000831e 	.word	0x2000831e
 8009f58:	2302      	movs	r3, #2
 8009f5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f68:	fb12 f303 	smulbb	r3, r2, r3
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009f70:	4293      	cmp	r3, r2
 8009f72:	bf28      	it	cs
 8009f74:	4613      	movcs	r3, r2
 8009f76:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009f80:	4413      	add	r3, r2
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d309      	bcc.n	8009fa2 <tcp_receive+0x2c6>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009f96:	4413      	add	r3, r2
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009fa0:	e04e      	b.n	800a040 <tcp_receive+0x364>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009fa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009fac:	e048      	b.n	800a040 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009fb4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009fb6:	4413      	add	r3, r2
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d309      	bcc.n	8009fd8 <tcp_receive+0x2fc>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009fca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009fcc:	4413      	add	r3, r2
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009fd6:	e004      	b.n	8009fe2 <tcp_receive+0x306>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009fde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d326      	bcc.n	800a040 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	b29a      	uxth	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a012:	4413      	add	r3, r2
 800a014:	b29a      	uxth	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d30a      	bcc.n	800a036 <tcp_receive+0x35a>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a02a:	4413      	add	r3, r2
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a034:	e004      	b.n	800a040 <tcp_receive+0x364>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a03c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a048:	4a98      	ldr	r2, [pc, #608]	@ (800a2ac <tcp_receive+0x5d0>)
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff fdca 	bl	8009be4 <tcp_free_acked_segments>
 800a050:	4602      	mov	r2, r0
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a05e:	4a94      	ldr	r2, [pc, #592]	@ (800a2b0 <tcp_receive+0x5d4>)
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff fdbf 	bl	8009be4 <tcp_free_acked_segments>
 800a066:	4602      	mov	r2, r0
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a07a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a07c:	e002      	b.n	800a084 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a0a0:	4b84      	ldr	r3, [pc, #528]	@ (800a2b4 <tcp_receive+0x5d8>)
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	8b5b      	ldrh	r3, [r3, #26]
 800a0b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d035      	beq.n	800a126 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d118      	bne.n	800a0f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00c      	beq.n	800a0e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fb f9d5 	bl	8005486 <lwip_htonl>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc20      	bgt.n	800a126 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	8b5b      	ldrh	r3, [r3, #26]
 800a0e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a0f2:	e018      	b.n	800a126 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	f7fb f9c0 	bl	8005486 <lwip_htonl>
 800a106:	4603      	mov	r3, r0
 800a108:	1ae3      	subs	r3, r4, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dc0b      	bgt.n	800a126 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8b5b      	ldrh	r3, [r3, #26]
 800a112:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a11c:	e003      	b.n	800a126 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 ff70 	bl	800c004 <tcp_send_empty_ack>
 800a124:	e000      	b.n	800a128 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a126:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d05b      	beq.n	800a1e8 <tcp_receive+0x50c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a134:	4b60      	ldr	r3, [pc, #384]	@ (800a2b8 <tcp_receive+0x5dc>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da54      	bge.n	800a1e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a13e:	4b5f      	ldr	r3, [pc, #380]	@ (800a2bc <tcp_receive+0x5e0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	b29a      	uxth	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a148:	b29b      	uxth	r3, r3
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a152:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a15c:	10db      	asrs	r3, r3, #3
 800a15e:	b21b      	sxth	r3, r3
 800a160:	b29b      	uxth	r3, r3
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	b29b      	uxth	r3, r3
 800a166:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a170:	b29a      	uxth	r2, r3
 800a172:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a176:	4413      	add	r3, r2
 800a178:	b29b      	uxth	r3, r3
 800a17a:	b21a      	sxth	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a180:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a184:	2b00      	cmp	r3, #0
 800a186:	da05      	bge.n	800a194 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a18c:	425b      	negs	r3, r3
 800a18e:	b29b      	uxth	r3, r3
 800a190:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a194:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a19e:	109b      	asrs	r3, r3, #2
 800a1a0:	b21b      	sxth	r3, r3
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a1b8:	4413      	add	r3, r2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	b21a      	sxth	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a1c8:	10db      	asrs	r3, r3, #3
 800a1ca:	b21b      	sxth	r3, r3
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4413      	add	r3, r2
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	b21a      	sxth	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a1e8:	4b35      	ldr	r3, [pc, #212]	@ (800a2c0 <tcp_receive+0x5e4>)
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 84df 	beq.w	800abb0 <tcp_receive+0xed4>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7d1b      	ldrb	r3, [r3, #20]
 800a1f6:	2b06      	cmp	r3, #6
 800a1f8:	f200 84da 	bhi.w	800abb0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a200:	4b30      	ldr	r3, [pc, #192]	@ (800a2c4 <tcp_receive+0x5e8>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f2c0 808f 	blt.w	800a32c <tcp_receive+0x650>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a212:	4b2b      	ldr	r3, [pc, #172]	@ (800a2c0 <tcp_receive+0x5e4>)
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	4b2a      	ldr	r3, [pc, #168]	@ (800a2c4 <tcp_receive+0x5e8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	440b      	add	r3, r1
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	3301      	adds	r3, #1
 800a222:	2b00      	cmp	r3, #0
 800a224:	f300 8082 	bgt.w	800a32c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a228:	4b27      	ldr	r3, [pc, #156]	@ (800a2c8 <tcp_receive+0x5ec>)
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a232:	4b24      	ldr	r3, [pc, #144]	@ (800a2c4 <tcp_receive+0x5e8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a23a:	4b23      	ldr	r3, [pc, #140]	@ (800a2c8 <tcp_receive+0x5ec>)
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <tcp_receive+0x574>
 800a242:	4b22      	ldr	r3, [pc, #136]	@ (800a2cc <tcp_receive+0x5f0>)
 800a244:	f240 5294 	movw	r2, #1428	@ 0x594
 800a248:	4921      	ldr	r1, [pc, #132]	@ (800a2d0 <tcp_receive+0x5f4>)
 800a24a:	4822      	ldr	r0, [pc, #136]	@ (800a2d4 <tcp_receive+0x5f8>)
 800a24c:	f004 ff14 	bl	800f078 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a252:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a256:	4293      	cmp	r3, r2
 800a258:	d906      	bls.n	800a268 <tcp_receive+0x58c>
 800a25a:	4b1c      	ldr	r3, [pc, #112]	@ (800a2cc <tcp_receive+0x5f0>)
 800a25c:	f240 5295 	movw	r2, #1429	@ 0x595
 800a260:	491d      	ldr	r1, [pc, #116]	@ (800a2d8 <tcp_receive+0x5fc>)
 800a262:	481c      	ldr	r0, [pc, #112]	@ (800a2d4 <tcp_receive+0x5f8>)
 800a264:	f004 ff08 	bl	800f078 <iprintf>
      off = (u16_t)off32;
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a26e:	4b16      	ldr	r3, [pc, #88]	@ (800a2c8 <tcp_receive+0x5ec>)
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	891b      	ldrh	r3, [r3, #8]
 800a274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a278:	429a      	cmp	r2, r3
 800a27a:	d906      	bls.n	800a28a <tcp_receive+0x5ae>
 800a27c:	4b13      	ldr	r3, [pc, #76]	@ (800a2cc <tcp_receive+0x5f0>)
 800a27e:	f240 5297 	movw	r2, #1431	@ 0x597
 800a282:	4916      	ldr	r1, [pc, #88]	@ (800a2dc <tcp_receive+0x600>)
 800a284:	4813      	ldr	r0, [pc, #76]	@ (800a2d4 <tcp_receive+0x5f8>)
 800a286:	f004 fef7 	bl	800f078 <iprintf>
      inseg.len -= off;
 800a28a:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c8 <tcp_receive+0x5ec>)
 800a28c:	891a      	ldrh	r2, [r3, #8]
 800a28e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	b29a      	uxth	r2, r3
 800a296:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <tcp_receive+0x5ec>)
 800a298:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a29a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c8 <tcp_receive+0x5ec>)
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	891a      	ldrh	r2, [r3, #8]
 800a2a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a2a8:	e02a      	b.n	800a300 <tcp_receive+0x624>
 800a2aa:	bf00      	nop
 800a2ac:	08011440 	.word	0x08011440
 800a2b0:	08011448 	.word	0x08011448
 800a2b4:	2000831c 	.word	0x2000831c
 800a2b8:	20008318 	.word	0x20008318
 800a2bc:	200082dc 	.word	0x200082dc
 800a2c0:	2000831e 	.word	0x2000831e
 800a2c4:	20008314 	.word	0x20008314
 800a2c8:	200082f4 	.word	0x200082f4
 800a2cc:	080110d8 	.word	0x080110d8
 800a2d0:	08011450 	.word	0x08011450
 800a2d4:	08011124 	.word	0x08011124
 800a2d8:	08011460 	.word	0x08011460
 800a2dc:	08011470 	.word	0x08011470
        off -= p->len;
 800a2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2e2:	895b      	ldrh	r3, [r3, #10]
 800a2e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a2ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a2f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a2f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a2fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a302:	895b      	ldrh	r3, [r3, #10]
 800a304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a308:	429a      	cmp	r2, r3
 800a30a:	d8e9      	bhi.n	800a2e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a30c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a310:	4619      	mov	r1, r3
 800a312:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a314:	f7fc fb7a 	bl	8006a0c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a31c:	4a90      	ldr	r2, [pc, #576]	@ (800a560 <tcp_receive+0x884>)
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	4b90      	ldr	r3, [pc, #576]	@ (800a564 <tcp_receive+0x888>)
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	4a8e      	ldr	r2, [pc, #568]	@ (800a560 <tcp_receive+0x884>)
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a32a:	e00d      	b.n	800a348 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a32c:	4b8c      	ldr	r3, [pc, #560]	@ (800a560 <tcp_receive+0x884>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	da06      	bge.n	800a348 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8b5b      	ldrh	r3, [r3, #26]
 800a33e:	f043 0302 	orr.w	r3, r3, #2
 800a342:	b29a      	uxth	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a348:	4b85      	ldr	r3, [pc, #532]	@ (800a560 <tcp_receive+0x884>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	f2c0 8427 	blt.w	800aba6 <tcp_receive+0xeca>
 800a358:	4b81      	ldr	r3, [pc, #516]	@ (800a560 <tcp_receive+0x884>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a364:	440b      	add	r3, r1
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	3301      	adds	r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f300 841b 	bgt.w	800aba6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a374:	4b7a      	ldr	r3, [pc, #488]	@ (800a560 <tcp_receive+0x884>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	429a      	cmp	r2, r3
 800a37a:	f040 8298 	bne.w	800a8ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a37e:	4b79      	ldr	r3, [pc, #484]	@ (800a564 <tcp_receive+0x888>)
 800a380:	891c      	ldrh	r4, [r3, #8]
 800a382:	4b78      	ldr	r3, [pc, #480]	@ (800a564 <tcp_receive+0x888>)
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	899b      	ldrh	r3, [r3, #12]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fb f866 	bl	800545c <lwip_htons>
 800a390:	4603      	mov	r3, r0
 800a392:	b2db      	uxtb	r3, r3
 800a394:	f003 0303 	and.w	r3, r3, #3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <tcp_receive+0x6c4>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e000      	b.n	800a3a2 <tcp_receive+0x6c6>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4423      	add	r3, r4
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	4b70      	ldr	r3, [pc, #448]	@ (800a568 <tcp_receive+0x88c>)
 800a3a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a3ae:	4b6e      	ldr	r3, [pc, #440]	@ (800a568 <tcp_receive+0x88c>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d274      	bcs.n	800a4a0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a3b6:	4b6b      	ldr	r3, [pc, #428]	@ (800a564 <tcp_receive+0x888>)
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	899b      	ldrh	r3, [r3, #12]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fb f84c 	bl	800545c <lwip_htons>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01e      	beq.n	800a40e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a3d0:	4b64      	ldr	r3, [pc, #400]	@ (800a564 <tcp_receive+0x888>)
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	899b      	ldrh	r3, [r3, #12]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	b21b      	sxth	r3, r3
 800a3da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a3de:	b21c      	sxth	r4, r3
 800a3e0:	4b60      	ldr	r3, [pc, #384]	@ (800a564 <tcp_receive+0x888>)
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	899b      	ldrh	r3, [r3, #12]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fb f837 	bl	800545c <lwip_htons>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fb f82f 	bl	800545c <lwip_htons>
 800a3fe:	4603      	mov	r3, r0
 800a400:	b21b      	sxth	r3, r3
 800a402:	4323      	orrs	r3, r4
 800a404:	b21a      	sxth	r2, r3
 800a406:	4b57      	ldr	r3, [pc, #348]	@ (800a564 <tcp_receive+0x888>)
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	b292      	uxth	r2, r2
 800a40c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a412:	4b54      	ldr	r3, [pc, #336]	@ (800a564 <tcp_receive+0x888>)
 800a414:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a416:	4b53      	ldr	r3, [pc, #332]	@ (800a564 <tcp_receive+0x888>)
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	899b      	ldrh	r3, [r3, #12]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fb f81c 	bl	800545c <lwip_htons>
 800a424:	4603      	mov	r3, r0
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f003 0302 	and.w	r3, r3, #2
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <tcp_receive+0x760>
            inseg.len -= 1;
 800a430:	4b4c      	ldr	r3, [pc, #304]	@ (800a564 <tcp_receive+0x888>)
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	3b01      	subs	r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	4b4a      	ldr	r3, [pc, #296]	@ (800a564 <tcp_receive+0x888>)
 800a43a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a43c:	4b49      	ldr	r3, [pc, #292]	@ (800a564 <tcp_receive+0x888>)
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4a48      	ldr	r2, [pc, #288]	@ (800a564 <tcp_receive+0x888>)
 800a442:	8912      	ldrh	r2, [r2, #8]
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f7fc f9e0 	bl	800680c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a44c:	4b45      	ldr	r3, [pc, #276]	@ (800a564 <tcp_receive+0x888>)
 800a44e:	891c      	ldrh	r4, [r3, #8]
 800a450:	4b44      	ldr	r3, [pc, #272]	@ (800a564 <tcp_receive+0x888>)
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	899b      	ldrh	r3, [r3, #12]
 800a456:	b29b      	uxth	r3, r3
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fa ffff 	bl	800545c <lwip_htons>
 800a45e:	4603      	mov	r3, r0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <tcp_receive+0x792>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <tcp_receive+0x794>
 800a46e:	2300      	movs	r3, #0
 800a470:	4423      	add	r3, r4
 800a472:	b29a      	uxth	r2, r3
 800a474:	4b3c      	ldr	r3, [pc, #240]	@ (800a568 <tcp_receive+0x88c>)
 800a476:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a478:	4b3b      	ldr	r3, [pc, #236]	@ (800a568 <tcp_receive+0x88c>)
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	461a      	mov	r2, r3
 800a47e:	4b38      	ldr	r3, [pc, #224]	@ (800a560 <tcp_receive+0x884>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	441a      	add	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a48c:	440b      	add	r3, r1
 800a48e:	429a      	cmp	r2, r3
 800a490:	d006      	beq.n	800a4a0 <tcp_receive+0x7c4>
 800a492:	4b36      	ldr	r3, [pc, #216]	@ (800a56c <tcp_receive+0x890>)
 800a494:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a498:	4935      	ldr	r1, [pc, #212]	@ (800a570 <tcp_receive+0x894>)
 800a49a:	4836      	ldr	r0, [pc, #216]	@ (800a574 <tcp_receive+0x898>)
 800a49c:	f004 fdec 	bl	800f078 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 80e6 	beq.w	800a676 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	@ (800a564 <tcp_receive+0x888>)
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	899b      	ldrh	r3, [r3, #12]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fa ffd2 	bl	800545c <lwip_htons>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d010      	beq.n	800a4e6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a4c4:	e00a      	b.n	800a4dc <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ca:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f7fd fd93 	bl	8008002 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1f0      	bne.n	800a4c6 <tcp_receive+0x7ea>
 800a4e4:	e0c7      	b.n	800a676 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a4ec:	e051      	b.n	800a592 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	899b      	ldrh	r3, [r3, #12]
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fa ffb0 	bl	800545c <lwip_htons>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	f003 0301 	and.w	r3, r3, #1
 800a504:	2b00      	cmp	r3, #0
 800a506:	d03c      	beq.n	800a582 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a508:	4b16      	ldr	r3, [pc, #88]	@ (800a564 <tcp_receive+0x888>)
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	899b      	ldrh	r3, [r3, #12]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	4618      	mov	r0, r3
 800a512:	f7fa ffa3 	bl	800545c <lwip_htons>
 800a516:	4603      	mov	r3, r0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d12f      	bne.n	800a582 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a522:	4b10      	ldr	r3, [pc, #64]	@ (800a564 <tcp_receive+0x888>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	899b      	ldrh	r3, [r3, #12]
 800a528:	b29c      	uxth	r4, r3
 800a52a:	2001      	movs	r0, #1
 800a52c:	f7fa ff96 	bl	800545c <lwip_htons>
 800a530:	4603      	mov	r3, r0
 800a532:	461a      	mov	r2, r3
 800a534:	4b0b      	ldr	r3, [pc, #44]	@ (800a564 <tcp_receive+0x888>)
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	4322      	orrs	r2, r4
 800a53a:	b292      	uxth	r2, r2
 800a53c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a53e:	4b09      	ldr	r3, [pc, #36]	@ (800a564 <tcp_receive+0x888>)
 800a540:	891c      	ldrh	r4, [r3, #8]
 800a542:	4b08      	ldr	r3, [pc, #32]	@ (800a564 <tcp_receive+0x888>)
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	899b      	ldrh	r3, [r3, #12]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fa ff86 	bl	800545c <lwip_htons>
 800a550:	4603      	mov	r3, r0
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 0303 	and.w	r3, r3, #3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00d      	beq.n	800a578 <tcp_receive+0x89c>
 800a55c:	2301      	movs	r3, #1
 800a55e:	e00c      	b.n	800a57a <tcp_receive+0x89e>
 800a560:	20008314 	.word	0x20008314
 800a564:	200082f4 	.word	0x200082f4
 800a568:	2000831e 	.word	0x2000831e
 800a56c:	080110d8 	.word	0x080110d8
 800a570:	08011480 	.word	0x08011480
 800a574:	08011124 	.word	0x08011124
 800a578:	2300      	movs	r3, #0
 800a57a:	4423      	add	r3, r4
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	4b98      	ldr	r3, [pc, #608]	@ (800a7e0 <tcp_receive+0xb04>)
 800a580:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a584:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a58c:	6938      	ldr	r0, [r7, #16]
 800a58e:	f7fd fd38 	bl	8008002 <tcp_seg_free>
            while (next &&
 800a592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00e      	beq.n	800a5b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a598:	4b91      	ldr	r3, [pc, #580]	@ (800a7e0 <tcp_receive+0xb04>)
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	4b91      	ldr	r3, [pc, #580]	@ (800a7e4 <tcp_receive+0xb08>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	441a      	add	r2, r3
 800a5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5ac:	8909      	ldrh	r1, [r1, #8]
 800a5ae:	440b      	add	r3, r1
 800a5b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	da9b      	bge.n	800a4ee <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a5b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d059      	beq.n	800a670 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a5bc:	4b88      	ldr	r3, [pc, #544]	@ (800a7e0 <tcp_receive+0xb04>)
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4b88      	ldr	r3, [pc, #544]	@ (800a7e4 <tcp_receive+0xb08>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	441a      	add	r2, r3
 800a5c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dd4d      	ble.n	800a670 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	4b81      	ldr	r3, [pc, #516]	@ (800a7e4 <tcp_receive+0xb08>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	4b80      	ldr	r3, [pc, #512]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a5e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a5ea:	4b7f      	ldr	r3, [pc, #508]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	899b      	ldrh	r3, [r3, #12]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fa ff32 	bl	800545c <lwip_htons>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <tcp_receive+0x934>
                inseg.len -= 1;
 800a604:	4b78      	ldr	r3, [pc, #480]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a606:	891b      	ldrh	r3, [r3, #8]
 800a608:	3b01      	subs	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	4b76      	ldr	r3, [pc, #472]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a60e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a610:	4b75      	ldr	r3, [pc, #468]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	4a74      	ldr	r2, [pc, #464]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a616:	8912      	ldrh	r2, [r2, #8]
 800a618:	4611      	mov	r1, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fc f8f6 	bl	800680c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a620:	4b71      	ldr	r3, [pc, #452]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a622:	891c      	ldrh	r4, [r3, #8]
 800a624:	4b70      	ldr	r3, [pc, #448]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	899b      	ldrh	r3, [r3, #12]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fa ff15 	bl	800545c <lwip_htons>
 800a632:	4603      	mov	r3, r0
 800a634:	b2db      	uxtb	r3, r3
 800a636:	f003 0303 	and.w	r3, r3, #3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <tcp_receive+0x966>
 800a63e:	2301      	movs	r3, #1
 800a640:	e000      	b.n	800a644 <tcp_receive+0x968>
 800a642:	2300      	movs	r3, #0
 800a644:	4423      	add	r3, r4
 800a646:	b29a      	uxth	r2, r3
 800a648:	4b65      	ldr	r3, [pc, #404]	@ (800a7e0 <tcp_receive+0xb04>)
 800a64a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a64c:	4b64      	ldr	r3, [pc, #400]	@ (800a7e0 <tcp_receive+0xb04>)
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	4b64      	ldr	r3, [pc, #400]	@ (800a7e4 <tcp_receive+0xb08>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	441a      	add	r2, r3
 800a658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d006      	beq.n	800a670 <tcp_receive+0x994>
 800a662:	4b62      	ldr	r3, [pc, #392]	@ (800a7ec <tcp_receive+0xb10>)
 800a664:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a668:	4961      	ldr	r1, [pc, #388]	@ (800a7f0 <tcp_receive+0xb14>)
 800a66a:	4862      	ldr	r0, [pc, #392]	@ (800a7f4 <tcp_receive+0xb18>)
 800a66c:	f004 fd04 	bl	800f078 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a674:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a676:	4b5a      	ldr	r3, [pc, #360]	@ (800a7e0 <tcp_receive+0xb04>)
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	461a      	mov	r2, r3
 800a67c:	4b59      	ldr	r3, [pc, #356]	@ (800a7e4 <tcp_receive+0xb08>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	441a      	add	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a68a:	4b55      	ldr	r3, [pc, #340]	@ (800a7e0 <tcp_receive+0xb04>)
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d206      	bcs.n	800a6a0 <tcp_receive+0x9c4>
 800a692:	4b56      	ldr	r3, [pc, #344]	@ (800a7ec <tcp_receive+0xb10>)
 800a694:	f240 6207 	movw	r2, #1543	@ 0x607
 800a698:	4957      	ldr	r1, [pc, #348]	@ (800a7f8 <tcp_receive+0xb1c>)
 800a69a:	4856      	ldr	r0, [pc, #344]	@ (800a7f4 <tcp_receive+0xb18>)
 800a69c:	f004 fcec 	bl	800f078 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a6a4:	4b4e      	ldr	r3, [pc, #312]	@ (800a7e0 <tcp_receive+0xb04>)
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	1ad3      	subs	r3, r2, r3
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7fc ffc5 	bl	8007640 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a6b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	891b      	ldrh	r3, [r3, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d006      	beq.n	800a6ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a6c0:	4b49      	ldr	r3, [pc, #292]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	4a4d      	ldr	r2, [pc, #308]	@ (800a7fc <tcp_receive+0xb20>)
 800a6c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a6c8:	4b47      	ldr	r3, [pc, #284]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6ce:	4b46      	ldr	r3, [pc, #280]	@ (800a7e8 <tcp_receive+0xb0c>)
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	899b      	ldrh	r3, [r3, #12]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fa fec0 	bl	800545c <lwip_htons>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 80b8 	beq.w	800a85a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a6ea:	4b45      	ldr	r3, [pc, #276]	@ (800a800 <tcp_receive+0xb24>)
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	f043 0320 	orr.w	r3, r3, #32
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	4b42      	ldr	r3, [pc, #264]	@ (800a800 <tcp_receive+0xb24>)
 800a6f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a6f8:	e0af      	b.n	800a85a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	4a36      	ldr	r2, [pc, #216]	@ (800a7e4 <tcp_receive+0xb08>)
 800a70a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	891b      	ldrh	r3, [r3, #8]
 800a710:	461c      	mov	r4, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	899b      	ldrh	r3, [r3, #12]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fa fe9e 	bl	800545c <lwip_htons>
 800a720:	4603      	mov	r3, r0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <tcp_receive+0xa54>
 800a72c:	2301      	movs	r3, #1
 800a72e:	e000      	b.n	800a732 <tcp_receive+0xa56>
 800a730:	2300      	movs	r3, #0
 800a732:	191a      	adds	r2, r3, r4
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	441a      	add	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a742:	461c      	mov	r4, r3
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	891b      	ldrh	r3, [r3, #8]
 800a748:	461d      	mov	r5, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	899b      	ldrh	r3, [r3, #12]
 800a750:	b29b      	uxth	r3, r3
 800a752:	4618      	mov	r0, r3
 800a754:	f7fa fe82 	bl	800545c <lwip_htons>
 800a758:	4603      	mov	r3, r0
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f003 0303 	and.w	r3, r3, #3
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <tcp_receive+0xa8c>
 800a764:	2301      	movs	r3, #1
 800a766:	e000      	b.n	800a76a <tcp_receive+0xa8e>
 800a768:	2300      	movs	r3, #0
 800a76a:	442b      	add	r3, r5
 800a76c:	429c      	cmp	r4, r3
 800a76e:	d206      	bcs.n	800a77e <tcp_receive+0xaa2>
 800a770:	4b1e      	ldr	r3, [pc, #120]	@ (800a7ec <tcp_receive+0xb10>)
 800a772:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a776:	4923      	ldr	r1, [pc, #140]	@ (800a804 <tcp_receive+0xb28>)
 800a778:	481e      	ldr	r0, [pc, #120]	@ (800a7f4 <tcp_receive+0xb18>)
 800a77a:	f004 fc7d 	bl	800f078 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	891b      	ldrh	r3, [r3, #8]
 800a782:	461c      	mov	r4, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	899b      	ldrh	r3, [r3, #12]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fa fe65 	bl	800545c <lwip_htons>
 800a792:	4603      	mov	r3, r0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <tcp_receive+0xac6>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <tcp_receive+0xac8>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	1919      	adds	r1, r3, r4
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a7aa:	b28b      	uxth	r3, r1
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7fc ff43 	bl	8007640 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	891b      	ldrh	r3, [r3, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d028      	beq.n	800a816 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a7fc <tcp_receive+0xb20>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01d      	beq.n	800a808 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a7fc <tcp_receive+0xb20>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	f7fc fa60 	bl	8006c9c <pbuf_cat>
 800a7dc:	e018      	b.n	800a810 <tcp_receive+0xb34>
 800a7de:	bf00      	nop
 800a7e0:	2000831e 	.word	0x2000831e
 800a7e4:	20008314 	.word	0x20008314
 800a7e8:	200082f4 	.word	0x200082f4
 800a7ec:	080110d8 	.word	0x080110d8
 800a7f0:	080114b8 	.word	0x080114b8
 800a7f4:	08011124 	.word	0x08011124
 800a7f8:	080114f4 	.word	0x080114f4
 800a7fc:	20008324 	.word	0x20008324
 800a800:	20008321 	.word	0x20008321
 800a804:	08011514 	.word	0x08011514
            } else {
              recv_data = cseg->p;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	4a70      	ldr	r2, [pc, #448]	@ (800a9d0 <tcp_receive+0xcf4>)
 800a80e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	899b      	ldrh	r3, [r3, #12]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fa fe1c 	bl	800545c <lwip_htons>
 800a824:	4603      	mov	r3, r0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00d      	beq.n	800a84c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a830:	4b68      	ldr	r3, [pc, #416]	@ (800a9d4 <tcp_receive+0xcf8>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	f043 0320 	orr.w	r3, r3, #32
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	4b66      	ldr	r3, [pc, #408]	@ (800a9d4 <tcp_receive+0xcf8>)
 800a83c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7d1b      	ldrb	r3, [r3, #20]
 800a842:	2b04      	cmp	r3, #4
 800a844:	d102      	bne.n	800a84c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2207      	movs	r2, #7
 800a84a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a854:	68b8      	ldr	r0, [r7, #8]
 800a856:	f7fd fbd4 	bl	8008002 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d008      	beq.n	800a874 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a86e:	429a      	cmp	r2, r3
 800a870:	f43f af43 	beq.w	800a6fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	8b5b      	ldrh	r3, [r3, #26]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00e      	beq.n	800a89e <tcp_receive+0xbc2>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8b5b      	ldrh	r3, [r3, #26]
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	835a      	strh	r2, [r3, #26]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8b5b      	ldrh	r3, [r3, #26]
 800a892:	f043 0302 	orr.w	r3, r3, #2
 800a896:	b29a      	uxth	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a89c:	e187      	b.n	800abae <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	8b5b      	ldrh	r3, [r3, #26]
 800a8a2:	f043 0301 	orr.w	r3, r3, #1
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a8ac:	e17f      	b.n	800abae <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a8b6:	4848      	ldr	r0, [pc, #288]	@ (800a9d8 <tcp_receive+0xcfc>)
 800a8b8:	f7fd fbbc 	bl	8008034 <tcp_seg_copy>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	675a      	str	r2, [r3, #116]	@ 0x74
 800a8c2:	e16c      	b.n	800ab9e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8ce:	e156      	b.n	800ab7e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b41      	ldr	r3, [pc, #260]	@ (800a9dc <tcp_receive+0xd00>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d11d      	bne.n	800a91a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a8de:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d8 <tcp_receive+0xcfc>)
 800a8e0:	891a      	ldrh	r2, [r3, #8]
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	891b      	ldrh	r3, [r3, #8]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	f240 814e 	bls.w	800ab88 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a8ec:	483a      	ldr	r0, [pc, #232]	@ (800a9d8 <tcp_receive+0xcfc>)
 800a8ee:	f7fd fba1 	bl	8008034 <tcp_seg_copy>
 800a8f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 8148 	beq.w	800ab8c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e002      	b.n	800a910 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a910:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a912:	6978      	ldr	r0, [r7, #20]
 800a914:	f7ff f8de 	bl	8009ad4 <tcp_oos_insert_segment>
                }
                break;
 800a918:	e138      	b.n	800ab8c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d117      	bne.n	800a950 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a920:	4b2e      	ldr	r3, [pc, #184]	@ (800a9dc <tcp_receive+0xd00>)
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da57      	bge.n	800a9e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a930:	4829      	ldr	r0, [pc, #164]	@ (800a9d8 <tcp_receive+0xcfc>)
 800a932:	f7fd fb7f 	bl	8008034 <tcp_seg_copy>
 800a936:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 8128 	beq.w	800ab90 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a946:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a948:	69b8      	ldr	r0, [r7, #24]
 800a94a:	f7ff f8c3 	bl	8009ad4 <tcp_oos_insert_segment>
                  }
                  break;
 800a94e:	e11f      	b.n	800ab90 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a950:	4b22      	ldr	r3, [pc, #136]	@ (800a9dc <tcp_receive+0xd00>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	3b01      	subs	r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	db3e      	blt.n	800a9e0 <tcp_receive+0xd04>
 800a962:	4b1e      	ldr	r3, [pc, #120]	@ (800a9dc <tcp_receive+0xd00>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	3301      	adds	r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	dc35      	bgt.n	800a9e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a974:	4818      	ldr	r0, [pc, #96]	@ (800a9d8 <tcp_receive+0xcfc>)
 800a976:	f7fd fb5d 	bl	8008034 <tcp_seg_copy>
 800a97a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 8108 	beq.w	800ab94 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a98c:	8912      	ldrh	r2, [r2, #8]
 800a98e:	441a      	add	r2, r3
 800a990:	4b12      	ldr	r3, [pc, #72]	@ (800a9dc <tcp_receive+0xd00>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	dd12      	ble.n	800a9c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a99a:	4b10      	ldr	r3, [pc, #64]	@ (800a9dc <tcp_receive+0xd00>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	685a      	ldr	r2, [r3, #4]
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b6:	891b      	ldrh	r3, [r3, #8]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7fb ff26 	bl	800680c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c2:	69fa      	ldr	r2, [r7, #28]
 800a9c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a9c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9c8:	69f8      	ldr	r0, [r7, #28]
 800a9ca:	f7ff f883 	bl	8009ad4 <tcp_oos_insert_segment>
                  }
                  break;
 800a9ce:	e0e1      	b.n	800ab94 <tcp_receive+0xeb8>
 800a9d0:	20008324 	.word	0x20008324
 800a9d4:	20008321 	.word	0x20008321
 800a9d8:	200082f4 	.word	0x200082f4
 800a9dc:	20008314 	.word	0x20008314
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 80c5 	bne.w	800ab78 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a9ee:	4b7f      	ldr	r3, [pc, #508]	@ (800abec <tcp_receive+0xf10>)
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f340 80bc 	ble.w	800ab78 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	899b      	ldrh	r3, [r3, #12]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fa fd27 	bl	800545c <lwip_htons>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f040 80be 	bne.w	800ab98 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800aa1c:	4874      	ldr	r0, [pc, #464]	@ (800abf0 <tcp_receive+0xf14>)
 800aa1e:	f7fd fb09 	bl	8008034 <tcp_seg_copy>
 800aa22:	4602      	mov	r2, r0
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800aa28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80b5 	beq.w	800ab9c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800aa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa3a:	8912      	ldrh	r2, [r2, #8]
 800aa3c:	441a      	add	r2, r3
 800aa3e:	4b6b      	ldr	r3, [pc, #428]	@ (800abec <tcp_receive+0xf10>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd12      	ble.n	800aa6e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800aa48:	4b68      	ldr	r3, [pc, #416]	@ (800abec <tcp_receive+0xf10>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa64:	891b      	ldrh	r3, [r3, #8]
 800aa66:	4619      	mov	r1, r3
 800aa68:	4610      	mov	r0, r2
 800aa6a:	f7fb fecf 	bl	800680c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800aa6e:	4b61      	ldr	r3, [pc, #388]	@ (800abf4 <tcp_receive+0xf18>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	4b5d      	ldr	r3, [pc, #372]	@ (800abec <tcp_receive+0xf10>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	441a      	add	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800aa82:	440b      	add	r3, r1
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f340 8088 	ble.w	800ab9c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	899b      	ldrh	r3, [r3, #12]
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fa fce0 	bl	800545c <lwip_htons>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d021      	beq.n	800aaec <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	899b      	ldrh	r3, [r3, #12]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	b21b      	sxth	r3, r3
 800aab4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aab8:	b21c      	sxth	r4, r3
 800aaba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	899b      	ldrh	r3, [r3, #12]
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7fa fcc9 	bl	800545c <lwip_htons>
 800aaca:	4603      	mov	r3, r0
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fa fcc1 	bl	800545c <lwip_htons>
 800aada:	4603      	mov	r3, r0
 800aadc:	b21b      	sxth	r3, r3
 800aade:	4323      	orrs	r3, r4
 800aae0:	b21a      	sxth	r2, r3
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	b292      	uxth	r2, r2
 800aaea:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaf6:	4413      	add	r3, r2
 800aaf8:	b299      	uxth	r1, r3
 800aafa:	4b3c      	ldr	r3, [pc, #240]	@ (800abec <tcp_receive+0xf10>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	1a8a      	subs	r2, r1, r2
 800ab06:	b292      	uxth	r2, r2
 800ab08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	685a      	ldr	r2, [r3, #4]
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	891b      	ldrh	r3, [r3, #8]
 800ab16:	4619      	mov	r1, r3
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f7fb fe77 	bl	800680c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	891c      	ldrh	r4, [r3, #8]
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	899b      	ldrh	r3, [r3, #12]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fa fc94 	bl	800545c <lwip_htons>
 800ab34:	4603      	mov	r3, r0
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <tcp_receive+0xe68>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e000      	b.n	800ab46 <tcp_receive+0xe6a>
 800ab44:	2300      	movs	r3, #0
 800ab46:	4423      	add	r3, r4
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	4b2a      	ldr	r3, [pc, #168]	@ (800abf4 <tcp_receive+0xf18>)
 800ab4c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ab4e:	4b29      	ldr	r3, [pc, #164]	@ (800abf4 <tcp_receive+0xf18>)
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	4b25      	ldr	r3, [pc, #148]	@ (800abec <tcp_receive+0xf10>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ab62:	440b      	add	r3, r1
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d019      	beq.n	800ab9c <tcp_receive+0xec0>
 800ab68:	4b23      	ldr	r3, [pc, #140]	@ (800abf8 <tcp_receive+0xf1c>)
 800ab6a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ab6e:	4923      	ldr	r1, [pc, #140]	@ (800abfc <tcp_receive+0xf20>)
 800ab70:	4823      	ldr	r0, [pc, #140]	@ (800ac00 <tcp_receive+0xf24>)
 800ab72:	f004 fa81 	bl	800f078 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ab76:	e011      	b.n	800ab9c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f47f aea5 	bne.w	800a8d0 <tcp_receive+0xbf4>
 800ab86:	e00a      	b.n	800ab9e <tcp_receive+0xec2>
                break;
 800ab88:	bf00      	nop
 800ab8a:	e008      	b.n	800ab9e <tcp_receive+0xec2>
                break;
 800ab8c:	bf00      	nop
 800ab8e:	e006      	b.n	800ab9e <tcp_receive+0xec2>
                  break;
 800ab90:	bf00      	nop
 800ab92:	e004      	b.n	800ab9e <tcp_receive+0xec2>
                  break;
 800ab94:	bf00      	nop
 800ab96:	e002      	b.n	800ab9e <tcp_receive+0xec2>
                  break;
 800ab98:	bf00      	nop
 800ab9a:	e000      	b.n	800ab9e <tcp_receive+0xec2>
                break;
 800ab9c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 fa30 	bl	800c004 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800aba4:	e003      	b.n	800abae <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 fa2c 	bl	800c004 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800abac:	e01a      	b.n	800abe4 <tcp_receive+0xf08>
 800abae:	e019      	b.n	800abe4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800abb0:	4b0e      	ldr	r3, [pc, #56]	@ (800abec <tcp_receive+0xf10>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	db0a      	blt.n	800abd4 <tcp_receive+0xef8>
 800abbe:	4b0b      	ldr	r3, [pc, #44]	@ (800abec <tcp_receive+0xf10>)
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800abca:	440b      	add	r3, r1
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	3301      	adds	r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dd07      	ble.n	800abe4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8b5b      	ldrh	r3, [r3, #26]
 800abd8:	f043 0302 	orr.w	r3, r3, #2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800abe2:	e7ff      	b.n	800abe4 <tcp_receive+0xf08>
 800abe4:	bf00      	nop
 800abe6:	3750      	adds	r7, #80	@ 0x50
 800abe8:	46bd      	mov	sp, r7
 800abea:	bdb0      	pop	{r4, r5, r7, pc}
 800abec:	20008314 	.word	0x20008314
 800abf0:	200082f4 	.word	0x200082f4
 800abf4:	2000831e 	.word	0x2000831e
 800abf8:	080110d8 	.word	0x080110d8
 800abfc:	08011480 	.word	0x08011480
 800ac00:	08011124 	.word	0x08011124

0800ac04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ac0a:	4b15      	ldr	r3, [pc, #84]	@ (800ac60 <tcp_get_next_optbyte+0x5c>)
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	b291      	uxth	r1, r2
 800ac12:	4a13      	ldr	r2, [pc, #76]	@ (800ac60 <tcp_get_next_optbyte+0x5c>)
 800ac14:	8011      	strh	r1, [r2, #0]
 800ac16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ac18:	4b12      	ldr	r3, [pc, #72]	@ (800ac64 <tcp_get_next_optbyte+0x60>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <tcp_get_next_optbyte+0x26>
 800ac20:	4b11      	ldr	r3, [pc, #68]	@ (800ac68 <tcp_get_next_optbyte+0x64>)
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	88fa      	ldrh	r2, [r7, #6]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d208      	bcs.n	800ac3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ac2a:	4b10      	ldr	r3, [pc, #64]	@ (800ac6c <tcp_get_next_optbyte+0x68>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3314      	adds	r3, #20
 800ac30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ac32:	88fb      	ldrh	r3, [r7, #6]
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	4413      	add	r3, r2
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	e00b      	b.n	800ac54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ac3c:	88fb      	ldrh	r3, [r7, #6]
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	4b09      	ldr	r3, [pc, #36]	@ (800ac68 <tcp_get_next_optbyte+0x64>)
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ac4a:	4b06      	ldr	r3, [pc, #24]	@ (800ac64 <tcp_get_next_optbyte+0x60>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	797b      	ldrb	r3, [r7, #5]
 800ac50:	4413      	add	r3, r2
 800ac52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr
 800ac60:	20008310 	.word	0x20008310
 800ac64:	2000830c 	.word	0x2000830c
 800ac68:	2000830a 	.word	0x2000830a
 800ac6c:	20008304 	.word	0x20008304

0800ac70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <tcp_parseopt+0x1c>
 800ac7e:	4b32      	ldr	r3, [pc, #200]	@ (800ad48 <tcp_parseopt+0xd8>)
 800ac80:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ac84:	4931      	ldr	r1, [pc, #196]	@ (800ad4c <tcp_parseopt+0xdc>)
 800ac86:	4832      	ldr	r0, [pc, #200]	@ (800ad50 <tcp_parseopt+0xe0>)
 800ac88:	f004 f9f6 	bl	800f078 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ac8c:	4b31      	ldr	r3, [pc, #196]	@ (800ad54 <tcp_parseopt+0xe4>)
 800ac8e:	881b      	ldrh	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d056      	beq.n	800ad42 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ac94:	4b30      	ldr	r3, [pc, #192]	@ (800ad58 <tcp_parseopt+0xe8>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	e046      	b.n	800ad2a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800ac9c:	f7ff ffb2 	bl	800ac04 <tcp_get_next_optbyte>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d006      	beq.n	800acb8 <tcp_parseopt+0x48>
 800acaa:	2b02      	cmp	r3, #2
 800acac:	dc2a      	bgt.n	800ad04 <tcp_parseopt+0x94>
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d042      	beq.n	800ad38 <tcp_parseopt+0xc8>
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d038      	beq.n	800ad28 <tcp_parseopt+0xb8>
 800acb6:	e025      	b.n	800ad04 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800acb8:	f7ff ffa4 	bl	800ac04 <tcp_get_next_optbyte>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d13c      	bne.n	800ad3c <tcp_parseopt+0xcc>
 800acc2:	4b25      	ldr	r3, [pc, #148]	@ (800ad58 <tcp_parseopt+0xe8>)
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	3301      	adds	r3, #1
 800acc8:	4a22      	ldr	r2, [pc, #136]	@ (800ad54 <tcp_parseopt+0xe4>)
 800acca:	8812      	ldrh	r2, [r2, #0]
 800accc:	4293      	cmp	r3, r2
 800acce:	da35      	bge.n	800ad3c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800acd0:	f7ff ff98 	bl	800ac04 <tcp_get_next_optbyte>
 800acd4:	4603      	mov	r3, r0
 800acd6:	021b      	lsls	r3, r3, #8
 800acd8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800acda:	f7ff ff93 	bl	800ac04 <tcp_get_next_optbyte>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	89bb      	ldrh	r3, [r7, #12]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ace8:	89bb      	ldrh	r3, [r7, #12]
 800acea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800acee:	d804      	bhi.n	800acfa <tcp_parseopt+0x8a>
 800acf0:	89bb      	ldrh	r3, [r7, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <tcp_parseopt+0x8a>
 800acf6:	89ba      	ldrh	r2, [r7, #12]
 800acf8:	e001      	b.n	800acfe <tcp_parseopt+0x8e>
 800acfa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ad02:	e012      	b.n	800ad2a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ad04:	f7ff ff7e 	bl	800ac04 <tcp_get_next_optbyte>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ad0c:	7afb      	ldrb	r3, [r7, #11]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d916      	bls.n	800ad40 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ad12:	7afb      	ldrb	r3, [r7, #11]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	4b10      	ldr	r3, [pc, #64]	@ (800ad58 <tcp_parseopt+0xe8>)
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	3b02      	subs	r3, #2
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <tcp_parseopt+0xe8>)
 800ad24:	801a      	strh	r2, [r3, #0]
 800ad26:	e000      	b.n	800ad2a <tcp_parseopt+0xba>
          break;
 800ad28:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <tcp_parseopt+0xe8>)
 800ad2c:	881a      	ldrh	r2, [r3, #0]
 800ad2e:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <tcp_parseopt+0xe4>)
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d3b2      	bcc.n	800ac9c <tcp_parseopt+0x2c>
 800ad36:	e004      	b.n	800ad42 <tcp_parseopt+0xd2>
          return;
 800ad38:	bf00      	nop
 800ad3a:	e002      	b.n	800ad42 <tcp_parseopt+0xd2>
            return;
 800ad3c:	bf00      	nop
 800ad3e:	e000      	b.n	800ad42 <tcp_parseopt+0xd2>
            return;
 800ad40:	bf00      	nop
      }
    }
  }
}
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	080110d8 	.word	0x080110d8
 800ad4c:	0801153c 	.word	0x0801153c
 800ad50:	08011124 	.word	0x08011124
 800ad54:	20008308 	.word	0x20008308
 800ad58:	20008310 	.word	0x20008310

0800ad5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ad60:	4b05      	ldr	r3, [pc, #20]	@ (800ad78 <tcp_trigger_input_pcb_close+0x1c>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	f043 0310 	orr.w	r3, r3, #16
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	4b03      	ldr	r3, [pc, #12]	@ (800ad78 <tcp_trigger_input_pcb_close+0x1c>)
 800ad6c:	701a      	strb	r2, [r3, #0]
}
 800ad6e:	bf00      	nop
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	20008321 	.word	0x20008321

0800ad7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <tcp_route+0x28>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	7a1b      	ldrb	r3, [r3, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d006      	beq.n	800ada4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	7a1b      	ldrb	r3, [r3, #8]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fb fb5c 	bl	8006458 <netif_get_by_index>
 800ada0:	4603      	mov	r3, r0
 800ada2:	e003      	b.n	800adac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f002 fe7b 	bl	800daa0 <ip4_route>
 800adaa:	4603      	mov	r3, r0
  }
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800adb4:	b590      	push	{r4, r7, lr}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	603b      	str	r3, [r7, #0]
 800adc0:	4613      	mov	r3, r2
 800adc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d105      	bne.n	800add6 <tcp_create_segment+0x22>
 800adca:	4b43      	ldr	r3, [pc, #268]	@ (800aed8 <tcp_create_segment+0x124>)
 800adcc:	22a3      	movs	r2, #163	@ 0xa3
 800adce:	4943      	ldr	r1, [pc, #268]	@ (800aedc <tcp_create_segment+0x128>)
 800add0:	4843      	ldr	r0, [pc, #268]	@ (800aee0 <tcp_create_segment+0x12c>)
 800add2:	f004 f951 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d105      	bne.n	800ade8 <tcp_create_segment+0x34>
 800addc:	4b3e      	ldr	r3, [pc, #248]	@ (800aed8 <tcp_create_segment+0x124>)
 800adde:	22a4      	movs	r2, #164	@ 0xa4
 800ade0:	4940      	ldr	r1, [pc, #256]	@ (800aee4 <tcp_create_segment+0x130>)
 800ade2:	483f      	ldr	r0, [pc, #252]	@ (800aee0 <tcp_create_segment+0x12c>)
 800ade4:	f004 f948 	bl	800f078 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ade8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800adf6:	2003      	movs	r0, #3
 800adf8:	f7fa ffa8 	bl	8005d4c <memp_malloc>
 800adfc:	6138      	str	r0, [r7, #16]
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ae04:	68b8      	ldr	r0, [r7, #8]
 800ae06:	f7fb fe87 	bl	8006b18 <pbuf_free>
    return NULL;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e060      	b.n	800aed0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ae14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	891a      	ldrh	r2, [r3, #8]
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d205      	bcs.n	800ae3a <tcp_create_segment+0x86>
 800ae2e:	4b2a      	ldr	r3, [pc, #168]	@ (800aed8 <tcp_create_segment+0x124>)
 800ae30:	22b0      	movs	r2, #176	@ 0xb0
 800ae32:	492d      	ldr	r1, [pc, #180]	@ (800aee8 <tcp_create_segment+0x134>)
 800ae34:	482a      	ldr	r0, [pc, #168]	@ (800aee0 <tcp_create_segment+0x12c>)
 800ae36:	f004 f91f 	bl	800f078 <iprintf>
  seg->len = p->tot_len - optlen;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	891a      	ldrh	r2, [r3, #8]
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ae4a:	2114      	movs	r1, #20
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	f7fb fdcd 	bl	80069ec <pbuf_add_header>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ae58:	6938      	ldr	r0, [r7, #16]
 800ae5a:	f7fd f8d2 	bl	8008002 <tcp_seg_free>
    return NULL;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e036      	b.n	800aed0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8ada      	ldrh	r2, [r3, #22]
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	68dc      	ldr	r4, [r3, #12]
 800ae74:	4610      	mov	r0, r2
 800ae76:	f7fa faf1 	bl	800545c <lwip_htons>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8b1a      	ldrh	r2, [r3, #24]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	68dc      	ldr	r4, [r3, #12]
 800ae86:	4610      	mov	r0, r2
 800ae88:	f7fa fae8 	bl	800545c <lwip_htons>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	68dc      	ldr	r4, [r3, #12]
 800ae94:	6838      	ldr	r0, [r7, #0]
 800ae96:	f7fa faf6 	bl	8005486 <lwip_htonl>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	089b      	lsrs	r3, r3, #2
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	3305      	adds	r3, #5
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	031b      	lsls	r3, r3, #12
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	b29a      	uxth	r2, r3
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	68dc      	ldr	r4, [r3, #12]
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f7fa facf 	bl	800545c <lwip_htons>
 800aebe:	4603      	mov	r3, r0
 800aec0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	749a      	strb	r2, [r3, #18]
 800aeca:	2200      	movs	r2, #0
 800aecc:	74da      	strb	r2, [r3, #19]
  return seg;
 800aece:	693b      	ldr	r3, [r7, #16]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd90      	pop	{r4, r7, pc}
 800aed8:	08011558 	.word	0x08011558
 800aedc:	0801158c 	.word	0x0801158c
 800aee0:	080115ac 	.word	0x080115ac
 800aee4:	080115d4 	.word	0x080115d4
 800aee8:	080115f8 	.word	0x080115f8

0800aeec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800aeec:	b590      	push	{r4, r7, lr}
 800aeee:	b08b      	sub	sp, #44	@ 0x2c
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	61fb      	str	r3, [r7, #28]
 800aefc:	2300      	movs	r3, #0
 800aefe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800af00:	2300      	movs	r3, #0
 800af02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <tcp_split_unsent_seg+0x2c>
 800af0a:	4b95      	ldr	r3, [pc, #596]	@ (800b160 <tcp_split_unsent_seg+0x274>)
 800af0c:	f240 324b 	movw	r2, #843	@ 0x34b
 800af10:	4994      	ldr	r1, [pc, #592]	@ (800b164 <tcp_split_unsent_seg+0x278>)
 800af12:	4895      	ldr	r0, [pc, #596]	@ (800b168 <tcp_split_unsent_seg+0x27c>)
 800af14:	f004 f8b0 	bl	800f078 <iprintf>

  useg = pcb->unsent;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	e116      	b.n	800b158 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800af2a:	887b      	ldrh	r3, [r7, #2]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800af30:	4b8b      	ldr	r3, [pc, #556]	@ (800b160 <tcp_split_unsent_seg+0x274>)
 800af32:	f240 3253 	movw	r2, #851	@ 0x353
 800af36:	498d      	ldr	r1, [pc, #564]	@ (800b16c <tcp_split_unsent_seg+0x280>)
 800af38:	488b      	ldr	r0, [pc, #556]	@ (800b168 <tcp_split_unsent_seg+0x27c>)
 800af3a:	f004 f89d 	bl	800f078 <iprintf>
    return ERR_VAL;
 800af3e:	f06f 0305 	mvn.w	r3, #5
 800af42:	e109      	b.n	800b158 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	891b      	ldrh	r3, [r3, #8]
 800af48:	887a      	ldrh	r2, [r7, #2]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d301      	bcc.n	800af52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	e102      	b.n	800b158 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af56:	887a      	ldrh	r2, [r7, #2]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d906      	bls.n	800af6a <tcp_split_unsent_seg+0x7e>
 800af5c:	4b80      	ldr	r3, [pc, #512]	@ (800b160 <tcp_split_unsent_seg+0x274>)
 800af5e:	f240 325b 	movw	r2, #859	@ 0x35b
 800af62:	4983      	ldr	r1, [pc, #524]	@ (800b170 <tcp_split_unsent_seg+0x284>)
 800af64:	4880      	ldr	r0, [pc, #512]	@ (800b168 <tcp_split_unsent_seg+0x27c>)
 800af66:	f004 f887 	bl	800f078 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	891b      	ldrh	r3, [r3, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <tcp_split_unsent_seg+0x94>
 800af72:	4b7b      	ldr	r3, [pc, #492]	@ (800b160 <tcp_split_unsent_seg+0x274>)
 800af74:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800af78:	497e      	ldr	r1, [pc, #504]	@ (800b174 <tcp_split_unsent_seg+0x288>)
 800af7a:	487b      	ldr	r0, [pc, #492]	@ (800b168 <tcp_split_unsent_seg+0x27c>)
 800af7c:	f004 f87c 	bl	800f078 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	7a9b      	ldrb	r3, [r3, #10]
 800af84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	891a      	ldrh	r2, [r3, #8]
 800af96:	887b      	ldrh	r3, [r7, #2]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	89bb      	ldrh	r3, [r7, #12]
 800afa2:	4413      	add	r3, r2
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800afaa:	4619      	mov	r1, r3
 800afac:	2036      	movs	r0, #54	@ 0x36
 800afae:	f7fb facf 	bl	8006550 <pbuf_alloc>
 800afb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 80b7 	beq.w	800b12a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	891a      	ldrh	r2, [r3, #8]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	891b      	ldrh	r3, [r3, #8]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	b29a      	uxth	r2, r3
 800afca:	887b      	ldrh	r3, [r7, #2]
 800afcc:	4413      	add	r3, r2
 800afce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	6858      	ldr	r0, [r3, #4]
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	18d1      	adds	r1, r2, r3
 800afdc:	897b      	ldrh	r3, [r7, #10]
 800afde:	89ba      	ldrh	r2, [r7, #12]
 800afe0:	f7fb ff84 	bl	8006eec <pbuf_copy_partial>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	89bb      	ldrh	r3, [r7, #12]
 800afea:	4293      	cmp	r3, r2
 800afec:	f040 809f 	bne.w	800b12e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	899b      	ldrh	r3, [r3, #12]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fa fa2f 	bl	800545c <lwip_htons>
 800affe:	4603      	mov	r3, r0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b006:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b008:	2300      	movs	r3, #0
 800b00a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b00c:	7efb      	ldrb	r3, [r7, #27]
 800b00e:	f003 0308 	and.w	r3, r3, #8
 800b012:	2b00      	cmp	r3, #0
 800b014:	d007      	beq.n	800b026 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b016:	7efb      	ldrb	r3, [r7, #27]
 800b018:	f023 0308 	bic.w	r3, r3, #8
 800b01c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b01e:	7ebb      	ldrb	r3, [r7, #26]
 800b020:	f043 0308 	orr.w	r3, r3, #8
 800b024:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b026:	7efb      	ldrb	r3, [r7, #27]
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d007      	beq.n	800b040 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b030:	7efb      	ldrb	r3, [r7, #27]
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b038:	7ebb      	ldrb	r3, [r7, #26]
 800b03a:	f043 0301 	orr.w	r3, r3, #1
 800b03e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	4618      	mov	r0, r3
 800b048:	f7fa fa1d 	bl	8005486 <lwip_htonl>
 800b04c:	4602      	mov	r2, r0
 800b04e:	887b      	ldrh	r3, [r7, #2]
 800b050:	18d1      	adds	r1, r2, r3
 800b052:	7eba      	ldrb	r2, [r7, #26]
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	460b      	mov	r3, r1
 800b05a:	6939      	ldr	r1, [r7, #16]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff fea9 	bl	800adb4 <tcp_create_segment>
 800b062:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d063      	beq.n	800b132 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fb fdda 	bl	8006c28 <pbuf_clen>
 800b074:	4603      	mov	r3, r0
 800b076:	461a      	mov	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b07e:	1a9b      	subs	r3, r3, r2
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	6858      	ldr	r0, [r3, #4]
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	891a      	ldrh	r2, [r3, #8]
 800b092:	89bb      	ldrh	r3, [r7, #12]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	b29b      	uxth	r3, r3
 800b098:	4619      	mov	r1, r3
 800b09a:	f7fb fbb7 	bl	800680c <pbuf_realloc>
  useg->len -= remainder;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	891a      	ldrh	r2, [r3, #8]
 800b0a2:	89bb      	ldrh	r3, [r7, #12]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	899b      	ldrh	r3, [r3, #12]
 800b0b2:	b29c      	uxth	r4, r3
 800b0b4:	7efb      	ldrb	r3, [r7, #27]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fa f9cf 	bl	800545c <lwip_htons>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	4322      	orrs	r2, r4
 800b0c8:	b292      	uxth	r2, r2
 800b0ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fb fda9 	bl	8006c28 <pbuf_clen>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	461a      	mov	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0e0:	4413      	add	r3, r2
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fb fd9a 	bl	8006c28 <pbuf_clen>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b0fe:	4413      	add	r3, r2
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	69fa      	ldr	r2, [r7, #28]
 800b114:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d103      	bne.n	800b126 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b126:	2300      	movs	r3, #0
 800b128:	e016      	b.n	800b158 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b12a:	bf00      	nop
 800b12c:	e002      	b.n	800b134 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b12e:	bf00      	nop
 800b130:	e000      	b.n	800b134 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b132:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d006      	beq.n	800b148 <tcp_split_unsent_seg+0x25c>
 800b13a:	4b09      	ldr	r3, [pc, #36]	@ (800b160 <tcp_split_unsent_seg+0x274>)
 800b13c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b140:	490d      	ldr	r1, [pc, #52]	@ (800b178 <tcp_split_unsent_seg+0x28c>)
 800b142:	4809      	ldr	r0, [pc, #36]	@ (800b168 <tcp_split_unsent_seg+0x27c>)
 800b144:	f003 ff98 	bl	800f078 <iprintf>
  if (p != NULL) {
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b14e:	6938      	ldr	r0, [r7, #16]
 800b150:	f7fb fce2 	bl	8006b18 <pbuf_free>
  }

  return ERR_MEM;
 800b154:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3724      	adds	r7, #36	@ 0x24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd90      	pop	{r4, r7, pc}
 800b160:	08011558 	.word	0x08011558
 800b164:	080118ec 	.word	0x080118ec
 800b168:	080115ac 	.word	0x080115ac
 800b16c:	08011910 	.word	0x08011910
 800b170:	08011934 	.word	0x08011934
 800b174:	08011944 	.word	0x08011944
 800b178:	08011954 	.word	0x08011954

0800b17c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b17c:	b590      	push	{r4, r7, lr}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <tcp_send_fin+0x1c>
 800b18a:	4b21      	ldr	r3, [pc, #132]	@ (800b210 <tcp_send_fin+0x94>)
 800b18c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b190:	4920      	ldr	r1, [pc, #128]	@ (800b214 <tcp_send_fin+0x98>)
 800b192:	4821      	ldr	r0, [pc, #132]	@ (800b218 <tcp_send_fin+0x9c>)
 800b194:	f003 ff70 	bl	800f078 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d02e      	beq.n	800b1fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1a4:	60fb      	str	r3, [r7, #12]
 800b1a6:	e002      	b.n	800b1ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1f8      	bne.n	800b1a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	899b      	ldrh	r3, [r3, #12]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fa f94c 	bl	800545c <lwip_htons>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	f003 0307 	and.w	r3, r3, #7
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d116      	bne.n	800b1fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	899b      	ldrh	r3, [r3, #12]
 800b1d6:	b29c      	uxth	r4, r3
 800b1d8:	2001      	movs	r0, #1
 800b1da:	f7fa f93f 	bl	800545c <lwip_htons>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	4322      	orrs	r2, r4
 800b1e8:	b292      	uxth	r2, r2
 800b1ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	8b5b      	ldrh	r3, [r3, #26]
 800b1f0:	f043 0320 	orr.w	r3, r3, #32
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e004      	b.n	800b208 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b1fe:	2101      	movs	r1, #1
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f80b 	bl	800b21c <tcp_enqueue_flags>
 800b206:	4603      	mov	r3, r0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd90      	pop	{r4, r7, pc}
 800b210:	08011558 	.word	0x08011558
 800b214:	08011960 	.word	0x08011960
 800b218:	080115ac 	.word	0x080115ac

0800b21c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	@ 0x28
 800b220:	af02      	add	r7, sp, #8
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	f003 0303 	and.w	r3, r3, #3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <tcp_enqueue_flags+0x2c>
 800b23a:	4b67      	ldr	r3, [pc, #412]	@ (800b3d8 <tcp_enqueue_flags+0x1bc>)
 800b23c:	f240 4211 	movw	r2, #1041	@ 0x411
 800b240:	4966      	ldr	r1, [pc, #408]	@ (800b3dc <tcp_enqueue_flags+0x1c0>)
 800b242:	4867      	ldr	r0, [pc, #412]	@ (800b3e0 <tcp_enqueue_flags+0x1c4>)
 800b244:	f003 ff18 	bl	800f078 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <tcp_enqueue_flags+0x40>
 800b24e:	4b62      	ldr	r3, [pc, #392]	@ (800b3d8 <tcp_enqueue_flags+0x1bc>)
 800b250:	f240 4213 	movw	r2, #1043	@ 0x413
 800b254:	4963      	ldr	r1, [pc, #396]	@ (800b3e4 <tcp_enqueue_flags+0x1c8>)
 800b256:	4862      	ldr	r0, [pc, #392]	@ (800b3e0 <tcp_enqueue_flags+0x1c4>)
 800b258:	f003 ff0e 	bl	800f078 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b25c:	78fb      	ldrb	r3, [r7, #3]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d001      	beq.n	800b26a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b266:	2301      	movs	r3, #1
 800b268:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b26a:	7ffb      	ldrb	r3, [r7, #31]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b27e:	4619      	mov	r1, r3
 800b280:	2036      	movs	r0, #54	@ 0x36
 800b282:	f7fb f965 	bl	8006550 <pbuf_alloc>
 800b286:	6138      	str	r0, [r7, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d109      	bne.n	800b2a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	8b5b      	ldrh	r3, [r3, #26]
 800b292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b29c:	f04f 33ff 	mov.w	r3, #4294967295
 800b2a0:	e095      	b.n	800b3ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	895a      	ldrh	r2, [r3, #10]
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d206      	bcs.n	800b2bc <tcp_enqueue_flags+0xa0>
 800b2ae:	4b4a      	ldr	r3, [pc, #296]	@ (800b3d8 <tcp_enqueue_flags+0x1bc>)
 800b2b0:	f240 4239 	movw	r2, #1081	@ 0x439
 800b2b4:	494c      	ldr	r1, [pc, #304]	@ (800b3e8 <tcp_enqueue_flags+0x1cc>)
 800b2b6:	484a      	ldr	r0, [pc, #296]	@ (800b3e0 <tcp_enqueue_flags+0x1c4>)
 800b2b8:	f003 fede 	bl	800f078 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b2c0:	78fa      	ldrb	r2, [r7, #3]
 800b2c2:	7ffb      	ldrb	r3, [r7, #31]
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	6939      	ldr	r1, [r7, #16]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff fd72 	bl	800adb4 <tcp_create_segment>
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d109      	bne.n	800b2ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8b5b      	ldrh	r3, [r3, #26]
 800b2dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ea:	e070      	b.n	800b3ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f003 0303 	and.w	r3, r3, #3
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d006      	beq.n	800b306 <tcp_enqueue_flags+0xea>
 800b2f8:	4b37      	ldr	r3, [pc, #220]	@ (800b3d8 <tcp_enqueue_flags+0x1bc>)
 800b2fa:	f240 4242 	movw	r2, #1090	@ 0x442
 800b2fe:	493b      	ldr	r1, [pc, #236]	@ (800b3ec <tcp_enqueue_flags+0x1d0>)
 800b300:	4837      	ldr	r0, [pc, #220]	@ (800b3e0 <tcp_enqueue_flags+0x1c4>)
 800b302:	f003 feb9 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	891b      	ldrh	r3, [r3, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <tcp_enqueue_flags+0x100>
 800b30e:	4b32      	ldr	r3, [pc, #200]	@ (800b3d8 <tcp_enqueue_flags+0x1bc>)
 800b310:	f240 4243 	movw	r2, #1091	@ 0x443
 800b314:	4936      	ldr	r1, [pc, #216]	@ (800b3f0 <tcp_enqueue_flags+0x1d4>)
 800b316:	4832      	ldr	r0, [pc, #200]	@ (800b3e0 <tcp_enqueue_flags+0x1c4>)
 800b318:	f003 feae 	bl	800f078 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d103      	bne.n	800b32c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b32a:	e00d      	b.n	800b348 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b330:	61bb      	str	r3, [r7, #24]
 800b332:	e002      	b.n	800b33a <tcp_enqueue_flags+0x11e>
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	61bb      	str	r3, [r7, #24]
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1f8      	bne.n	800b334 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d104      	bne.n	800b364 <tcp_enqueue_flags+0x148>
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	2b00      	cmp	r3, #0
 800b362:	d004      	beq.n	800b36e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b36e:	78fb      	ldrb	r3, [r7, #3]
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	d006      	beq.n	800b386 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	8b5b      	ldrh	r3, [r3, #26]
 800b37c:	f043 0320 	orr.w	r3, r3, #32
 800b380:	b29a      	uxth	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fb fc4c 	bl	8006c28 <pbuf_clen>
 800b390:	4603      	mov	r3, r0
 800b392:	461a      	mov	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b39a:	4413      	add	r3, r2
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00e      	beq.n	800b3cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10a      	bne.n	800b3cc <tcp_enqueue_flags+0x1b0>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d106      	bne.n	800b3cc <tcp_enqueue_flags+0x1b0>
 800b3be:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <tcp_enqueue_flags+0x1bc>)
 800b3c0:	f240 4265 	movw	r2, #1125	@ 0x465
 800b3c4:	490b      	ldr	r1, [pc, #44]	@ (800b3f4 <tcp_enqueue_flags+0x1d8>)
 800b3c6:	4806      	ldr	r0, [pc, #24]	@ (800b3e0 <tcp_enqueue_flags+0x1c4>)
 800b3c8:	f003 fe56 	bl	800f078 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3720      	adds	r7, #32
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	08011558 	.word	0x08011558
 800b3dc:	0801197c 	.word	0x0801197c
 800b3e0:	080115ac 	.word	0x080115ac
 800b3e4:	080119d4 	.word	0x080119d4
 800b3e8:	080119f4 	.word	0x080119f4
 800b3ec:	08011a30 	.word	0x08011a30
 800b3f0:	08011a48 	.word	0x08011a48
 800b3f4:	08011a74 	.word	0x08011a74

0800b3f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b3f8:	b5b0      	push	{r4, r5, r7, lr}
 800b3fa:	b08a      	sub	sp, #40	@ 0x28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <tcp_output+0x1c>
 800b406:	4b8a      	ldr	r3, [pc, #552]	@ (800b630 <tcp_output+0x238>)
 800b408:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b40c:	4989      	ldr	r1, [pc, #548]	@ (800b634 <tcp_output+0x23c>)
 800b40e:	488a      	ldr	r0, [pc, #552]	@ (800b638 <tcp_output+0x240>)
 800b410:	f003 fe32 	bl	800f078 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7d1b      	ldrb	r3, [r3, #20]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d106      	bne.n	800b42a <tcp_output+0x32>
 800b41c:	4b84      	ldr	r3, [pc, #528]	@ (800b630 <tcp_output+0x238>)
 800b41e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b422:	4986      	ldr	r1, [pc, #536]	@ (800b63c <tcp_output+0x244>)
 800b424:	4884      	ldr	r0, [pc, #528]	@ (800b638 <tcp_output+0x240>)
 800b426:	f003 fe27 	bl	800f078 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b42a:	4b85      	ldr	r3, [pc, #532]	@ (800b640 <tcp_output+0x248>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d101      	bne.n	800b438 <tcp_output+0x40>
    return ERR_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	e1ce      	b.n	800b7d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b444:	4293      	cmp	r3, r2
 800b446:	bf28      	it	cs
 800b448:	4613      	movcs	r3, r2
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b452:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10b      	bne.n	800b472 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	8b5b      	ldrh	r3, [r3, #26]
 800b45e:	f003 0302 	and.w	r3, r3, #2
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 81aa 	beq.w	800b7bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fdcb 	bl	800c004 <tcp_send_empty_ack>
 800b46e:	4603      	mov	r3, r0
 800b470:	e1b1      	b.n	800b7d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3304      	adds	r3, #4
 800b478:	461a      	mov	r2, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7ff fc7e 	bl	800ad7c <tcp_route>
 800b480:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d102      	bne.n	800b48e <tcp_output+0x96>
    return ERR_RTE;
 800b488:	f06f 0303 	mvn.w	r3, #3
 800b48c:	e1a3      	b.n	800b7d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <tcp_output+0xa4>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d111      	bne.n	800b4c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <tcp_output+0xb0>
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	e000      	b.n	800b4aa <tcp_output+0xb2>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d102      	bne.n	800b4b8 <tcp_output+0xc0>
      return ERR_RTE;
 800b4b2:	f06f 0303 	mvn.w	r3, #3
 800b4b6:	e18e      	b.n	800b7d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7f9 ffdd 	bl	8005486 <lwip_htonl>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4d2:	1ad3      	subs	r3, r2, r3
 800b4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4d6:	8912      	ldrh	r2, [r2, #8]
 800b4d8:	4413      	add	r3, r2
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d227      	bcs.n	800b530 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d114      	bne.n	800b518 <tcp_output+0x120>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d110      	bne.n	800b518 <tcp_output+0x120>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10b      	bne.n	800b518 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	8b5b      	ldrh	r3, [r3, #26]
 800b51c:	f003 0302 	and.w	r3, r3, #2
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 814d 	beq.w	800b7c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fd6c 	bl	800c004 <tcp_send_empty_ack>
 800b52c:	4603      	mov	r3, r0
 800b52e:	e152      	b.n	800b7d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b53c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 811c 	beq.w	800b77e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b546:	e002      	b.n	800b54e <tcp_output+0x156>
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	623b      	str	r3, [r7, #32]
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1f8      	bne.n	800b548 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b556:	e112      	b.n	800b77e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	899b      	ldrh	r3, [r3, #12]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	4618      	mov	r0, r3
 800b562:	f7f9 ff7b 	bl	800545c <lwip_htons>
 800b566:	4603      	mov	r3, r0
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	f003 0304 	and.w	r3, r3, #4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d006      	beq.n	800b580 <tcp_output+0x188>
 800b572:	4b2f      	ldr	r3, [pc, #188]	@ (800b630 <tcp_output+0x238>)
 800b574:	f240 5236 	movw	r2, #1334	@ 0x536
 800b578:	4932      	ldr	r1, [pc, #200]	@ (800b644 <tcp_output+0x24c>)
 800b57a:	482f      	ldr	r0, [pc, #188]	@ (800b638 <tcp_output+0x240>)
 800b57c:	f003 fd7c 	bl	800f078 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01f      	beq.n	800b5c8 <tcp_output+0x1d0>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	8b5b      	ldrh	r3, [r3, #26]
 800b58c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b590:	2b00      	cmp	r3, #0
 800b592:	d119      	bne.n	800b5c8 <tcp_output+0x1d0>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00b      	beq.n	800b5b4 <tcp_output+0x1bc>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d110      	bne.n	800b5c8 <tcp_output+0x1d0>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5aa:	891a      	ldrh	r2, [r3, #8]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d209      	bcs.n	800b5c8 <tcp_output+0x1d0>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d004      	beq.n	800b5c8 <tcp_output+0x1d0>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b5c4:	2b08      	cmp	r3, #8
 800b5c6:	d901      	bls.n	800b5cc <tcp_output+0x1d4>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e000      	b.n	800b5ce <tcp_output+0x1d6>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d106      	bne.n	800b5e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	8b5b      	ldrh	r3, [r3, #26]
 800b5d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 80e4 	beq.w	800b7a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	7d1b      	ldrb	r3, [r3, #20]
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d00d      	beq.n	800b604 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	899b      	ldrh	r3, [r3, #12]
 800b5ee:	b29c      	uxth	r4, r3
 800b5f0:	2010      	movs	r0, #16
 800b5f2:	f7f9 ff33 	bl	800545c <lwip_htons>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	4322      	orrs	r2, r4
 800b600:	b292      	uxth	r2, r2
 800b602:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b60a:	f000 f909 	bl	800b820 <tcp_output_segment>
 800b60e:	4603      	mov	r3, r0
 800b610:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d016      	beq.n	800b648 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8b5b      	ldrh	r3, [r3, #26]
 800b61e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b622:	b29a      	uxth	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	835a      	strh	r2, [r3, #26]
      return err;
 800b628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b62c:	e0d3      	b.n	800b7d6 <tcp_output+0x3de>
 800b62e:	bf00      	nop
 800b630:	08011558 	.word	0x08011558
 800b634:	08011a9c 	.word	0x08011a9c
 800b638:	080115ac 	.word	0x080115ac
 800b63c:	08011ab4 	.word	0x08011ab4
 800b640:	20008328 	.word	0x20008328
 800b644:	08011adc 	.word	0x08011adc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	7d1b      	ldrb	r3, [r3, #20]
 800b654:	2b02      	cmp	r3, #2
 800b656:	d006      	beq.n	800b666 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	8b5b      	ldrh	r3, [r3, #26]
 800b65c:	f023 0303 	bic.w	r3, r3, #3
 800b660:	b29a      	uxth	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7f9 ff0a 	bl	8005486 <lwip_htonl>
 800b672:	4604      	mov	r4, r0
 800b674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b676:	891b      	ldrh	r3, [r3, #8]
 800b678:	461d      	mov	r5, r3
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	899b      	ldrh	r3, [r3, #12]
 800b680:	b29b      	uxth	r3, r3
 800b682:	4618      	mov	r0, r3
 800b684:	f7f9 feea 	bl	800545c <lwip_htons>
 800b688:	4603      	mov	r3, r0
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <tcp_output+0x2a0>
 800b694:	2301      	movs	r3, #1
 800b696:	e000      	b.n	800b69a <tcp_output+0x2a2>
 800b698:	2300      	movs	r3, #0
 800b69a:	442b      	add	r3, r5
 800b69c:	4423      	add	r3, r4
 800b69e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da02      	bge.n	800b6b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b4:	891b      	ldrh	r3, [r3, #8]
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	899b      	ldrh	r3, [r3, #12]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7f9 fecb 	bl	800545c <lwip_htons>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f003 0303 	and.w	r3, r3, #3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <tcp_output+0x2de>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e000      	b.n	800b6d8 <tcp_output+0x2e0>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	4423      	add	r3, r4
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d049      	beq.n	800b772 <tcp_output+0x37a>
      seg->next = NULL;
 800b6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d105      	bne.n	800b6f8 <tcp_output+0x300>
        pcb->unacked = seg;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6f0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	623b      	str	r3, [r7, #32]
 800b6f6:	e03f      	b.n	800b778 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f9 fec1 	bl	8005486 <lwip_htonl>
 800b704:	4604      	mov	r4, r0
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f9 feba 	bl	8005486 <lwip_htonl>
 800b712:	4603      	mov	r3, r0
 800b714:	1ae3      	subs	r3, r4, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	da24      	bge.n	800b764 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	3370      	adds	r3, #112	@ 0x70
 800b71e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b720:	e002      	b.n	800b728 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d011      	beq.n	800b754 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7f9 fea4 	bl	8005486 <lwip_htonl>
 800b73e:	4604      	mov	r4, r0
 800b740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	4618      	mov	r0, r3
 800b748:	f7f9 fe9d 	bl	8005486 <lwip_htonl>
 800b74c:	4603      	mov	r3, r0
 800b74e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b750:	2b00      	cmp	r3, #0
 800b752:	dbe6      	blt.n	800b722 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	e009      	b.n	800b778 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b768:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	623b      	str	r3, [r7, #32]
 800b770:	e002      	b.n	800b778 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b774:	f7fc fc45 	bl	8008002 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b77c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	2b00      	cmp	r3, #0
 800b782:	d012      	beq.n	800b7aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f9 fe7b 	bl	8005486 <lwip_htonl>
 800b790:	4602      	mov	r2, r0
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b79a:	8912      	ldrh	r2, [r2, #8]
 800b79c:	4413      	add	r3, r2
  while (seg != NULL &&
 800b79e:	69ba      	ldr	r2, [r7, #24]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	f4bf aed9 	bcs.w	800b558 <tcp_output+0x160>
 800b7a6:	e000      	b.n	800b7aa <tcp_output+0x3b2>
      break;
 800b7a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d108      	bne.n	800b7c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b7ba:	e004      	b.n	800b7c6 <tcp_output+0x3ce>
    goto output_done;
 800b7bc:	bf00      	nop
 800b7be:	e002      	b.n	800b7c6 <tcp_output+0x3ce>
    goto output_done;
 800b7c0:	bf00      	nop
 800b7c2:	e000      	b.n	800b7c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b7c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	8b5b      	ldrh	r3, [r3, #26]
 800b7ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3728      	adds	r7, #40	@ 0x28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b7de:	bf00      	nop

0800b7e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d106      	bne.n	800b7fc <tcp_output_segment_busy+0x1c>
 800b7ee:	4b09      	ldr	r3, [pc, #36]	@ (800b814 <tcp_output_segment_busy+0x34>)
 800b7f0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b7f4:	4908      	ldr	r1, [pc, #32]	@ (800b818 <tcp_output_segment_busy+0x38>)
 800b7f6:	4809      	ldr	r0, [pc, #36]	@ (800b81c <tcp_output_segment_busy+0x3c>)
 800b7f8:	f003 fc3e 	bl	800f078 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	7b9b      	ldrb	r3, [r3, #14]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d001      	beq.n	800b80a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b806:	2301      	movs	r3, #1
 800b808:	e000      	b.n	800b80c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	08011558 	.word	0x08011558
 800b818:	08011af4 	.word	0x08011af4
 800b81c:	080115ac 	.word	0x080115ac

0800b820 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b820:	b5b0      	push	{r4, r5, r7, lr}
 800b822:	b08c      	sub	sp, #48	@ 0x30
 800b824:	af04      	add	r7, sp, #16
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d106      	bne.n	800b840 <tcp_output_segment+0x20>
 800b832:	4b64      	ldr	r3, [pc, #400]	@ (800b9c4 <tcp_output_segment+0x1a4>)
 800b834:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b838:	4963      	ldr	r1, [pc, #396]	@ (800b9c8 <tcp_output_segment+0x1a8>)
 800b83a:	4864      	ldr	r0, [pc, #400]	@ (800b9cc <tcp_output_segment+0x1ac>)
 800b83c:	f003 fc1c 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <tcp_output_segment+0x34>
 800b846:	4b5f      	ldr	r3, [pc, #380]	@ (800b9c4 <tcp_output_segment+0x1a4>)
 800b848:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b84c:	4960      	ldr	r1, [pc, #384]	@ (800b9d0 <tcp_output_segment+0x1b0>)
 800b84e:	485f      	ldr	r0, [pc, #380]	@ (800b9cc <tcp_output_segment+0x1ac>)
 800b850:	f003 fc12 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <tcp_output_segment+0x48>
 800b85a:	4b5a      	ldr	r3, [pc, #360]	@ (800b9c4 <tcp_output_segment+0x1a4>)
 800b85c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b860:	495c      	ldr	r1, [pc, #368]	@ (800b9d4 <tcp_output_segment+0x1b4>)
 800b862:	485a      	ldr	r0, [pc, #360]	@ (800b9cc <tcp_output_segment+0x1ac>)
 800b864:	f003 fc08 	bl	800f078 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f7ff ffb9 	bl	800b7e0 <tcp_output_segment_busy>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	e0a1      	b.n	800b9bc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68dc      	ldr	r4, [r3, #12]
 800b880:	4610      	mov	r0, r2
 800b882:	f7f9 fe00 	bl	8005486 <lwip_htonl>
 800b886:	4603      	mov	r3, r0
 800b888:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	68dc      	ldr	r4, [r3, #12]
 800b892:	4610      	mov	r0, r2
 800b894:	f7f9 fde2 	bl	800545c <lwip_htons>
 800b898:	4603      	mov	r3, r0
 800b89a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b8a4:	441a      	add	r2, r3
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	7a9b      	ldrb	r3, [r3, #10]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d015      	beq.n	800b8ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b8ca:	f7fc fe91 	bl	80085f0 <tcp_eff_send_mss_netif>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b8d2:	8b7b      	ldrh	r3, [r7, #26]
 800b8d4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7f9 fdd4 	bl	8005486 <lwip_htonl>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	da02      	bge.n	800b8fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10c      	bne.n	800b91c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b902:	4b35      	ldr	r3, [pc, #212]	@ (800b9d8 <tcp_output_segment+0x1b8>)
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	4618      	mov	r0, r3
 800b912:	f7f9 fdb8 	bl	8005486 <lwip_htonl>
 800b916:	4602      	mov	r2, r0
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	68da      	ldr	r2, [r3, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	8959      	ldrh	r1, [r3, #10]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	8b3a      	ldrh	r2, [r7, #24]
 800b936:	1a8a      	subs	r2, r1, r2
 800b938:	b292      	uxth	r2, r2
 800b93a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	8919      	ldrh	r1, [r3, #8]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	8b3a      	ldrh	r2, [r7, #24]
 800b948:	1a8a      	subs	r2, r1, r2
 800b94a:	b292      	uxth	r2, r2
 800b94c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	68d2      	ldr	r2, [r2, #12]
 800b956:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	741a      	strb	r2, [r3, #16]
 800b960:	2200      	movs	r2, #0
 800b962:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68da      	ldr	r2, [r3, #12]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	7a9b      	ldrb	r3, [r3, #10]
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <tcp_output_segment+0x158>
 800b974:	2318      	movs	r3, #24
 800b976:	e000      	b.n	800b97a <tcp_output_segment+0x15a>
 800b978:	2314      	movs	r3, #20
 800b97a:	4413      	add	r3, r2
 800b97c:	69fa      	ldr	r2, [r7, #28]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d006      	beq.n	800b990 <tcp_output_segment+0x170>
 800b982:	4b10      	ldr	r3, [pc, #64]	@ (800b9c4 <tcp_output_segment+0x1a4>)
 800b984:	f240 621c 	movw	r2, #1564	@ 0x61c
 800b988:	4914      	ldr	r1, [pc, #80]	@ (800b9dc <tcp_output_segment+0x1bc>)
 800b98a:	4810      	ldr	r0, [pc, #64]	@ (800b9cc <tcp_output_segment+0x1ac>)
 800b98c:	f003 fb74 	bl	800f078 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6858      	ldr	r0, [r3, #4]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	1d1c      	adds	r4, r3, #4
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	7add      	ldrb	r5, [r3, #11]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	7a9b      	ldrb	r3, [r3, #10]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	9202      	str	r2, [sp, #8]
 800b9a6:	2206      	movs	r2, #6
 800b9a8:	9201      	str	r2, [sp, #4]
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	4622      	mov	r2, r4
 800b9b0:	f002 fa34 	bl	800de1c <ip4_output_if>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b9b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c4:	08011558 	.word	0x08011558
 800b9c8:	08011b1c 	.word	0x08011b1c
 800b9cc:	080115ac 	.word	0x080115ac
 800b9d0:	08011b3c 	.word	0x08011b3c
 800b9d4:	08011b5c 	.word	0x08011b5c
 800b9d8:	200082dc 	.word	0x200082dc
 800b9dc:	08011b80 	.word	0x08011b80

0800b9e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b9e0:	b5b0      	push	{r4, r5, r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d106      	bne.n	800b9fc <tcp_rexmit_rto_prepare+0x1c>
 800b9ee:	4b31      	ldr	r3, [pc, #196]	@ (800bab4 <tcp_rexmit_rto_prepare+0xd4>)
 800b9f0:	f240 6263 	movw	r2, #1635	@ 0x663
 800b9f4:	4930      	ldr	r1, [pc, #192]	@ (800bab8 <tcp_rexmit_rto_prepare+0xd8>)
 800b9f6:	4831      	ldr	r0, [pc, #196]	@ (800babc <tcp_rexmit_rto_prepare+0xdc>)
 800b9f8:	f003 fb3e 	bl	800f078 <iprintf>

  if (pcb->unacked == NULL) {
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d102      	bne.n	800ba0a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ba04:	f06f 0305 	mvn.w	r3, #5
 800ba08:	e050      	b.n	800baac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	e00b      	b.n	800ba2a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff fee4 	bl	800b7e0 <tcp_output_segment_busy>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ba1e:	f06f 0305 	mvn.w	r3, #5
 800ba22:	e043      	b.n	800baac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1ef      	bne.n	800ba12 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff fed4 	bl	800b7e0 <tcp_output_segment_busy>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ba3e:	f06f 0305 	mvn.w	r3, #5
 800ba42:	e033      	b.n	800baac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	8b5b      	ldrh	r3, [r3, #26]
 800ba5e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7f9 fd09 	bl	8005486 <lwip_htonl>
 800ba74:	4604      	mov	r4, r0
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	891b      	ldrh	r3, [r3, #8]
 800ba7a:	461d      	mov	r5, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	899b      	ldrh	r3, [r3, #12]
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f9 fce9 	bl	800545c <lwip_htons>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	f003 0303 	and.w	r3, r3, #3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <tcp_rexmit_rto_prepare+0xba>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e000      	b.n	800ba9c <tcp_rexmit_rto_prepare+0xbc>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	442b      	add	r3, r5
 800ba9e:	18e2      	adds	r2, r4, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bdb0      	pop	{r4, r5, r7, pc}
 800bab4:	08011558 	.word	0x08011558
 800bab8:	08011b94 	.word	0x08011b94
 800babc:	080115ac 	.word	0x080115ac

0800bac0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d106      	bne.n	800badc <tcp_rexmit_rto_commit+0x1c>
 800bace:	4b0d      	ldr	r3, [pc, #52]	@ (800bb04 <tcp_rexmit_rto_commit+0x44>)
 800bad0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bad4:	490c      	ldr	r1, [pc, #48]	@ (800bb08 <tcp_rexmit_rto_commit+0x48>)
 800bad6:	480d      	ldr	r0, [pc, #52]	@ (800bb0c <tcp_rexmit_rto_commit+0x4c>)
 800bad8:	f003 face 	bl	800f078 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bae2:	2bff      	cmp	r3, #255	@ 0xff
 800bae4:	d007      	beq.n	800baf6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800baec:	3301      	adds	r3, #1
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fc7e 	bl	800b3f8 <tcp_output>
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	08011558 	.word	0x08011558
 800bb08:	08011bb8 	.word	0x08011bb8
 800bb0c:	080115ac 	.word	0x080115ac

0800bb10 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d106      	bne.n	800bb2c <tcp_rexmit_rto+0x1c>
 800bb1e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb48 <tcp_rexmit_rto+0x38>)
 800bb20:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bb24:	4909      	ldr	r1, [pc, #36]	@ (800bb4c <tcp_rexmit_rto+0x3c>)
 800bb26:	480a      	ldr	r0, [pc, #40]	@ (800bb50 <tcp_rexmit_rto+0x40>)
 800bb28:	f003 faa6 	bl	800f078 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff ff57 	bl	800b9e0 <tcp_rexmit_rto_prepare>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d102      	bne.n	800bb3e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7ff ffc1 	bl	800bac0 <tcp_rexmit_rto_commit>
  }
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	08011558 	.word	0x08011558
 800bb4c:	08011bdc 	.word	0x08011bdc
 800bb50:	080115ac 	.word	0x080115ac

0800bb54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bb54:	b590      	push	{r4, r7, lr}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <tcp_rexmit+0x1c>
 800bb62:	4b2f      	ldr	r3, [pc, #188]	@ (800bc20 <tcp_rexmit+0xcc>)
 800bb64:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bb68:	492e      	ldr	r1, [pc, #184]	@ (800bc24 <tcp_rexmit+0xd0>)
 800bb6a:	482f      	ldr	r0, [pc, #188]	@ (800bc28 <tcp_rexmit+0xd4>)
 800bb6c:	f003 fa84 	bl	800f078 <iprintf>

  if (pcb->unacked == NULL) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bb78:	f06f 0305 	mvn.w	r3, #5
 800bb7c:	e04c      	b.n	800bc18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb82:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bb84:	68b8      	ldr	r0, [r7, #8]
 800bb86:	f7ff fe2b 	bl	800b7e0 <tcp_output_segment_busy>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bb90:	f06f 0305 	mvn.w	r3, #5
 800bb94:	e040      	b.n	800bc18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	336c      	adds	r3, #108	@ 0x6c
 800bba2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bba4:	e002      	b.n	800bbac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d011      	beq.n	800bbd8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f9 fc62 	bl	8005486 <lwip_htonl>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f9 fc5b 	bl	8005486 <lwip_htonl>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dbe6      	blt.n	800bba6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d103      	bne.n	800bbf6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbfc:	2bff      	cmp	r3, #255	@ 0xff
 800bbfe:	d007      	beq.n	800bc10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc06:	3301      	adds	r3, #1
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd90      	pop	{r4, r7, pc}
 800bc20:	08011558 	.word	0x08011558
 800bc24:	08011bf8 	.word	0x08011bf8
 800bc28:	080115ac 	.word	0x080115ac

0800bc2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <tcp_rexmit_fast+0x1c>
 800bc3a:	4b2a      	ldr	r3, [pc, #168]	@ (800bce4 <tcp_rexmit_fast+0xb8>)
 800bc3c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800bc40:	4929      	ldr	r1, [pc, #164]	@ (800bce8 <tcp_rexmit_fast+0xbc>)
 800bc42:	482a      	ldr	r0, [pc, #168]	@ (800bcec <tcp_rexmit_fast+0xc0>)
 800bc44:	f003 fa18 	bl	800f078 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d044      	beq.n	800bcda <tcp_rexmit_fast+0xae>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	8b5b      	ldrh	r3, [r3, #26]
 800bc54:	f003 0304 	and.w	r3, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d13e      	bne.n	800bcda <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ff79 	bl	800bb54 <tcp_rexmit>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d138      	bne.n	800bcda <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bc74:	4293      	cmp	r3, r2
 800bc76:	bf28      	it	cs
 800bc78:	4613      	movcs	r3, r2
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	0fda      	lsrs	r2, r3, #31
 800bc7e:	4413      	add	r3, r2
 800bc80:	105b      	asrs	r3, r3, #1
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bc90:	461a      	mov	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d206      	bcs.n	800bcaa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	0049      	lsls	r1, r1, #1
 800bcb8:	440b      	add	r3, r1
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	4413      	add	r3, r2
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	8b5b      	ldrh	r3, [r3, #26]
 800bcca:	f043 0304 	orr.w	r3, r3, #4
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800bcda:	bf00      	nop
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	08011558 	.word	0x08011558
 800bce8:	08011c10 	.word	0x08011c10
 800bcec:	080115ac 	.word	0x080115ac

0800bcf0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	607b      	str	r3, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	817b      	strh	r3, [r7, #10]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bd02:	897a      	ldrh	r2, [r7, #10]
 800bd04:	893b      	ldrh	r3, [r7, #8]
 800bd06:	4413      	add	r3, r2
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	3314      	adds	r3, #20
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bd12:	4619      	mov	r1, r3
 800bd14:	2022      	movs	r0, #34	@ 0x22
 800bd16:	f7fa fc1b 	bl	8006550 <pbuf_alloc>
 800bd1a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d04d      	beq.n	800bdbe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bd22:	897b      	ldrh	r3, [r7, #10]
 800bd24:	3313      	adds	r3, #19
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	8952      	ldrh	r2, [r2, #10]
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	db06      	blt.n	800bd3c <tcp_output_alloc_header_common+0x4c>
 800bd2e:	4b26      	ldr	r3, [pc, #152]	@ (800bdc8 <tcp_output_alloc_header_common+0xd8>)
 800bd30:	f240 7223 	movw	r2, #1827	@ 0x723
 800bd34:	4925      	ldr	r1, [pc, #148]	@ (800bdcc <tcp_output_alloc_header_common+0xdc>)
 800bd36:	4826      	ldr	r0, [pc, #152]	@ (800bdd0 <tcp_output_alloc_header_common+0xe0>)
 800bd38:	f003 f99e 	bl	800f078 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bd42:	8c3b      	ldrh	r3, [r7, #32]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7f9 fb89 	bl	800545c <lwip_htons>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bd52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7f9 fb81 	bl	800545c <lwip_htons>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7f9 fb8c 	bl	8005486 <lwip_htonl>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bd74:	897b      	ldrh	r3, [r7, #10]
 800bd76:	089b      	lsrs	r3, r3, #2
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	3305      	adds	r3, #5
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	031b      	lsls	r3, r3, #12
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7f9 fb65 	bl	800545c <lwip_htons>
 800bd92:	4603      	mov	r3, r0
 800bd94:	461a      	mov	r2, r3
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bd9a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7f9 fb5d 	bl	800545c <lwip_htons>
 800bda2:	4603      	mov	r3, r0
 800bda4:	461a      	mov	r2, r3
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	2200      	movs	r2, #0
 800bdae:	741a      	strb	r2, [r3, #16]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	749a      	strb	r2, [r3, #18]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800bdbe:	697b      	ldr	r3, [r7, #20]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	08011558 	.word	0x08011558
 800bdcc:	08011c30 	.word	0x08011c30
 800bdd0:	080115ac 	.word	0x080115ac

0800bdd4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bdd4:	b5b0      	push	{r4, r5, r7, lr}
 800bdd6:	b08a      	sub	sp, #40	@ 0x28
 800bdd8:	af04      	add	r7, sp, #16
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	607b      	str	r3, [r7, #4]
 800bdde:	460b      	mov	r3, r1
 800bde0:	817b      	strh	r3, [r7, #10]
 800bde2:	4613      	mov	r3, r2
 800bde4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d106      	bne.n	800bdfa <tcp_output_alloc_header+0x26>
 800bdec:	4b15      	ldr	r3, [pc, #84]	@ (800be44 <tcp_output_alloc_header+0x70>)
 800bdee:	f240 7242 	movw	r2, #1858	@ 0x742
 800bdf2:	4915      	ldr	r1, [pc, #84]	@ (800be48 <tcp_output_alloc_header+0x74>)
 800bdf4:	4815      	ldr	r0, [pc, #84]	@ (800be4c <tcp_output_alloc_header+0x78>)
 800bdf6:	f003 f93f 	bl	800f078 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	8adb      	ldrh	r3, [r3, #22]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	8b12      	ldrh	r2, [r2, #24]
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800be0a:	893d      	ldrh	r5, [r7, #8]
 800be0c:	897c      	ldrh	r4, [r7, #10]
 800be0e:	9103      	str	r1, [sp, #12]
 800be10:	2110      	movs	r1, #16
 800be12:	9102      	str	r1, [sp, #8]
 800be14:	9201      	str	r2, [sp, #4]
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	462a      	mov	r2, r5
 800be1c:	4621      	mov	r1, r4
 800be1e:	f7ff ff67 	bl	800bcf0 <tcp_output_alloc_header_common>
 800be22:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d006      	beq.n	800be38 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800be32:	441a      	add	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800be38:	697b      	ldr	r3, [r7, #20]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bdb0      	pop	{r4, r5, r7, pc}
 800be42:	bf00      	nop
 800be44:	08011558 	.word	0x08011558
 800be48:	08011c60 	.word	0x08011c60
 800be4c:	080115ac 	.word	0x080115ac

0800be50 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	4611      	mov	r1, r2
 800be5c:	461a      	mov	r2, r3
 800be5e:	460b      	mov	r3, r1
 800be60:	71fb      	strb	r3, [r7, #7]
 800be62:	4613      	mov	r3, r2
 800be64:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d106      	bne.n	800be7e <tcp_output_fill_options+0x2e>
 800be70:	4b12      	ldr	r3, [pc, #72]	@ (800bebc <tcp_output_fill_options+0x6c>)
 800be72:	f240 7256 	movw	r2, #1878	@ 0x756
 800be76:	4912      	ldr	r1, [pc, #72]	@ (800bec0 <tcp_output_fill_options+0x70>)
 800be78:	4812      	ldr	r0, [pc, #72]	@ (800bec4 <tcp_output_fill_options+0x74>)
 800be7a:	f003 f8fd 	bl	800f078 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	3314      	adds	r3, #20
 800be88:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800be8a:	8bfb      	ldrh	r3, [r7, #30]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	461a      	mov	r2, r3
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	4413      	add	r3, r2
 800be9a:	3314      	adds	r3, #20
 800be9c:	69ba      	ldr	r2, [r7, #24]
 800be9e:	4413      	add	r3, r2
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d006      	beq.n	800beb4 <tcp_output_fill_options+0x64>
 800bea6:	4b05      	ldr	r3, [pc, #20]	@ (800bebc <tcp_output_fill_options+0x6c>)
 800bea8:	f240 7275 	movw	r2, #1909	@ 0x775
 800beac:	4906      	ldr	r1, [pc, #24]	@ (800bec8 <tcp_output_fill_options+0x78>)
 800beae:	4805      	ldr	r0, [pc, #20]	@ (800bec4 <tcp_output_fill_options+0x74>)
 800beb0:	f003 f8e2 	bl	800f078 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800beb4:	bf00      	nop
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	08011558 	.word	0x08011558
 800bec0:	08011c88 	.word	0x08011c88
 800bec4:	080115ac 	.word	0x080115ac
 800bec8:	08011b80 	.word	0x08011b80

0800becc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08a      	sub	sp, #40	@ 0x28
 800bed0:	af04      	add	r7, sp, #16
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d106      	bne.n	800beee <tcp_output_control_segment+0x22>
 800bee0:	4b1c      	ldr	r3, [pc, #112]	@ (800bf54 <tcp_output_control_segment+0x88>)
 800bee2:	f240 7287 	movw	r2, #1927	@ 0x787
 800bee6:	491c      	ldr	r1, [pc, #112]	@ (800bf58 <tcp_output_control_segment+0x8c>)
 800bee8:	481c      	ldr	r0, [pc, #112]	@ (800bf5c <tcp_output_control_segment+0x90>)
 800beea:	f003 f8c5 	bl	800f078 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7fe ff42 	bl	800ad7c <tcp_route>
 800bef8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d102      	bne.n	800bf06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bf00:	23fc      	movs	r3, #252	@ 0xfc
 800bf02:	75fb      	strb	r3, [r7, #23]
 800bf04:	e01c      	b.n	800bf40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d006      	beq.n	800bf1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	7adb      	ldrb	r3, [r3, #11]
 800bf10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	7a9b      	ldrb	r3, [r3, #10]
 800bf16:	757b      	strb	r3, [r7, #21]
 800bf18:	e003      	b.n	800bf22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800bf1a:	23ff      	movs	r3, #255	@ 0xff
 800bf1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800bf22:	7dba      	ldrb	r2, [r7, #22]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	9302      	str	r3, [sp, #8]
 800bf28:	2306      	movs	r3, #6
 800bf2a:	9301      	str	r3, [sp, #4]
 800bf2c:	7d7b      	ldrb	r3, [r7, #21]
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	4613      	mov	r3, r2
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	68b8      	ldr	r0, [r7, #8]
 800bf38:	f001 ff70 	bl	800de1c <ip4_output_if>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800bf40:	68b8      	ldr	r0, [r7, #8]
 800bf42:	f7fa fde9 	bl	8006b18 <pbuf_free>
  return err;
 800bf46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	08011558 	.word	0x08011558
 800bf58:	08011cb0 	.word	0x08011cb0
 800bf5c:	080115ac 	.word	0x080115ac

0800bf60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bf60:	b590      	push	{r4, r7, lr}
 800bf62:	b08b      	sub	sp, #44	@ 0x2c
 800bf64:	af04      	add	r7, sp, #16
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <tcp_rst+0x22>
 800bf74:	4b1f      	ldr	r3, [pc, #124]	@ (800bff4 <tcp_rst+0x94>)
 800bf76:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800bf7a:	491f      	ldr	r1, [pc, #124]	@ (800bff8 <tcp_rst+0x98>)
 800bf7c:	481f      	ldr	r0, [pc, #124]	@ (800bffc <tcp_rst+0x9c>)
 800bf7e:	f003 f87b 	bl	800f078 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <tcp_rst+0x36>
 800bf88:	4b1a      	ldr	r3, [pc, #104]	@ (800bff4 <tcp_rst+0x94>)
 800bf8a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800bf8e:	491c      	ldr	r1, [pc, #112]	@ (800c000 <tcp_rst+0xa0>)
 800bf90:	481a      	ldr	r0, [pc, #104]	@ (800bffc <tcp_rst+0x9c>)
 800bf92:	f003 f871 	bl	800f078 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bf96:	2300      	movs	r3, #0
 800bf98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800bf9a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800bf9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	b29c      	uxth	r4, r3
 800bfa4:	68b8      	ldr	r0, [r7, #8]
 800bfa6:	f7f9 fa6e 	bl	8005486 <lwip_htonl>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	8abb      	ldrh	r3, [r7, #20]
 800bfae:	9303      	str	r3, [sp, #12]
 800bfb0:	2314      	movs	r3, #20
 800bfb2:	9302      	str	r3, [sp, #8]
 800bfb4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fe94 	bl	800bcf0 <tcp_output_alloc_header_common>
 800bfc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00c      	beq.n	800bfea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bfd0:	7dfb      	ldrb	r3, [r7, #23]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	6939      	ldr	r1, [r7, #16]
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff ff3a 	bl	800be50 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	6939      	ldr	r1, [r7, #16]
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff ff72 	bl	800becc <tcp_output_control_segment>
 800bfe8:	e000      	b.n	800bfec <tcp_rst+0x8c>
    return;
 800bfea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bfec:	371c      	adds	r7, #28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd90      	pop	{r4, r7, pc}
 800bff2:	bf00      	nop
 800bff4:	08011558 	.word	0x08011558
 800bff8:	08011cdc 	.word	0x08011cdc
 800bffc:	080115ac 	.word	0x080115ac
 800c000:	08011cf8 	.word	0x08011cf8

0800c004 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c004:	b590      	push	{r4, r7, lr}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_send_empty_ack+0x24>
 800c01a:	4b28      	ldr	r3, [pc, #160]	@ (800c0bc <tcp_send_empty_ack+0xb8>)
 800c01c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c020:	4927      	ldr	r1, [pc, #156]	@ (800c0c0 <tcp_send_empty_ack+0xbc>)
 800c022:	4828      	ldr	r0, [pc, #160]	@ (800c0c4 <tcp_send_empty_ack+0xc0>)
 800c024:	f003 f828 	bl	800f078 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 0304 	and.w	r3, r3, #4
 800c032:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c034:	7d7b      	ldrb	r3, [r7, #21]
 800c036:	b29c      	uxth	r4, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f9 fa22 	bl	8005486 <lwip_htonl>
 800c042:	4603      	mov	r3, r0
 800c044:	2200      	movs	r2, #0
 800c046:	4621      	mov	r1, r4
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff fec3 	bl	800bdd4 <tcp_output_alloc_header>
 800c04e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d109      	bne.n	800c06a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8b5b      	ldrh	r3, [r3, #26]
 800c05a:	f043 0303 	orr.w	r3, r3, #3
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c064:	f06f 0301 	mvn.w	r3, #1
 800c068:	e023      	b.n	800c0b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c06a:	7dbb      	ldrb	r3, [r7, #22]
 800c06c:	7dfa      	ldrb	r2, [r7, #23]
 800c06e:	6939      	ldr	r1, [r7, #16]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff feed 	bl	800be50 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3304      	adds	r3, #4
 800c07c:	6939      	ldr	r1, [r7, #16]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ff24 	bl	800becc <tcp_output_control_segment>
 800c084:	4603      	mov	r3, r0
 800c086:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	8b5b      	ldrh	r3, [r3, #26]
 800c094:	f043 0303 	orr.w	r3, r3, #3
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	835a      	strh	r2, [r3, #26]
 800c09e:	e006      	b.n	800c0ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	8b5b      	ldrh	r3, [r3, #26]
 800c0a4:	f023 0303 	bic.w	r3, r3, #3
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	371c      	adds	r7, #28
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd90      	pop	{r4, r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	08011558 	.word	0x08011558
 800c0c0:	08011d14 	.word	0x08011d14
 800c0c4:	080115ac 	.word	0x080115ac

0800c0c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c0c8:	b590      	push	{r4, r7, lr}
 800c0ca:	b087      	sub	sp, #28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <tcp_keepalive+0x20>
 800c0da:	4b18      	ldr	r3, [pc, #96]	@ (800c13c <tcp_keepalive+0x74>)
 800c0dc:	f640 0224 	movw	r2, #2084	@ 0x824
 800c0e0:	4917      	ldr	r1, [pc, #92]	@ (800c140 <tcp_keepalive+0x78>)
 800c0e2:	4818      	ldr	r0, [pc, #96]	@ (800c144 <tcp_keepalive+0x7c>)
 800c0e4:	f002 ffc8 	bl	800f078 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	b29c      	uxth	r4, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7f9 f9c7 	bl	8005486 <lwip_htonl>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff fe68 	bl	800bdd4 <tcp_output_alloc_header>
 800c104:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c10c:	f04f 33ff 	mov.w	r3, #4294967295
 800c110:	e010      	b.n	800c134 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	2200      	movs	r2, #0
 800c116:	6939      	ldr	r1, [r7, #16]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff fe99 	bl	800be50 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	6939      	ldr	r1, [r7, #16]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fed0 	bl	800becc <tcp_output_control_segment>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c130:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c134:	4618      	mov	r0, r3
 800c136:	371c      	adds	r7, #28
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd90      	pop	{r4, r7, pc}
 800c13c:	08011558 	.word	0x08011558
 800c140:	08011d34 	.word	0x08011d34
 800c144:	080115ac 	.word	0x080115ac

0800c148 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b08b      	sub	sp, #44	@ 0x2c
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c150:	2300      	movs	r3, #0
 800c152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d106      	bne.n	800c16a <tcp_zero_window_probe+0x22>
 800c15c:	4b4c      	ldr	r3, [pc, #304]	@ (800c290 <tcp_zero_window_probe+0x148>)
 800c15e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c162:	494c      	ldr	r1, [pc, #304]	@ (800c294 <tcp_zero_window_probe+0x14c>)
 800c164:	484c      	ldr	r0, [pc, #304]	@ (800c298 <tcp_zero_window_probe+0x150>)
 800c166:	f002 ff87 	bl	800f078 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c16e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	e086      	b.n	800c288 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c180:	2bff      	cmp	r3, #255	@ 0xff
 800c182:	d007      	beq.n	800c194 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c18a:	3301      	adds	r3, #1
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c194:	6a3b      	ldr	r3, [r7, #32]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	899b      	ldrh	r3, [r3, #12]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7f9 f95d 	bl	800545c <lwip_htons>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d005      	beq.n	800c1ba <tcp_zero_window_probe+0x72>
 800c1ae:	6a3b      	ldr	r3, [r7, #32]
 800c1b0:	891b      	ldrh	r3, [r3, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <tcp_zero_window_probe+0x72>
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e000      	b.n	800c1bc <tcp_zero_window_probe+0x74>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c1be:	7ffb      	ldrb	r3, [r7, #31]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bf0c      	ite	eq
 800c1c4:	2301      	moveq	r3, #1
 800c1c6:	2300      	movne	r3, #0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1d0:	b299      	uxth	r1, r3
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	8bba      	ldrh	r2, [r7, #28]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff fdfa 	bl	800bdd4 <tcp_output_alloc_header>
 800c1e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ec:	e04c      	b.n	800c288 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d011      	beq.n	800c21e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	899b      	ldrh	r3, [r3, #12]
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	b21b      	sxth	r3, r3
 800c202:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c206:	b21c      	sxth	r4, r3
 800c208:	2011      	movs	r0, #17
 800c20a:	f7f9 f927 	bl	800545c <lwip_htons>
 800c20e:	4603      	mov	r3, r0
 800c210:	b21b      	sxth	r3, r3
 800c212:	4323      	orrs	r3, r4
 800c214:	b21b      	sxth	r3, r3
 800c216:	b29a      	uxth	r2, r3
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	819a      	strh	r2, [r3, #12]
 800c21c:	e010      	b.n	800c240 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	3314      	adds	r3, #20
 800c224:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	6858      	ldr	r0, [r3, #4]
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	891a      	ldrh	r2, [r3, #8]
 800c230:	6a3b      	ldr	r3, [r7, #32]
 800c232:	891b      	ldrh	r3, [r3, #8]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	b29b      	uxth	r3, r3
 800c238:	2201      	movs	r2, #1
 800c23a:	6939      	ldr	r1, [r7, #16]
 800c23c:	f7fa fe56 	bl	8006eec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f9 f91d 	bl	8005486 <lwip_htonl>
 800c24c:	4603      	mov	r3, r0
 800c24e:	3301      	adds	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da02      	bge.n	800c264 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68fa      	ldr	r2, [r7, #12]
 800c262:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c268:	2200      	movs	r2, #0
 800c26a:	69b9      	ldr	r1, [r7, #24]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff fdef 	bl	800be50 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3304      	adds	r3, #4
 800c278:	69b9      	ldr	r1, [r7, #24]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fe26 	bl	800becc <tcp_output_control_segment>
 800c280:	4603      	mov	r3, r0
 800c282:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c284:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	372c      	adds	r7, #44	@ 0x2c
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd90      	pop	{r4, r7, pc}
 800c290:	08011558 	.word	0x08011558
 800c294:	08011d50 	.word	0x08011d50
 800c298:	080115ac 	.word	0x080115ac

0800c29c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c2a4:	f7fa ff10 	bl	80070c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d4 <tcpip_tcp_timer+0x38>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d103      	bne.n	800c2b8 <tcpip_tcp_timer+0x1c>
 800c2b0:	4b09      	ldr	r3, [pc, #36]	@ (800c2d8 <tcpip_tcp_timer+0x3c>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4908      	ldr	r1, [pc, #32]	@ (800c2dc <tcpip_tcp_timer+0x40>)
 800c2bc:	20fa      	movs	r0, #250	@ 0xfa
 800c2be:	f000 f8f3 	bl	800c4a8 <sys_timeout>
 800c2c2:	e003      	b.n	800c2cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c2c4:	4b06      	ldr	r3, [pc, #24]	@ (800c2e0 <tcpip_tcp_timer+0x44>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	601a      	str	r2, [r3, #0]
  }
}
 800c2ca:	bf00      	nop
 800c2cc:	bf00      	nop
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	200082e8 	.word	0x200082e8
 800c2d8:	200082ec 	.word	0x200082ec
 800c2dc:	0800c29d 	.word	0x0800c29d
 800c2e0:	20008334 	.word	0x20008334

0800c2e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c314 <tcp_timer_needed+0x30>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10f      	bne.n	800c310 <tcp_timer_needed+0x2c>
 800c2f0:	4b09      	ldr	r3, [pc, #36]	@ (800c318 <tcp_timer_needed+0x34>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <tcp_timer_needed+0x1c>
 800c2f8:	4b08      	ldr	r3, [pc, #32]	@ (800c31c <tcp_timer_needed+0x38>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c300:	4b04      	ldr	r3, [pc, #16]	@ (800c314 <tcp_timer_needed+0x30>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c306:	2200      	movs	r2, #0
 800c308:	4905      	ldr	r1, [pc, #20]	@ (800c320 <tcp_timer_needed+0x3c>)
 800c30a:	20fa      	movs	r0, #250	@ 0xfa
 800c30c:	f000 f8cc 	bl	800c4a8 <sys_timeout>
  }
}
 800c310:	bf00      	nop
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20008334 	.word	0x20008334
 800c318:	200082e8 	.word	0x200082e8
 800c31c:	200082ec 	.word	0x200082ec
 800c320:	0800c29d 	.word	0x0800c29d

0800c324 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c330:	2006      	movs	r0, #6
 800c332:	f7f9 fd0b 	bl	8005d4c <memp_malloc>
 800c336:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d109      	bne.n	800c352 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d151      	bne.n	800c3e8 <sys_timeout_abs+0xc4>
 800c344:	4b2a      	ldr	r3, [pc, #168]	@ (800c3f0 <sys_timeout_abs+0xcc>)
 800c346:	22be      	movs	r2, #190	@ 0xbe
 800c348:	492a      	ldr	r1, [pc, #168]	@ (800c3f4 <sys_timeout_abs+0xd0>)
 800c34a:	482b      	ldr	r0, [pc, #172]	@ (800c3f8 <sys_timeout_abs+0xd4>)
 800c34c:	f002 fe94 	bl	800f078 <iprintf>
    return;
 800c350:	e04a      	b.n	800c3e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	2200      	movs	r2, #0
 800c356:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c36a:	4b24      	ldr	r3, [pc, #144]	@ (800c3fc <sys_timeout_abs+0xd8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d103      	bne.n	800c37a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c372:	4a22      	ldr	r2, [pc, #136]	@ (800c3fc <sys_timeout_abs+0xd8>)
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	6013      	str	r3, [r2, #0]
    return;
 800c378:	e037      	b.n	800c3ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b1f      	ldr	r3, [pc, #124]	@ (800c3fc <sys_timeout_abs+0xd8>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	0fdb      	lsrs	r3, r3, #31
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d007      	beq.n	800c3a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c392:	4b1a      	ldr	r3, [pc, #104]	@ (800c3fc <sys_timeout_abs+0xd8>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c39a:	4a18      	ldr	r2, [pc, #96]	@ (800c3fc <sys_timeout_abs+0xd8>)
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	e023      	b.n	800c3ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c3a2:	4b16      	ldr	r3, [pc, #88]	@ (800c3fc <sys_timeout_abs+0xd8>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	e01a      	b.n	800c3e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00b      	beq.n	800c3ca <sys_timeout_abs+0xa6>
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	0fdb      	lsrs	r3, r3, #31
 800c3c0:	f003 0301 	and.w	r3, r3, #1
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d007      	beq.n	800c3da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	601a      	str	r2, [r3, #0]
        break;
 800c3d8:	e007      	b.n	800c3ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e1      	bne.n	800c3aa <sys_timeout_abs+0x86>
 800c3e6:	e000      	b.n	800c3ea <sys_timeout_abs+0xc6>
    return;
 800c3e8:	bf00      	nop
      }
    }
  }
}
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	08011d74 	.word	0x08011d74
 800c3f4:	08011da8 	.word	0x08011da8
 800c3f8:	08011de8 	.word	0x08011de8
 800c3fc:	2000832c 	.word	0x2000832c

0800c400 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	4798      	blx	r3

  now = sys_now();
 800c412:	f7f8 fde1 	bl	8004fd8 <sys_now>
 800c416:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	4b0f      	ldr	r3, [pc, #60]	@ (800c45c <lwip_cyclic_timer+0x5c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4413      	add	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	0fdb      	lsrs	r3, r3, #31
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d009      	beq.n	800c44a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	4413      	add	r3, r2
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	4907      	ldr	r1, [pc, #28]	@ (800c460 <lwip_cyclic_timer+0x60>)
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff ff6e 	bl	800c324 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c448:	e004      	b.n	800c454 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	4904      	ldr	r1, [pc, #16]	@ (800c460 <lwip_cyclic_timer+0x60>)
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff ff68 	bl	800c324 <sys_timeout_abs>
}
 800c454:	bf00      	nop
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20008330 	.word	0x20008330
 800c460:	0800c401 	.word	0x0800c401

0800c464 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c46a:	2301      	movs	r3, #1
 800c46c:	607b      	str	r3, [r7, #4]
 800c46e:	e00e      	b.n	800c48e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c470:	4a0b      	ldr	r2, [pc, #44]	@ (800c4a0 <sys_timeouts_init+0x3c>)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	4a08      	ldr	r2, [pc, #32]	@ (800c4a0 <sys_timeouts_init+0x3c>)
 800c47e:	4413      	add	r3, r2
 800c480:	461a      	mov	r2, r3
 800c482:	4908      	ldr	r1, [pc, #32]	@ (800c4a4 <sys_timeouts_init+0x40>)
 800c484:	f000 f810 	bl	800c4a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3301      	adds	r3, #1
 800c48c:	607b      	str	r3, [r7, #4]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b02      	cmp	r3, #2
 800c492:	d9ed      	bls.n	800c470 <sys_timeouts_init+0xc>
  }
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	08012960 	.word	0x08012960
 800c4a4:	0800c401 	.word	0x0800c401

0800c4a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4ba:	d306      	bcc.n	800c4ca <sys_timeout+0x22>
 800c4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4e8 <sys_timeout+0x40>)
 800c4be:	f240 1229 	movw	r2, #297	@ 0x129
 800c4c2:	490a      	ldr	r1, [pc, #40]	@ (800c4ec <sys_timeout+0x44>)
 800c4c4:	480a      	ldr	r0, [pc, #40]	@ (800c4f0 <sys_timeout+0x48>)
 800c4c6:	f002 fdd7 	bl	800f078 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c4ca:	f7f8 fd85 	bl	8004fd8 <sys_now>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	6978      	ldr	r0, [r7, #20]
 800c4dc:	f7ff ff22 	bl	800c324 <sys_timeout_abs>
#endif
}
 800c4e0:	bf00      	nop
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	08011d74 	.word	0x08011d74
 800c4ec:	08011e10 	.word	0x08011e10
 800c4f0:	08011de8 	.word	0x08011de8

0800c4f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c4fa:	f7f8 fd6d 	bl	8004fd8 <sys_now>
 800c4fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c500:	4b1a      	ldr	r3, [pc, #104]	@ (800c56c <sys_check_timeouts+0x78>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d001      	beq.n	800c50e <sys_check_timeouts+0x1a>
 800c50a:	f7f9 ffcb 	bl	80064a4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c50e:	4b18      	ldr	r3, [pc, #96]	@ (800c570 <sys_check_timeouts+0x7c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d022      	beq.n	800c560 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	0fdb      	lsrs	r3, r3, #31
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d11a      	bne.n	800c564 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a0f      	ldr	r2, [pc, #60]	@ (800c570 <sys_check_timeouts+0x7c>)
 800c534:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	4a0b      	ldr	r2, [pc, #44]	@ (800c574 <sys_check_timeouts+0x80>)
 800c548:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c54a:	68b9      	ldr	r1, [r7, #8]
 800c54c:	2006      	movs	r0, #6
 800c54e:	f7f9 fc6d 	bl	8005e2c <memp_free>
    if (handler != NULL) {
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0d3      	beq.n	800c500 <sys_check_timeouts+0xc>
      handler(arg);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6838      	ldr	r0, [r7, #0]
 800c55c:	4798      	blx	r3
  do {
 800c55e:	e7cf      	b.n	800c500 <sys_check_timeouts+0xc>
      return;
 800c560:	bf00      	nop
 800c562:	e000      	b.n	800c566 <sys_check_timeouts+0x72>
      return;
 800c564:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	200082d9 	.word	0x200082d9
 800c570:	2000832c 	.word	0x2000832c
 800c574:	20008330 	.word	0x20008330

0800c578 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c57c:	f002 fc7c 	bl	800ee78 <rand>
 800c580:	4603      	mov	r3, r0
 800c582:	b29b      	uxth	r3, r3
 800c584:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c588:	b29b      	uxth	r3, r3
 800c58a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c58e:	b29a      	uxth	r2, r3
 800c590:	4b01      	ldr	r3, [pc, #4]	@ (800c598 <udp_init+0x20>)
 800c592:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c594:	bf00      	nop
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20000028 	.word	0x20000028

0800c59c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d105      	bne.n	800c5bc <udp_input_local_match+0x20>
 800c5b0:	4b27      	ldr	r3, [pc, #156]	@ (800c650 <udp_input_local_match+0xb4>)
 800c5b2:	2287      	movs	r2, #135	@ 0x87
 800c5b4:	4927      	ldr	r1, [pc, #156]	@ (800c654 <udp_input_local_match+0xb8>)
 800c5b6:	4828      	ldr	r0, [pc, #160]	@ (800c658 <udp_input_local_match+0xbc>)
 800c5b8:	f002 fd5e 	bl	800f078 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d105      	bne.n	800c5ce <udp_input_local_match+0x32>
 800c5c2:	4b23      	ldr	r3, [pc, #140]	@ (800c650 <udp_input_local_match+0xb4>)
 800c5c4:	2288      	movs	r2, #136	@ 0x88
 800c5c6:	4925      	ldr	r1, [pc, #148]	@ (800c65c <udp_input_local_match+0xc0>)
 800c5c8:	4823      	ldr	r0, [pc, #140]	@ (800c658 <udp_input_local_match+0xbc>)
 800c5ca:	f002 fd55 	bl	800f078 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	7a1b      	ldrb	r3, [r3, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00b      	beq.n	800c5ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	7a1a      	ldrb	r2, [r3, #8]
 800c5da:	4b21      	ldr	r3, [pc, #132]	@ (800c660 <udp_input_local_match+0xc4>)
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d001      	beq.n	800c5ee <udp_input_local_match+0x52>
    return 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	e02b      	b.n	800c646 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d018      	beq.n	800c626 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d013      	beq.n	800c622 <udp_input_local_match+0x86>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00f      	beq.n	800c622 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c602:	4b17      	ldr	r3, [pc, #92]	@ (800c660 <udp_input_local_match+0xc4>)
 800c604:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60a:	d00a      	beq.n	800c622 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	4b13      	ldr	r3, [pc, #76]	@ (800c660 <udp_input_local_match+0xc4>)
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	405a      	eors	r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	3308      	adds	r3, #8
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d110      	bne.n	800c644 <udp_input_local_match+0xa8>
          return 1;
 800c622:	2301      	movs	r3, #1
 800c624:	e00f      	b.n	800c646 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d009      	beq.n	800c640 <udp_input_local_match+0xa4>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d005      	beq.n	800c640 <udp_input_local_match+0xa4>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	4b09      	ldr	r3, [pc, #36]	@ (800c660 <udp_input_local_match+0xc4>)
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d101      	bne.n	800c644 <udp_input_local_match+0xa8>
        return 1;
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	08011e5c 	.word	0x08011e5c
 800c654:	08011e8c 	.word	0x08011e8c
 800c658:	08011eb0 	.word	0x08011eb0
 800c65c:	08011ed8 	.word	0x08011ed8
 800c660:	20004d6c 	.word	0x20004d6c

0800c664 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c664:	b590      	push	{r4, r7, lr}
 800c666:	b08d      	sub	sp, #52	@ 0x34
 800c668:	af02      	add	r7, sp, #8
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d105      	bne.n	800c684 <udp_input+0x20>
 800c678:	4b7c      	ldr	r3, [pc, #496]	@ (800c86c <udp_input+0x208>)
 800c67a:	22cf      	movs	r2, #207	@ 0xcf
 800c67c:	497c      	ldr	r1, [pc, #496]	@ (800c870 <udp_input+0x20c>)
 800c67e:	487d      	ldr	r0, [pc, #500]	@ (800c874 <udp_input+0x210>)
 800c680:	f002 fcfa 	bl	800f078 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d105      	bne.n	800c696 <udp_input+0x32>
 800c68a:	4b78      	ldr	r3, [pc, #480]	@ (800c86c <udp_input+0x208>)
 800c68c:	22d0      	movs	r2, #208	@ 0xd0
 800c68e:	497a      	ldr	r1, [pc, #488]	@ (800c878 <udp_input+0x214>)
 800c690:	4878      	ldr	r0, [pc, #480]	@ (800c874 <udp_input+0x210>)
 800c692:	f002 fcf1 	bl	800f078 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	895b      	ldrh	r3, [r3, #10]
 800c69a:	2b07      	cmp	r3, #7
 800c69c:	d803      	bhi.n	800c6a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7fa fa3a 	bl	8006b18 <pbuf_free>
    goto end;
 800c6a4:	e0de      	b.n	800c864 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c6ac:	4b73      	ldr	r3, [pc, #460]	@ (800c87c <udp_input+0x218>)
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	4a72      	ldr	r2, [pc, #456]	@ (800c87c <udp_input+0x218>)
 800c6b2:	6812      	ldr	r2, [r2, #0]
 800c6b4:	4611      	mov	r1, r2
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f001 fc88 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7f8 fec8 	bl	800545c <lwip_htons>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	885b      	ldrh	r3, [r3, #2]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f8 fec0 	bl	800545c <lwip_htons>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6ec:	4b64      	ldr	r3, [pc, #400]	@ (800c880 <udp_input+0x21c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6f2:	e054      	b.n	800c79e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f6:	8a5b      	ldrh	r3, [r3, #18]
 800c6f8:	89fa      	ldrh	r2, [r7, #14]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d14a      	bne.n	800c794 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c6fe:	7cfb      	ldrb	r3, [r7, #19]
 800c700:	461a      	mov	r2, r3
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c706:	f7ff ff49 	bl	800c59c <udp_input_local_match>
 800c70a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d041      	beq.n	800c794 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c712:	7c1b      	ldrb	r3, [r3, #16]
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d11d      	bne.n	800c758 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	61fb      	str	r3, [r7, #28]
 800c726:	e017      	b.n	800c758 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c728:	7cfb      	ldrb	r3, [r7, #19]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d014      	beq.n	800c758 <udp_input+0xf4>
 800c72e:	4b53      	ldr	r3, [pc, #332]	@ (800c87c <udp_input+0x218>)
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	d10f      	bne.n	800c758 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	3304      	adds	r3, #4
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	d008      	beq.n	800c758 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	3304      	adds	r3, #4
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	429a      	cmp	r2, r3
 800c752:	d101      	bne.n	800c758 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	8a9b      	ldrh	r3, [r3, #20]
 800c75c:	8a3a      	ldrh	r2, [r7, #16]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d118      	bne.n	800c794 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c764:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c766:	2b00      	cmp	r3, #0
 800c768:	d005      	beq.n	800c776 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	4b43      	ldr	r3, [pc, #268]	@ (800c87c <udp_input+0x218>)
 800c770:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c772:	429a      	cmp	r2, r3
 800c774:	d10e      	bne.n	800c794 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d014      	beq.n	800c7a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c784:	4b3e      	ldr	r3, [pc, #248]	@ (800c880 <udp_input+0x21c>)
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c78c:	4a3c      	ldr	r2, [pc, #240]	@ (800c880 <udp_input+0x21c>)
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c792:	e008      	b.n	800c7a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c796:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1a7      	bne.n	800c6f4 <udp_input+0x90>
 800c7a4:	e000      	b.n	800c7a8 <udp_input+0x144>
        break;
 800c7a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <udp_input+0x15a>
    for_us = 1;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	76fb      	strb	r3, [r7, #27]
 800c7bc:	e00a      	b.n	800c7d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	4b2d      	ldr	r3, [pc, #180]	@ (800c87c <udp_input+0x218>)
 800c7c6:	695b      	ldr	r3, [r3, #20]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	bf0c      	ite	eq
 800c7cc:	2301      	moveq	r3, #1
 800c7ce:	2300      	movne	r3, #0
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c7d4:	7efb      	ldrb	r3, [r7, #27]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d041      	beq.n	800c85e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c7da:	2108      	movs	r1, #8
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7fa f915 	bl	8006a0c <pbuf_remove_header>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c7e8:	4b20      	ldr	r3, [pc, #128]	@ (800c86c <udp_input+0x208>)
 800c7ea:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c7ee:	4925      	ldr	r1, [pc, #148]	@ (800c884 <udp_input+0x220>)
 800c7f0:	4820      	ldr	r0, [pc, #128]	@ (800c874 <udp_input+0x210>)
 800c7f2:	f002 fc41 	bl	800f078 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7fa f98e 	bl	8006b18 <pbuf_free>
      goto end;
 800c7fc:	e032      	b.n	800c864 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c800:	2b00      	cmp	r3, #0
 800c802:	d012      	beq.n	800c82a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	699c      	ldr	r4, [r3, #24]
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	69d8      	ldr	r0, [r3, #28]
 800c814:	8a3b      	ldrh	r3, [r7, #16]
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	4b1b      	ldr	r3, [pc, #108]	@ (800c888 <udp_input+0x224>)
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c81e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c820:	e021      	b.n	800c866 <udp_input+0x202>
        pbuf_free(p);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7fa f978 	bl	8006b18 <pbuf_free>
        goto end;
 800c828:	e01c      	b.n	800c864 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c82a:	7cfb      	ldrb	r3, [r7, #19]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d112      	bne.n	800c856 <udp_input+0x1f2>
 800c830:	4b12      	ldr	r3, [pc, #72]	@ (800c87c <udp_input+0x218>)
 800c832:	695b      	ldr	r3, [r3, #20]
 800c834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c838:	2be0      	cmp	r3, #224	@ 0xe0
 800c83a:	d00c      	beq.n	800c856 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c83c:	4b0f      	ldr	r3, [pc, #60]	@ (800c87c <udp_input+0x218>)
 800c83e:	899b      	ldrh	r3, [r3, #12]
 800c840:	3308      	adds	r3, #8
 800c842:	b29b      	uxth	r3, r3
 800c844:	b21b      	sxth	r3, r3
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fa f952 	bl	8006af2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c84e:	2103      	movs	r1, #3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f001 f89b 	bl	800d98c <icmp_dest_unreach>
      pbuf_free(p);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7fa f95e 	bl	8006b18 <pbuf_free>
  return;
 800c85c:	e003      	b.n	800c866 <udp_input+0x202>
    pbuf_free(p);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7fa f95a 	bl	8006b18 <pbuf_free>
  return;
 800c864:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c866:	372c      	adds	r7, #44	@ 0x2c
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd90      	pop	{r4, r7, pc}
 800c86c:	08011e5c 	.word	0x08011e5c
 800c870:	08011f00 	.word	0x08011f00
 800c874:	08011eb0 	.word	0x08011eb0
 800c878:	08011f18 	.word	0x08011f18
 800c87c:	20004d6c 	.word	0x20004d6c
 800c880:	20008338 	.word	0x20008338
 800c884:	08011f34 	.word	0x08011f34
 800c888:	20004d7c 	.word	0x20004d7c

0800c88c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01e      	beq.n	800c8da <udp_netif_ip_addr_changed+0x4e>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d01a      	beq.n	800c8da <udp_netif_ip_addr_changed+0x4e>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d017      	beq.n	800c8da <udp_netif_ip_addr_changed+0x4e>
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d013      	beq.n	800c8da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e8 <udp_netif_ip_addr_changed+0x5c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	e00c      	b.n	800c8d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d103      	bne.n	800c8ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1ef      	bne.n	800c8ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c8da:	bf00      	nop
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	20008338 	.word	0x20008338

0800c8ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c8f4:	4915      	ldr	r1, [pc, #84]	@ (800c94c <etharp_free_entry+0x60>)
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	4413      	add	r3, r2
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	440b      	add	r3, r1
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d013      	beq.n	800c930 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c908:	4910      	ldr	r1, [pc, #64]	@ (800c94c <etharp_free_entry+0x60>)
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	4613      	mov	r3, r2
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	4413      	add	r3, r2
 800c912:	00db      	lsls	r3, r3, #3
 800c914:	440b      	add	r3, r1
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fa f8fd 	bl	8006b18 <pbuf_free>
    arp_table[i].q = NULL;
 800c91e:	490b      	ldr	r1, [pc, #44]	@ (800c94c <etharp_free_entry+0x60>)
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	4613      	mov	r3, r2
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	4413      	add	r3, r2
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	440b      	add	r3, r1
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c930:	4906      	ldr	r1, [pc, #24]	@ (800c94c <etharp_free_entry+0x60>)
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	4613      	mov	r3, r2
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	4413      	add	r3, r2
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	440b      	add	r3, r1
 800c93e:	3314      	adds	r3, #20
 800c940:	2200      	movs	r2, #0
 800c942:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	2000833c 	.word	0x2000833c

0800c950 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c956:	2300      	movs	r3, #0
 800c958:	607b      	str	r3, [r7, #4]
 800c95a:	e096      	b.n	800ca8a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c95c:	494f      	ldr	r1, [pc, #316]	@ (800ca9c <etharp_tmr+0x14c>)
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	4613      	mov	r3, r2
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	4413      	add	r3, r2
 800c966:	00db      	lsls	r3, r3, #3
 800c968:	440b      	add	r3, r1
 800c96a:	3314      	adds	r3, #20
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	2b00      	cmp	r3, #0
 800c974:	f000 8086 	beq.w	800ca84 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c978:	4948      	ldr	r1, [pc, #288]	@ (800ca9c <etharp_tmr+0x14c>)
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	4613      	mov	r3, r2
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	4413      	add	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	440b      	add	r3, r1
 800c986:	3312      	adds	r3, #18
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	b298      	uxth	r0, r3
 800c98e:	4943      	ldr	r1, [pc, #268]	@ (800ca9c <etharp_tmr+0x14c>)
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	4413      	add	r3, r2
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	440b      	add	r3, r1
 800c99c:	3312      	adds	r3, #18
 800c99e:	4602      	mov	r2, r0
 800c9a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9a2:	493e      	ldr	r1, [pc, #248]	@ (800ca9c <etharp_tmr+0x14c>)
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	005b      	lsls	r3, r3, #1
 800c9aa:	4413      	add	r3, r2
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	440b      	add	r3, r1
 800c9b0:	3312      	adds	r3, #18
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c9b8:	d215      	bcs.n	800c9e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c9ba:	4938      	ldr	r1, [pc, #224]	@ (800ca9c <etharp_tmr+0x14c>)
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	4413      	add	r3, r2
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	440b      	add	r3, r1
 800c9c8:	3314      	adds	r3, #20
 800c9ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d10e      	bne.n	800c9ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c9d0:	4932      	ldr	r1, [pc, #200]	@ (800ca9c <etharp_tmr+0x14c>)
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	4413      	add	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	440b      	add	r3, r1
 800c9de:	3312      	adds	r3, #18
 800c9e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	d903      	bls.n	800c9ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff ff80 	bl	800c8ec <etharp_free_entry>
 800c9ec:	e04a      	b.n	800ca84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c9ee:	492b      	ldr	r1, [pc, #172]	@ (800ca9c <etharp_tmr+0x14c>)
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	4413      	add	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	440b      	add	r3, r1
 800c9fc:	3314      	adds	r3, #20
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d10a      	bne.n	800ca1a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ca04:	4925      	ldr	r1, [pc, #148]	@ (800ca9c <etharp_tmr+0x14c>)
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	4413      	add	r3, r2
 800ca0e:	00db      	lsls	r3, r3, #3
 800ca10:	440b      	add	r3, r1
 800ca12:	3314      	adds	r3, #20
 800ca14:	2204      	movs	r2, #4
 800ca16:	701a      	strb	r2, [r3, #0]
 800ca18:	e034      	b.n	800ca84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ca1a:	4920      	ldr	r1, [pc, #128]	@ (800ca9c <etharp_tmr+0x14c>)
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	440b      	add	r3, r1
 800ca28:	3314      	adds	r3, #20
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b04      	cmp	r3, #4
 800ca2e:	d10a      	bne.n	800ca46 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ca30:	491a      	ldr	r1, [pc, #104]	@ (800ca9c <etharp_tmr+0x14c>)
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	4613      	mov	r3, r2
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	4413      	add	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	440b      	add	r3, r1
 800ca3e:	3314      	adds	r3, #20
 800ca40:	2202      	movs	r2, #2
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	e01e      	b.n	800ca84 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ca46:	4915      	ldr	r1, [pc, #84]	@ (800ca9c <etharp_tmr+0x14c>)
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	440b      	add	r3, r1
 800ca54:	3314      	adds	r3, #20
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d113      	bne.n	800ca84 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ca5c:	490f      	ldr	r1, [pc, #60]	@ (800ca9c <etharp_tmr+0x14c>)
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	4613      	mov	r3, r2
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	4413      	add	r3, r2
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	440b      	add	r3, r1
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	6818      	ldr	r0, [r3, #0]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	4613      	mov	r3, r2
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	4413      	add	r3, r2
 800ca76:	00db      	lsls	r3, r3, #3
 800ca78:	4a08      	ldr	r2, [pc, #32]	@ (800ca9c <etharp_tmr+0x14c>)
 800ca7a:	4413      	add	r3, r2
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	4619      	mov	r1, r3
 800ca80:	f000 fe6e 	bl	800d760 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3301      	adds	r3, #1
 800ca88:	607b      	str	r3, [r7, #4]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b09      	cmp	r3, #9
 800ca8e:	f77f af65 	ble.w	800c95c <etharp_tmr+0xc>
      }
    }
  }
}
 800ca92:	bf00      	nop
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	2000833c 	.word	0x2000833c

0800caa0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	@ 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	460b      	mov	r3, r1
 800caaa:	607a      	str	r2, [r7, #4]
 800caac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800caae:	230a      	movs	r3, #10
 800cab0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cab2:	230a      	movs	r3, #10
 800cab4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cab6:	230a      	movs	r3, #10
 800cab8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cabe:	230a      	movs	r3, #10
 800cac0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	83bb      	strh	r3, [r7, #28]
 800cac6:	2300      	movs	r3, #0
 800cac8:	837b      	strh	r3, [r7, #26]
 800caca:	2300      	movs	r3, #0
 800cacc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cace:	2300      	movs	r3, #0
 800cad0:	843b      	strh	r3, [r7, #32]
 800cad2:	e0ae      	b.n	800cc32 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cad8:	49a6      	ldr	r1, [pc, #664]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cada:	4613      	mov	r3, r2
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4413      	add	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	440b      	add	r3, r1
 800cae4:	3314      	adds	r3, #20
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800caea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800caee:	2b0a      	cmp	r3, #10
 800caf0:	d105      	bne.n	800cafe <etharp_find_entry+0x5e>
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800caf8:	8c3b      	ldrh	r3, [r7, #32]
 800cafa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cafc:	e095      	b.n	800cc2a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 8092 	beq.w	800cc2a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d009      	beq.n	800cb20 <etharp_find_entry+0x80>
 800cb0c:	7dfb      	ldrb	r3, [r7, #23]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d806      	bhi.n	800cb20 <etharp_find_entry+0x80>
 800cb12:	4b99      	ldr	r3, [pc, #612]	@ (800cd78 <etharp_find_entry+0x2d8>)
 800cb14:	f240 1223 	movw	r2, #291	@ 0x123
 800cb18:	4998      	ldr	r1, [pc, #608]	@ (800cd7c <etharp_find_entry+0x2dc>)
 800cb1a:	4899      	ldr	r0, [pc, #612]	@ (800cd80 <etharp_find_entry+0x2e0>)
 800cb1c:	f002 faac 	bl	800f078 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d020      	beq.n	800cb68 <etharp_find_entry+0xc8>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6819      	ldr	r1, [r3, #0]
 800cb2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb2e:	4891      	ldr	r0, [pc, #580]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cb30:	4613      	mov	r3, r2
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	4413      	add	r3, r2
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	4403      	add	r3, r0
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4299      	cmp	r1, r3
 800cb40:	d112      	bne.n	800cb68 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00c      	beq.n	800cb62 <etharp_find_entry+0xc2>
 800cb48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb4c:	4989      	ldr	r1, [pc, #548]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cb4e:	4613      	mov	r3, r2
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	4413      	add	r3, r2
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	440b      	add	r3, r1
 800cb58:	3308      	adds	r3, #8
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d102      	bne.n	800cb68 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cb62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb66:	e100      	b.n	800cd6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cb68:	7dfb      	ldrb	r3, [r7, #23]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d140      	bne.n	800cbf0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cb6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb72:	4980      	ldr	r1, [pc, #512]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	440b      	add	r3, r1
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d01a      	beq.n	800cbba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cb84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb88:	497a      	ldr	r1, [pc, #488]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	4413      	add	r3, r2
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	440b      	add	r3, r1
 800cb94:	3312      	adds	r3, #18
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	8bba      	ldrh	r2, [r7, #28]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d845      	bhi.n	800cc2a <etharp_find_entry+0x18a>
            old_queue = i;
 800cb9e:	8c3b      	ldrh	r3, [r7, #32]
 800cba0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cba6:	4973      	ldr	r1, [pc, #460]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	440b      	add	r3, r1
 800cbb2:	3312      	adds	r3, #18
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	83bb      	strh	r3, [r7, #28]
 800cbb8:	e037      	b.n	800cc2a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cbba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbbe:	496d      	ldr	r1, [pc, #436]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	005b      	lsls	r3, r3, #1
 800cbc4:	4413      	add	r3, r2
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	440b      	add	r3, r1
 800cbca:	3312      	adds	r3, #18
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	8b7a      	ldrh	r2, [r7, #26]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d82a      	bhi.n	800cc2a <etharp_find_entry+0x18a>
            old_pending = i;
 800cbd4:	8c3b      	ldrh	r3, [r7, #32]
 800cbd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cbd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbdc:	4965      	ldr	r1, [pc, #404]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3312      	adds	r3, #18
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	837b      	strh	r3, [r7, #26]
 800cbee:	e01c      	b.n	800cc2a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d919      	bls.n	800cc2a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cbf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbfa:	495e      	ldr	r1, [pc, #376]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	4413      	add	r3, r2
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	440b      	add	r3, r1
 800cc06:	3312      	adds	r3, #18
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	8b3a      	ldrh	r2, [r7, #24]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d80c      	bhi.n	800cc2a <etharp_find_entry+0x18a>
            old_stable = i;
 800cc10:	8c3b      	ldrh	r3, [r7, #32]
 800cc12:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cc14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc18:	4956      	ldr	r1, [pc, #344]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	4413      	add	r3, r2
 800cc20:	00db      	lsls	r3, r3, #3
 800cc22:	440b      	add	r3, r1
 800cc24:	3312      	adds	r3, #18
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc2a:	8c3b      	ldrh	r3, [r7, #32]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	843b      	strh	r3, [r7, #32]
 800cc32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc36:	2b09      	cmp	r3, #9
 800cc38:	f77f af4c 	ble.w	800cad4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cc3c:	7afb      	ldrb	r3, [r7, #11]
 800cc3e:	f003 0302 	and.w	r3, r3, #2
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d108      	bne.n	800cc58 <etharp_find_entry+0x1b8>
 800cc46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cc4a:	2b0a      	cmp	r3, #10
 800cc4c:	d107      	bne.n	800cc5e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d102      	bne.n	800cc5e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cc58:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5c:	e085      	b.n	800cd6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cc5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cc62:	2b09      	cmp	r3, #9
 800cc64:	dc02      	bgt.n	800cc6c <etharp_find_entry+0x1cc>
    i = empty;
 800cc66:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc68:	843b      	strh	r3, [r7, #32]
 800cc6a:	e039      	b.n	800cce0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cc6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cc70:	2b09      	cmp	r3, #9
 800cc72:	dc14      	bgt.n	800cc9e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cc74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc76:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cc78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc7c:	493d      	ldr	r1, [pc, #244]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cc7e:	4613      	mov	r3, r2
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d018      	beq.n	800ccc0 <etharp_find_entry+0x220>
 800cc8e:	4b3a      	ldr	r3, [pc, #232]	@ (800cd78 <etharp_find_entry+0x2d8>)
 800cc90:	f240 126d 	movw	r2, #365	@ 0x16d
 800cc94:	493b      	ldr	r1, [pc, #236]	@ (800cd84 <etharp_find_entry+0x2e4>)
 800cc96:	483a      	ldr	r0, [pc, #232]	@ (800cd80 <etharp_find_entry+0x2e0>)
 800cc98:	f002 f9ee 	bl	800f078 <iprintf>
 800cc9c:	e010      	b.n	800ccc0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cc9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cca2:	2b09      	cmp	r3, #9
 800cca4:	dc02      	bgt.n	800ccac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cca6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cca8:	843b      	strh	r3, [r7, #32]
 800ccaa:	e009      	b.n	800ccc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ccac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ccb0:	2b09      	cmp	r3, #9
 800ccb2:	dc02      	bgt.n	800ccba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ccb4:	8bfb      	ldrh	r3, [r7, #30]
 800ccb6:	843b      	strh	r3, [r7, #32]
 800ccb8:	e002      	b.n	800ccc0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ccba:	f04f 33ff 	mov.w	r3, #4294967295
 800ccbe:	e054      	b.n	800cd6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ccc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccc4:	2b09      	cmp	r3, #9
 800ccc6:	dd06      	ble.n	800ccd6 <etharp_find_entry+0x236>
 800ccc8:	4b2b      	ldr	r3, [pc, #172]	@ (800cd78 <etharp_find_entry+0x2d8>)
 800ccca:	f240 127f 	movw	r2, #383	@ 0x17f
 800ccce:	492e      	ldr	r1, [pc, #184]	@ (800cd88 <etharp_find_entry+0x2e8>)
 800ccd0:	482b      	ldr	r0, [pc, #172]	@ (800cd80 <etharp_find_entry+0x2e0>)
 800ccd2:	f002 f9d1 	bl	800f078 <iprintf>
    etharp_free_entry(i);
 800ccd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff fe06 	bl	800c8ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cce0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cce4:	2b09      	cmp	r3, #9
 800cce6:	dd06      	ble.n	800ccf6 <etharp_find_entry+0x256>
 800cce8:	4b23      	ldr	r3, [pc, #140]	@ (800cd78 <etharp_find_entry+0x2d8>)
 800ccea:	f240 1283 	movw	r2, #387	@ 0x183
 800ccee:	4926      	ldr	r1, [pc, #152]	@ (800cd88 <etharp_find_entry+0x2e8>)
 800ccf0:	4823      	ldr	r0, [pc, #140]	@ (800cd80 <etharp_find_entry+0x2e0>)
 800ccf2:	f002 f9c1 	bl	800f078 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ccf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccfa:	491e      	ldr	r1, [pc, #120]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	005b      	lsls	r3, r3, #1
 800cd00:	4413      	add	r3, r2
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	440b      	add	r3, r1
 800cd06:	3314      	adds	r3, #20
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d006      	beq.n	800cd1c <etharp_find_entry+0x27c>
 800cd0e:	4b1a      	ldr	r3, [pc, #104]	@ (800cd78 <etharp_find_entry+0x2d8>)
 800cd10:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800cd14:	491d      	ldr	r1, [pc, #116]	@ (800cd8c <etharp_find_entry+0x2ec>)
 800cd16:	481a      	ldr	r0, [pc, #104]	@ (800cd80 <etharp_find_entry+0x2e0>)
 800cd18:	f002 f9ae 	bl	800f078 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00b      	beq.n	800cd3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cd22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6819      	ldr	r1, [r3, #0]
 800cd2a:	4812      	ldr	r0, [pc, #72]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	4413      	add	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	4403      	add	r3, r0
 800cd36:	3304      	adds	r3, #4
 800cd38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cd3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd3e:	490d      	ldr	r1, [pc, #52]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cd40:	4613      	mov	r3, r2
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	4413      	add	r3, r2
 800cd46:	00db      	lsls	r3, r3, #3
 800cd48:	440b      	add	r3, r1
 800cd4a:	3312      	adds	r3, #18
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cd50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd54:	4907      	ldr	r1, [pc, #28]	@ (800cd74 <etharp_find_entry+0x2d4>)
 800cd56:	4613      	mov	r3, r2
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	4413      	add	r3, r2
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	440b      	add	r3, r1
 800cd60:	3308      	adds	r3, #8
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cd66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3728      	adds	r7, #40	@ 0x28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	2000833c 	.word	0x2000833c
 800cd78:	080121c0 	.word	0x080121c0
 800cd7c:	080121f8 	.word	0x080121f8
 800cd80:	08012238 	.word	0x08012238
 800cd84:	08012260 	.word	0x08012260
 800cd88:	08012278 	.word	0x08012278
 800cd8c:	0801228c 	.word	0x0801228c

0800cd90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af02      	add	r7, sp, #8
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cda4:	2b06      	cmp	r3, #6
 800cda6:	d006      	beq.n	800cdb6 <etharp_update_arp_entry+0x26>
 800cda8:	4b48      	ldr	r3, [pc, #288]	@ (800cecc <etharp_update_arp_entry+0x13c>)
 800cdaa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800cdae:	4948      	ldr	r1, [pc, #288]	@ (800ced0 <etharp_update_arp_entry+0x140>)
 800cdb0:	4848      	ldr	r0, [pc, #288]	@ (800ced4 <etharp_update_arp_entry+0x144>)
 800cdb2:	f002 f961 	bl	800f078 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d012      	beq.n	800cde2 <etharp_update_arp_entry+0x52>
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00e      	beq.n	800cde2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68f9      	ldr	r1, [r7, #12]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f001 f8fe 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800cdd0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdde:	2be0      	cmp	r3, #224	@ 0xe0
 800cde0:	d102      	bne.n	800cde8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cde2:	f06f 030f 	mvn.w	r3, #15
 800cde6:	e06c      	b.n	800cec2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	4619      	mov	r1, r3
 800cdee:	68b8      	ldr	r0, [r7, #8]
 800cdf0:	f7ff fe56 	bl	800caa0 <etharp_find_entry>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cdf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	da02      	bge.n	800ce06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ce00:	8afb      	ldrh	r3, [r7, #22]
 800ce02:	b25b      	sxtb	r3, r3
 800ce04:	e05d      	b.n	800cec2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ce06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce0a:	4933      	ldr	r1, [pc, #204]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	4413      	add	r3, r2
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	440b      	add	r3, r1
 800ce16:	3314      	adds	r3, #20
 800ce18:	2202      	movs	r2, #2
 800ce1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ce1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce20:	492d      	ldr	r1, [pc, #180]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce22:	4613      	mov	r3, r2
 800ce24:	005b      	lsls	r3, r3, #1
 800ce26:	4413      	add	r3, r2
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	440b      	add	r3, r1
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ce32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	3308      	adds	r3, #8
 800ce40:	4a25      	ldr	r2, [pc, #148]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce42:	4413      	add	r3, r2
 800ce44:	3304      	adds	r3, #4
 800ce46:	2206      	movs	r2, #6
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f002 f9ef 	bl	800f22e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ce50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce54:	4920      	ldr	r1, [pc, #128]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce56:	4613      	mov	r3, r2
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	440b      	add	r3, r1
 800ce60:	3312      	adds	r3, #18
 800ce62:	2200      	movs	r2, #0
 800ce64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ce66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce6a:	491b      	ldr	r1, [pc, #108]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	4413      	add	r3, r2
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	440b      	add	r3, r1
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d021      	beq.n	800cec0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ce7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce80:	4915      	ldr	r1, [pc, #84]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	440b      	add	r3, r1
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ce90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce94:	4910      	ldr	r1, [pc, #64]	@ (800ced8 <etharp_update_arp_entry+0x148>)
 800ce96:	4613      	mov	r3, r2
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	440b      	add	r3, r1
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ceaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6939      	ldr	r1, [r7, #16]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f001 ff97 	bl	800ede8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ceba:	6938      	ldr	r0, [r7, #16]
 800cebc:	f7f9 fe2c 	bl	8006b18 <pbuf_free>
  }
  return ERR_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	080121c0 	.word	0x080121c0
 800ced0:	080122b8 	.word	0x080122b8
 800ced4:	08012238 	.word	0x08012238
 800ced8:	2000833c 	.word	0x2000833c

0800cedc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cee4:	2300      	movs	r3, #0
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e01e      	b.n	800cf28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ceea:	4913      	ldr	r1, [pc, #76]	@ (800cf38 <etharp_cleanup_netif+0x5c>)
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	4613      	mov	r3, r2
 800cef0:	005b      	lsls	r3, r3, #1
 800cef2:	4413      	add	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	440b      	add	r3, r1
 800cef8:	3314      	adds	r3, #20
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cefe:	7afb      	ldrb	r3, [r7, #11]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00e      	beq.n	800cf22 <etharp_cleanup_netif+0x46>
 800cf04:	490c      	ldr	r1, [pc, #48]	@ (800cf38 <etharp_cleanup_netif+0x5c>)
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	3308      	adds	r3, #8
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d102      	bne.n	800cf22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f7ff fce5 	bl	800c8ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3301      	adds	r3, #1
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b09      	cmp	r3, #9
 800cf2c:	dddd      	ble.n	800ceea <etharp_cleanup_netif+0xe>
    }
  }
}
 800cf2e:	bf00      	nop
 800cf30:	bf00      	nop
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	2000833c 	.word	0x2000833c

0800cf3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cf3c:	b5b0      	push	{r4, r5, r7, lr}
 800cf3e:	b08a      	sub	sp, #40	@ 0x28
 800cf40:	af04      	add	r7, sp, #16
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d107      	bne.n	800cf5c <etharp_input+0x20>
 800cf4c:	4b3d      	ldr	r3, [pc, #244]	@ (800d044 <etharp_input+0x108>)
 800cf4e:	f240 228a 	movw	r2, #650	@ 0x28a
 800cf52:	493d      	ldr	r1, [pc, #244]	@ (800d048 <etharp_input+0x10c>)
 800cf54:	483d      	ldr	r0, [pc, #244]	@ (800d04c <etharp_input+0x110>)
 800cf56:	f002 f88f 	bl	800f078 <iprintf>
 800cf5a:	e06f      	b.n	800d03c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf6c:	d10c      	bne.n	800cf88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cf72:	2b06      	cmp	r3, #6
 800cf74:	d108      	bne.n	800cf88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cf7a:	2b04      	cmp	r3, #4
 800cf7c:	d104      	bne.n	800cf88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	885b      	ldrh	r3, [r3, #2]
 800cf82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cf84:	2b08      	cmp	r3, #8
 800cf86:	d003      	beq.n	800cf90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7f9 fdc5 	bl	8006b18 <pbuf_free>
    return;
 800cf8e:	e055      	b.n	800d03c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	330e      	adds	r3, #14
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	3318      	adds	r3, #24
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <etharp_input+0x74>
    for_us = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	75fb      	strb	r3, [r7, #23]
 800cfae:	e009      	b.n	800cfc4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	3304      	adds	r3, #4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	bf0c      	ite	eq
 800cfbc:	2301      	moveq	r3, #1
 800cfbe:	2300      	movne	r3, #0
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	f103 0208 	add.w	r2, r3, #8
 800cfca:	7dfb      	ldrb	r3, [r7, #23]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <etharp_input+0x98>
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e000      	b.n	800cfd6 <etharp_input+0x9a>
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	f107 010c 	add.w	r1, r7, #12
 800cfda:	6838      	ldr	r0, [r7, #0]
 800cfdc:	f7ff fed8 	bl	800cd90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	88db      	ldrh	r3, [r3, #6]
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfea:	d003      	beq.n	800cff4 <etharp_input+0xb8>
 800cfec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cff0:	d01e      	beq.n	800d030 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cff2:	e020      	b.n	800d036 <etharp_input+0xfa>
      if (for_us) {
 800cff4:	7dfb      	ldrb	r3, [r7, #23]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01c      	beq.n	800d034 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d014:	2102      	movs	r1, #2
 800d016:	9103      	str	r1, [sp, #12]
 800d018:	f107 010c 	add.w	r1, r7, #12
 800d01c:	9102      	str	r1, [sp, #8]
 800d01e:	9201      	str	r2, [sp, #4]
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	462b      	mov	r3, r5
 800d024:	4622      	mov	r2, r4
 800d026:	4601      	mov	r1, r0
 800d028:	6838      	ldr	r0, [r7, #0]
 800d02a:	f000 faeb 	bl	800d604 <etharp_raw>
      break;
 800d02e:	e001      	b.n	800d034 <etharp_input+0xf8>
      break;
 800d030:	bf00      	nop
 800d032:	e000      	b.n	800d036 <etharp_input+0xfa>
      break;
 800d034:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7f9 fd6e 	bl	8006b18 <pbuf_free>
}
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bdb0      	pop	{r4, r5, r7, pc}
 800d042:	bf00      	nop
 800d044:	080121c0 	.word	0x080121c0
 800d048:	08012310 	.word	0x08012310
 800d04c:	08012238 	.word	0x08012238

0800d050 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af02      	add	r7, sp, #8
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	4613      	mov	r3, r2
 800d05c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d05e:	79fa      	ldrb	r2, [r7, #7]
 800d060:	4944      	ldr	r1, [pc, #272]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d062:	4613      	mov	r3, r2
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	4413      	add	r3, r2
 800d068:	00db      	lsls	r3, r3, #3
 800d06a:	440b      	add	r3, r1
 800d06c:	3314      	adds	r3, #20
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d806      	bhi.n	800d082 <etharp_output_to_arp_index+0x32>
 800d074:	4b40      	ldr	r3, [pc, #256]	@ (800d178 <etharp_output_to_arp_index+0x128>)
 800d076:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d07a:	4940      	ldr	r1, [pc, #256]	@ (800d17c <etharp_output_to_arp_index+0x12c>)
 800d07c:	4840      	ldr	r0, [pc, #256]	@ (800d180 <etharp_output_to_arp_index+0x130>)
 800d07e:	f001 fffb 	bl	800f078 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d082:	79fa      	ldrb	r2, [r7, #7]
 800d084:	493b      	ldr	r1, [pc, #236]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d086:	4613      	mov	r3, r2
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	4413      	add	r3, r2
 800d08c:	00db      	lsls	r3, r3, #3
 800d08e:	440b      	add	r3, r1
 800d090:	3314      	adds	r3, #20
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d153      	bne.n	800d140 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d098:	79fa      	ldrb	r2, [r7, #7]
 800d09a:	4936      	ldr	r1, [pc, #216]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d09c:	4613      	mov	r3, r2
 800d09e:	005b      	lsls	r3, r3, #1
 800d0a0:	4413      	add	r3, r2
 800d0a2:	00db      	lsls	r3, r3, #3
 800d0a4:	440b      	add	r3, r1
 800d0a6:	3312      	adds	r3, #18
 800d0a8:	881b      	ldrh	r3, [r3, #0]
 800d0aa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d0ae:	d919      	bls.n	800d0e4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d0b0:	79fa      	ldrb	r2, [r7, #7]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	4a2e      	ldr	r2, [pc, #184]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d0bc:	4413      	add	r3, r2
 800d0be:	3304      	adds	r3, #4
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 fb4c 	bl	800d760 <etharp_request>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d138      	bne.n	800d140 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d0ce:	79fa      	ldrb	r2, [r7, #7]
 800d0d0:	4928      	ldr	r1, [pc, #160]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	4413      	add	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	440b      	add	r3, r1
 800d0dc:	3314      	adds	r3, #20
 800d0de:	2203      	movs	r2, #3
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	e02d      	b.n	800d140 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d0e4:	79fa      	ldrb	r2, [r7, #7]
 800d0e6:	4923      	ldr	r1, [pc, #140]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	4413      	add	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	440b      	add	r3, r1
 800d0f2:	3312      	adds	r3, #18
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d0fa:	d321      	bcc.n	800d140 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d0fc:	79fa      	ldrb	r2, [r7, #7]
 800d0fe:	4613      	mov	r3, r2
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	4413      	add	r3, r2
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	4a1b      	ldr	r2, [pc, #108]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d108:	4413      	add	r3, r2
 800d10a:	1d19      	adds	r1, r3, #4
 800d10c:	79fa      	ldrb	r2, [r7, #7]
 800d10e:	4613      	mov	r3, r2
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	4413      	add	r3, r2
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	3308      	adds	r3, #8
 800d118:	4a16      	ldr	r2, [pc, #88]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d11a:	4413      	add	r3, r2
 800d11c:	3304      	adds	r3, #4
 800d11e:	461a      	mov	r2, r3
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 fafb 	bl	800d71c <etharp_request_dst>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d109      	bne.n	800d140 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d12c:	79fa      	ldrb	r2, [r7, #7]
 800d12e:	4911      	ldr	r1, [pc, #68]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d130:	4613      	mov	r3, r2
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	4413      	add	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	440b      	add	r3, r1
 800d13a:	3314      	adds	r3, #20
 800d13c:	2203      	movs	r2, #3
 800d13e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d146:	79fa      	ldrb	r2, [r7, #7]
 800d148:	4613      	mov	r3, r2
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	4413      	add	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	3308      	adds	r3, #8
 800d152:	4a08      	ldr	r2, [pc, #32]	@ (800d174 <etharp_output_to_arp_index+0x124>)
 800d154:	4413      	add	r3, r2
 800d156:	3304      	adds	r3, #4
 800d158:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d15c:	9200      	str	r2, [sp, #0]
 800d15e:	460a      	mov	r2, r1
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f001 fe40 	bl	800ede8 <ethernet_output>
 800d168:	4603      	mov	r3, r0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000833c 	.word	0x2000833c
 800d178:	080121c0 	.word	0x080121c0
 800d17c:	08012330 	.word	0x08012330
 800d180:	08012238 	.word	0x08012238

0800d184 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b08a      	sub	sp, #40	@ 0x28
 800d188:	af02      	add	r7, sp, #8
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <etharp_output+0x24>
 800d19a:	4b73      	ldr	r3, [pc, #460]	@ (800d368 <etharp_output+0x1e4>)
 800d19c:	f240 321e 	movw	r2, #798	@ 0x31e
 800d1a0:	4972      	ldr	r1, [pc, #456]	@ (800d36c <etharp_output+0x1e8>)
 800d1a2:	4873      	ldr	r0, [pc, #460]	@ (800d370 <etharp_output+0x1ec>)
 800d1a4:	f001 ff68 	bl	800f078 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d106      	bne.n	800d1bc <etharp_output+0x38>
 800d1ae:	4b6e      	ldr	r3, [pc, #440]	@ (800d368 <etharp_output+0x1e4>)
 800d1b0:	f240 321f 	movw	r2, #799	@ 0x31f
 800d1b4:	496f      	ldr	r1, [pc, #444]	@ (800d374 <etharp_output+0x1f0>)
 800d1b6:	486e      	ldr	r0, [pc, #440]	@ (800d370 <etharp_output+0x1ec>)
 800d1b8:	f001 ff5e 	bl	800f078 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <etharp_output+0x4c>
 800d1c2:	4b69      	ldr	r3, [pc, #420]	@ (800d368 <etharp_output+0x1e4>)
 800d1c4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d1c8:	496b      	ldr	r1, [pc, #428]	@ (800d378 <etharp_output+0x1f4>)
 800d1ca:	4869      	ldr	r0, [pc, #420]	@ (800d370 <etharp_output+0x1ec>)
 800d1cc:	f001 ff54 	bl	800f078 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68f9      	ldr	r1, [r7, #12]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fef8 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d1e2:	4b66      	ldr	r3, [pc, #408]	@ (800d37c <etharp_output+0x1f8>)
 800d1e4:	61fb      	str	r3, [r7, #28]
 800d1e6:	e0af      	b.n	800d348 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1f0:	2be0      	cmp	r3, #224	@ 0xe0
 800d1f2:	d118      	bne.n	800d226 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d1fc:	235e      	movs	r3, #94	@ 0x5e
 800d1fe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3301      	adds	r3, #1
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	3302      	adds	r3, #2
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3303      	adds	r3, #3
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d21e:	f107 0310 	add.w	r3, r7, #16
 800d222:	61fb      	str	r3, [r7, #28]
 800d224:	e090      	b.n	800d348 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3304      	adds	r3, #4
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	405a      	eors	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	3308      	adds	r3, #8
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4013      	ands	r3, r2
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d012      	beq.n	800d264 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d244:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d248:	4293      	cmp	r3, r2
 800d24a:	d00b      	beq.n	800d264 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	330c      	adds	r3, #12
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	330c      	adds	r3, #12
 800d25a:	61bb      	str	r3, [r7, #24]
 800d25c:	e002      	b.n	800d264 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d25e:	f06f 0303 	mvn.w	r3, #3
 800d262:	e07d      	b.n	800d360 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d264:	4b46      	ldr	r3, [pc, #280]	@ (800d380 <etharp_output+0x1fc>)
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	4619      	mov	r1, r3
 800d26a:	4a46      	ldr	r2, [pc, #280]	@ (800d384 <etharp_output+0x200>)
 800d26c:	460b      	mov	r3, r1
 800d26e:	005b      	lsls	r3, r3, #1
 800d270:	440b      	add	r3, r1
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	4413      	add	r3, r2
 800d276:	3314      	adds	r3, #20
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d925      	bls.n	800d2ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d27e:	4b40      	ldr	r3, [pc, #256]	@ (800d380 <etharp_output+0x1fc>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	4619      	mov	r1, r3
 800d284:	4a3f      	ldr	r2, [pc, #252]	@ (800d384 <etharp_output+0x200>)
 800d286:	460b      	mov	r3, r1
 800d288:	005b      	lsls	r3, r3, #1
 800d28a:	440b      	add	r3, r1
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	4413      	add	r3, r2
 800d290:	3308      	adds	r3, #8
 800d292:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	429a      	cmp	r2, r3
 800d298:	d117      	bne.n	800d2ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4b38      	ldr	r3, [pc, #224]	@ (800d380 <etharp_output+0x1fc>)
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	4937      	ldr	r1, [pc, #220]	@ (800d384 <etharp_output+0x200>)
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	4403      	add	r3, r0
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	440b      	add	r3, r1
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d108      	bne.n	800d2ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d2b8:	4b31      	ldr	r3, [pc, #196]	@ (800d380 <etharp_output+0x1fc>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	68b9      	ldr	r1, [r7, #8]
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f7ff fec5 	bl	800d050 <etharp_output_to_arp_index>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	e04a      	b.n	800d360 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	75fb      	strb	r3, [r7, #23]
 800d2ce:	e031      	b.n	800d334 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d2d0:	7dfa      	ldrb	r2, [r7, #23]
 800d2d2:	492c      	ldr	r1, [pc, #176]	@ (800d384 <etharp_output+0x200>)
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	4413      	add	r3, r2
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	440b      	add	r3, r1
 800d2de:	3314      	adds	r3, #20
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d923      	bls.n	800d32e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d2e6:	7dfa      	ldrb	r2, [r7, #23]
 800d2e8:	4926      	ldr	r1, [pc, #152]	@ (800d384 <etharp_output+0x200>)
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	4413      	add	r3, r2
 800d2f0:	00db      	lsls	r3, r3, #3
 800d2f2:	440b      	add	r3, r1
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d117      	bne.n	800d32e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	6819      	ldr	r1, [r3, #0]
 800d302:	7dfa      	ldrb	r2, [r7, #23]
 800d304:	481f      	ldr	r0, [pc, #124]	@ (800d384 <etharp_output+0x200>)
 800d306:	4613      	mov	r3, r2
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	00db      	lsls	r3, r3, #3
 800d30e:	4403      	add	r3, r0
 800d310:	3304      	adds	r3, #4
 800d312:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d314:	4299      	cmp	r1, r3
 800d316:	d10a      	bne.n	800d32e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d318:	4a19      	ldr	r2, [pc, #100]	@ (800d380 <etharp_output+0x1fc>)
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
 800d31c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	461a      	mov	r2, r3
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7ff fe93 	bl	800d050 <etharp_output_to_arp_index>
 800d32a:	4603      	mov	r3, r0
 800d32c:	e018      	b.n	800d360 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d32e:	7dfb      	ldrb	r3, [r7, #23]
 800d330:	3301      	adds	r3, #1
 800d332:	75fb      	strb	r3, [r7, #23]
 800d334:	7dfb      	ldrb	r3, [r7, #23]
 800d336:	2b09      	cmp	r3, #9
 800d338:	d9ca      	bls.n	800d2d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	69b9      	ldr	r1, [r7, #24]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f000 f822 	bl	800d388 <etharp_query>
 800d344:	4603      	mov	r3, r0
 800d346:	e00b      	b.n	800d360 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d34e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	68b9      	ldr	r1, [r7, #8]
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f001 fd45 	bl	800ede8 <ethernet_output>
 800d35e:	4603      	mov	r3, r0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3720      	adds	r7, #32
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	080121c0 	.word	0x080121c0
 800d36c:	08012310 	.word	0x08012310
 800d370:	08012238 	.word	0x08012238
 800d374:	08012360 	.word	0x08012360
 800d378:	08012300 	.word	0x08012300
 800d37c:	0801297c 	.word	0x0801297c
 800d380:	2000842c 	.word	0x2000842c
 800d384:	2000833c 	.word	0x2000833c

0800d388 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b08c      	sub	sp, #48	@ 0x30
 800d38c:	af02      	add	r7, sp, #8
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3326      	adds	r3, #38	@ 0x26
 800d398:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d39a:	23ff      	movs	r3, #255	@ 0xff
 800d39c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68f9      	ldr	r1, [r7, #12]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 fe0e 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10c      	bne.n	800d3d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3be:	2be0      	cmp	r3, #224	@ 0xe0
 800d3c0:	d006      	beq.n	800d3d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d003      	beq.n	800d3d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d102      	bne.n	800d3d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d3d0:	f06f 030f 	mvn.w	r3, #15
 800d3d4:	e101      	b.n	800d5da <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	2101      	movs	r1, #1
 800d3da:	68b8      	ldr	r0, [r7, #8]
 800d3dc:	f7ff fb60 	bl	800caa0 <etharp_find_entry>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d3e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	da02      	bge.n	800d3f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d3ec:	8a7b      	ldrh	r3, [r7, #18]
 800d3ee:	b25b      	sxtb	r3, r3
 800d3f0:	e0f3      	b.n	800d5da <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d3f2:	8a7b      	ldrh	r3, [r7, #18]
 800d3f4:	2b7e      	cmp	r3, #126	@ 0x7e
 800d3f6:	d906      	bls.n	800d406 <etharp_query+0x7e>
 800d3f8:	4b7a      	ldr	r3, [pc, #488]	@ (800d5e4 <etharp_query+0x25c>)
 800d3fa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d3fe:	497a      	ldr	r1, [pc, #488]	@ (800d5e8 <etharp_query+0x260>)
 800d400:	487a      	ldr	r0, [pc, #488]	@ (800d5ec <etharp_query+0x264>)
 800d402:	f001 fe39 	bl	800f078 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d406:	8a7b      	ldrh	r3, [r7, #18]
 800d408:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d40a:	7c7a      	ldrb	r2, [r7, #17]
 800d40c:	4978      	ldr	r1, [pc, #480]	@ (800d5f0 <etharp_query+0x268>)
 800d40e:	4613      	mov	r3, r2
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	4413      	add	r3, r2
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	440b      	add	r3, r1
 800d418:	3314      	adds	r3, #20
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d115      	bne.n	800d44c <etharp_query+0xc4>
    is_new_entry = 1;
 800d420:	2301      	movs	r3, #1
 800d422:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d424:	7c7a      	ldrb	r2, [r7, #17]
 800d426:	4972      	ldr	r1, [pc, #456]	@ (800d5f0 <etharp_query+0x268>)
 800d428:	4613      	mov	r3, r2
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	4413      	add	r3, r2
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	440b      	add	r3, r1
 800d432:	3314      	adds	r3, #20
 800d434:	2201      	movs	r2, #1
 800d436:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d438:	7c7a      	ldrb	r2, [r7, #17]
 800d43a:	496d      	ldr	r1, [pc, #436]	@ (800d5f0 <etharp_query+0x268>)
 800d43c:	4613      	mov	r3, r2
 800d43e:	005b      	lsls	r3, r3, #1
 800d440:	4413      	add	r3, r2
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	440b      	add	r3, r1
 800d446:	3308      	adds	r3, #8
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d44c:	7c7a      	ldrb	r2, [r7, #17]
 800d44e:	4968      	ldr	r1, [pc, #416]	@ (800d5f0 <etharp_query+0x268>)
 800d450:	4613      	mov	r3, r2
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	4413      	add	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	440b      	add	r3, r1
 800d45a:	3314      	adds	r3, #20
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d011      	beq.n	800d486 <etharp_query+0xfe>
 800d462:	7c7a      	ldrb	r2, [r7, #17]
 800d464:	4962      	ldr	r1, [pc, #392]	@ (800d5f0 <etharp_query+0x268>)
 800d466:	4613      	mov	r3, r2
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	4413      	add	r3, r2
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	440b      	add	r3, r1
 800d470:	3314      	adds	r3, #20
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d806      	bhi.n	800d486 <etharp_query+0xfe>
 800d478:	4b5a      	ldr	r3, [pc, #360]	@ (800d5e4 <etharp_query+0x25c>)
 800d47a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d47e:	495d      	ldr	r1, [pc, #372]	@ (800d5f4 <etharp_query+0x26c>)
 800d480:	485a      	ldr	r0, [pc, #360]	@ (800d5ec <etharp_query+0x264>)
 800d482:	f001 fdf9 	bl	800f078 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <etharp_query+0x10a>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10c      	bne.n	800d4ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d492:	68b9      	ldr	r1, [r7, #8]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 f963 	bl	800d760 <etharp_request>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d102      	bne.n	800d4ac <etharp_query+0x124>
      return result;
 800d4a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d4aa:	e096      	b.n	800d5da <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d106      	bne.n	800d4c0 <etharp_query+0x138>
 800d4b2:	4b4c      	ldr	r3, [pc, #304]	@ (800d5e4 <etharp_query+0x25c>)
 800d4b4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d4b8:	494f      	ldr	r1, [pc, #316]	@ (800d5f8 <etharp_query+0x270>)
 800d4ba:	484c      	ldr	r0, [pc, #304]	@ (800d5ec <etharp_query+0x264>)
 800d4bc:	f001 fddc 	bl	800f078 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d4c0:	7c7a      	ldrb	r2, [r7, #17]
 800d4c2:	494b      	ldr	r1, [pc, #300]	@ (800d5f0 <etharp_query+0x268>)
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	4413      	add	r3, r2
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	440b      	add	r3, r1
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d917      	bls.n	800d506 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d4d6:	4a49      	ldr	r2, [pc, #292]	@ (800d5fc <etharp_query+0x274>)
 800d4d8:	7c7b      	ldrb	r3, [r7, #17]
 800d4da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d4dc:	7c7a      	ldrb	r2, [r7, #17]
 800d4de:	4613      	mov	r3, r2
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	4413      	add	r3, r2
 800d4e4:	00db      	lsls	r3, r3, #3
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	4a41      	ldr	r2, [pc, #260]	@ (800d5f0 <etharp_query+0x268>)
 800d4ea:	4413      	add	r3, r2
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4f2:	9200      	str	r2, [sp, #0]
 800d4f4:	697a      	ldr	r2, [r7, #20]
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f001 fc75 	bl	800ede8 <ethernet_output>
 800d4fe:	4603      	mov	r3, r0
 800d500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d504:	e067      	b.n	800d5d6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d506:	7c7a      	ldrb	r2, [r7, #17]
 800d508:	4939      	ldr	r1, [pc, #228]	@ (800d5f0 <etharp_query+0x268>)
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	440b      	add	r3, r1
 800d514:	3314      	adds	r3, #20
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d15c      	bne.n	800d5d6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d524:	e01c      	b.n	800d560 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	895a      	ldrh	r2, [r3, #10]
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	891b      	ldrh	r3, [r3, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d10a      	bne.n	800d548 <etharp_query+0x1c0>
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <etharp_query+0x1c0>
 800d53a:	4b2a      	ldr	r3, [pc, #168]	@ (800d5e4 <etharp_query+0x25c>)
 800d53c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d540:	492f      	ldr	r1, [pc, #188]	@ (800d600 <etharp_query+0x278>)
 800d542:	482a      	ldr	r0, [pc, #168]	@ (800d5ec <etharp_query+0x264>)
 800d544:	f001 fd98 	bl	800f078 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	7b1b      	ldrb	r3, [r3, #12]
 800d54c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <etharp_query+0x1d2>
        copy_needed = 1;
 800d554:	2301      	movs	r3, #1
 800d556:	61bb      	str	r3, [r7, #24]
        break;
 800d558:	e005      	b.n	800d566 <etharp_query+0x1de>
      }
      p = p->next;
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1df      	bne.n	800d526 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d007      	beq.n	800d57c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d572:	200e      	movs	r0, #14
 800d574:	f7f9 fd2c 	bl	8006fd0 <pbuf_clone>
 800d578:	61f8      	str	r0, [r7, #28]
 800d57a:	e004      	b.n	800d586 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d580:	69f8      	ldr	r0, [r7, #28]
 800d582:	f7f9 fb69 	bl	8006c58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d021      	beq.n	800d5d0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d58c:	7c7a      	ldrb	r2, [r7, #17]
 800d58e:	4918      	ldr	r1, [pc, #96]	@ (800d5f0 <etharp_query+0x268>)
 800d590:	4613      	mov	r3, r2
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	4413      	add	r3, r2
 800d596:	00db      	lsls	r3, r3, #3
 800d598:	440b      	add	r3, r1
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00a      	beq.n	800d5b6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d5a0:	7c7a      	ldrb	r2, [r7, #17]
 800d5a2:	4913      	ldr	r1, [pc, #76]	@ (800d5f0 <etharp_query+0x268>)
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	4413      	add	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	440b      	add	r3, r1
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f9 fab1 	bl	8006b18 <pbuf_free>
      }
      arp_table[i].q = p;
 800d5b6:	7c7a      	ldrb	r2, [r7, #17]
 800d5b8:	490d      	ldr	r1, [pc, #52]	@ (800d5f0 <etharp_query+0x268>)
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	005b      	lsls	r3, r3, #1
 800d5be:	4413      	add	r3, r2
 800d5c0:	00db      	lsls	r3, r3, #3
 800d5c2:	440b      	add	r3, r1
 800d5c4:	69fa      	ldr	r2, [r7, #28]
 800d5c6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d5ce:	e002      	b.n	800d5d6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d5d0:	23ff      	movs	r3, #255	@ 0xff
 800d5d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d5d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3728      	adds	r7, #40	@ 0x28
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	080121c0 	.word	0x080121c0
 800d5e8:	0801236c 	.word	0x0801236c
 800d5ec:	08012238 	.word	0x08012238
 800d5f0:	2000833c 	.word	0x2000833c
 800d5f4:	0801237c 	.word	0x0801237c
 800d5f8:	08012360 	.word	0x08012360
 800d5fc:	2000842c 	.word	0x2000842c
 800d600:	080123a4 	.word	0x080123a4

0800d604 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	@ 0x28
 800d608:	af02      	add	r7, sp, #8
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <etharp_raw+0x26>
 800d61c:	4b3a      	ldr	r3, [pc, #232]	@ (800d708 <etharp_raw+0x104>)
 800d61e:	f240 4257 	movw	r2, #1111	@ 0x457
 800d622:	493a      	ldr	r1, [pc, #232]	@ (800d70c <etharp_raw+0x108>)
 800d624:	483a      	ldr	r0, [pc, #232]	@ (800d710 <etharp_raw+0x10c>)
 800d626:	f001 fd27 	bl	800f078 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d62a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d62e:	211c      	movs	r1, #28
 800d630:	200e      	movs	r0, #14
 800d632:	f7f8 ff8d 	bl	8006550 <pbuf_alloc>
 800d636:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d102      	bne.n	800d644 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d63e:	f04f 33ff 	mov.w	r3, #4294967295
 800d642:	e05d      	b.n	800d700 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	895b      	ldrh	r3, [r3, #10]
 800d648:	2b1b      	cmp	r3, #27
 800d64a:	d806      	bhi.n	800d65a <etharp_raw+0x56>
 800d64c:	4b2e      	ldr	r3, [pc, #184]	@ (800d708 <etharp_raw+0x104>)
 800d64e:	f240 4262 	movw	r2, #1122	@ 0x462
 800d652:	4930      	ldr	r1, [pc, #192]	@ (800d714 <etharp_raw+0x110>)
 800d654:	482e      	ldr	r0, [pc, #184]	@ (800d710 <etharp_raw+0x10c>)
 800d656:	f001 fd0f 	bl	800f078 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d660:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d662:	4618      	mov	r0, r3
 800d664:	f7f7 fefa 	bl	800545c <lwip_htons>
 800d668:	4603      	mov	r3, r0
 800d66a:	461a      	mov	r2, r3
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d676:	2b06      	cmp	r3, #6
 800d678:	d006      	beq.n	800d688 <etharp_raw+0x84>
 800d67a:	4b23      	ldr	r3, [pc, #140]	@ (800d708 <etharp_raw+0x104>)
 800d67c:	f240 4269 	movw	r2, #1129	@ 0x469
 800d680:	4925      	ldr	r1, [pc, #148]	@ (800d718 <etharp_raw+0x114>)
 800d682:	4823      	ldr	r0, [pc, #140]	@ (800d710 <etharp_raw+0x10c>)
 800d684:	f001 fcf8 	bl	800f078 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	3308      	adds	r3, #8
 800d68c:	2206      	movs	r2, #6
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	f001 fdcc 	bl	800f22e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	3312      	adds	r3, #18
 800d69a:	2206      	movs	r2, #6
 800d69c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 fdc5 	bl	800f22e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	330e      	adds	r3, #14
 800d6a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6aa:	6812      	ldr	r2, [r2, #0]
 800d6ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	3318      	adds	r3, #24
 800d6b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b4:	6812      	ldr	r2, [r2, #0]
 800d6b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f042 0201 	orr.w	r2, r2, #1
 800d6c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f042 0208 	orr.w	r2, r2, #8
 800d6ce:	709a      	strb	r2, [r3, #2]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	2206      	movs	r2, #6
 800d6d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	2204      	movs	r2, #4
 800d6de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d6e0:	f640 0306 	movw	r3, #2054	@ 0x806
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	69b9      	ldr	r1, [r7, #24]
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f001 fb7b 	bl	800ede8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d6f2:	69b8      	ldr	r0, [r7, #24]
 800d6f4:	f7f9 fa10 	bl	8006b18 <pbuf_free>
  p = NULL;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d6fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d700:	4618      	mov	r0, r3
 800d702:	3720      	adds	r7, #32
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	080121c0 	.word	0x080121c0
 800d70c:	08012310 	.word	0x08012310
 800d710:	08012238 	.word	0x08012238
 800d714:	080123c0 	.word	0x080123c0
 800d718:	080123f4 	.word	0x080123f4

0800d71c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af04      	add	r7, sp, #16
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d738:	2201      	movs	r2, #1
 800d73a:	9203      	str	r2, [sp, #12]
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	9202      	str	r2, [sp, #8]
 800d740:	4a06      	ldr	r2, [pc, #24]	@ (800d75c <etharp_request_dst+0x40>)
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	4603      	mov	r3, r0
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f7ff ff5a 	bl	800d604 <etharp_raw>
 800d750:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d752:	4618      	mov	r0, r3
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	08012984 	.word	0x08012984

0800d760 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d76a:	4a05      	ldr	r2, [pc, #20]	@ (800d780 <etharp_request+0x20>)
 800d76c:	6839      	ldr	r1, [r7, #0]
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff ffd4 	bl	800d71c <etharp_request_dst>
 800d774:	4603      	mov	r3, r0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	0801297c 	.word	0x0801297c

0800d784 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08e      	sub	sp, #56	@ 0x38
 800d788:	af04      	add	r7, sp, #16
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d78e:	4b79      	ldr	r3, [pc, #484]	@ (800d974 <icmp_input+0x1f0>)
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	f003 030f 	and.w	r3, r3, #15
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d7a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7a6:	2b13      	cmp	r3, #19
 800d7a8:	f240 80cd 	bls.w	800d946 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	895b      	ldrh	r3, [r3, #10]
 800d7b0:	2b03      	cmp	r3, #3
 800d7b2:	f240 80ca 	bls.w	800d94a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d7c0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	f000 80b7 	beq.w	800d938 <icmp_input+0x1b4>
 800d7ca:	2b08      	cmp	r3, #8
 800d7cc:	f040 80b7 	bne.w	800d93e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d7d0:	4b69      	ldr	r3, [pc, #420]	@ (800d978 <icmp_input+0x1f4>)
 800d7d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d7d4:	4b67      	ldr	r3, [pc, #412]	@ (800d974 <icmp_input+0x1f0>)
 800d7d6:	695b      	ldr	r3, [r3, #20]
 800d7d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d7dc:	2be0      	cmp	r3, #224	@ 0xe0
 800d7de:	f000 80bb 	beq.w	800d958 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d7e2:	4b64      	ldr	r3, [pc, #400]	@ (800d974 <icmp_input+0x1f0>)
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	4a63      	ldr	r2, [pc, #396]	@ (800d974 <icmp_input+0x1f0>)
 800d7e8:	6812      	ldr	r2, [r2, #0]
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 fbed 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f040 80b1 	bne.w	800d95c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	891b      	ldrh	r3, [r3, #8]
 800d7fe:	2b07      	cmp	r3, #7
 800d800:	f240 80a5 	bls.w	800d94e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d804:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d806:	330e      	adds	r3, #14
 800d808:	4619      	mov	r1, r3
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7f9 f8ee 	bl	80069ec <pbuf_add_header>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d04b      	beq.n	800d8ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	891a      	ldrh	r2, [r3, #8]
 800d81a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d81c:	4413      	add	r3, r2
 800d81e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	891b      	ldrh	r3, [r3, #8]
 800d824:	8b7a      	ldrh	r2, [r7, #26]
 800d826:	429a      	cmp	r2, r3
 800d828:	f0c0 809a 	bcc.w	800d960 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d82c:	8b7b      	ldrh	r3, [r7, #26]
 800d82e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d832:	4619      	mov	r1, r3
 800d834:	200e      	movs	r0, #14
 800d836:	f7f8 fe8b 	bl	8006550 <pbuf_alloc>
 800d83a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 8090 	beq.w	800d964 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	895b      	ldrh	r3, [r3, #10]
 800d848:	461a      	mov	r2, r3
 800d84a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d84c:	3308      	adds	r3, #8
 800d84e:	429a      	cmp	r2, r3
 800d850:	d203      	bcs.n	800d85a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d852:	6978      	ldr	r0, [r7, #20]
 800d854:	f7f9 f960 	bl	8006b18 <pbuf_free>
          goto icmperr;
 800d858:	e085      	b.n	800d966 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d860:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d862:	4618      	mov	r0, r3
 800d864:	f001 fce3 	bl	800f22e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d868:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d86a:	4619      	mov	r1, r3
 800d86c:	6978      	ldr	r0, [r7, #20]
 800d86e:	f7f9 f8cd 	bl	8006a0c <pbuf_remove_header>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d009      	beq.n	800d88c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d878:	4b40      	ldr	r3, [pc, #256]	@ (800d97c <icmp_input+0x1f8>)
 800d87a:	22b6      	movs	r2, #182	@ 0xb6
 800d87c:	4940      	ldr	r1, [pc, #256]	@ (800d980 <icmp_input+0x1fc>)
 800d87e:	4841      	ldr	r0, [pc, #260]	@ (800d984 <icmp_input+0x200>)
 800d880:	f001 fbfa 	bl	800f078 <iprintf>
          pbuf_free(r);
 800d884:	6978      	ldr	r0, [r7, #20]
 800d886:	f7f9 f947 	bl	8006b18 <pbuf_free>
          goto icmperr;
 800d88a:	e06c      	b.n	800d966 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	6978      	ldr	r0, [r7, #20]
 800d890:	f7f9 fa5a 	bl	8006d48 <pbuf_copy>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d003      	beq.n	800d8a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d89a:	6978      	ldr	r0, [r7, #20]
 800d89c:	f7f9 f93c 	bl	8006b18 <pbuf_free>
          goto icmperr;
 800d8a0:	e061      	b.n	800d966 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7f9 f938 	bl	8006b18 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	607b      	str	r3, [r7, #4]
 800d8ac:	e00f      	b.n	800d8ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d8ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8b0:	330e      	adds	r3, #14
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7f9 f8a9 	bl	8006a0c <pbuf_remove_header>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d006      	beq.n	800d8ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d8c0:	4b2e      	ldr	r3, [pc, #184]	@ (800d97c <icmp_input+0x1f8>)
 800d8c2:	22c7      	movs	r2, #199	@ 0xc7
 800d8c4:	4930      	ldr	r1, [pc, #192]	@ (800d988 <icmp_input+0x204>)
 800d8c6:	482f      	ldr	r0, [pc, #188]	@ (800d984 <icmp_input+0x200>)
 800d8c8:	f001 fbd6 	bl	800f078 <iprintf>
          goto icmperr;
 800d8cc:	e04b      	b.n	800d966 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d8d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7f9 f887 	bl	80069ec <pbuf_add_header>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d12b      	bne.n	800d93c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d8f2:	4b20      	ldr	r3, [pc, #128]	@ (800d974 <icmp_input+0x1f0>)
 800d8f4:	691a      	ldr	r2, [r3, #16]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2200      	movs	r2, #0
 800d904:	709a      	strb	r2, [r3, #2]
 800d906:	2200      	movs	r2, #0
 800d908:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	22ff      	movs	r2, #255	@ 0xff
 800d90e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	729a      	strb	r2, [r3, #10]
 800d916:	2200      	movs	r2, #0
 800d918:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	9302      	str	r3, [sp, #8]
 800d91e:	2301      	movs	r3, #1
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	2300      	movs	r3, #0
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	23ff      	movs	r3, #255	@ 0xff
 800d928:	2200      	movs	r2, #0
 800d92a:	69f9      	ldr	r1, [r7, #28]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fa75 	bl	800de1c <ip4_output_if>
 800d932:	4603      	mov	r3, r0
 800d934:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d936:	e001      	b.n	800d93c <icmp_input+0x1b8>
      break;
 800d938:	bf00      	nop
 800d93a:	e000      	b.n	800d93e <icmp_input+0x1ba>
      break;
 800d93c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7f9 f8ea 	bl	8006b18 <pbuf_free>
  return;
 800d944:	e013      	b.n	800d96e <icmp_input+0x1ea>
    goto lenerr;
 800d946:	bf00      	nop
 800d948:	e002      	b.n	800d950 <icmp_input+0x1cc>
    goto lenerr;
 800d94a:	bf00      	nop
 800d94c:	e000      	b.n	800d950 <icmp_input+0x1cc>
        goto lenerr;
 800d94e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7f9 f8e1 	bl	8006b18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d956:	e00a      	b.n	800d96e <icmp_input+0x1ea>
        goto icmperr;
 800d958:	bf00      	nop
 800d95a:	e004      	b.n	800d966 <icmp_input+0x1e2>
        goto icmperr;
 800d95c:	bf00      	nop
 800d95e:	e002      	b.n	800d966 <icmp_input+0x1e2>
          goto icmperr;
 800d960:	bf00      	nop
 800d962:	e000      	b.n	800d966 <icmp_input+0x1e2>
          goto icmperr;
 800d964:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7f9 f8d6 	bl	8006b18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d96c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d96e:	3728      	adds	r7, #40	@ 0x28
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20004d6c 	.word	0x20004d6c
 800d978:	20004d80 	.word	0x20004d80
 800d97c:	08012438 	.word	0x08012438
 800d980:	08012470 	.word	0x08012470
 800d984:	080124a8 	.word	0x080124a8
 800d988:	080124d0 	.word	0x080124d0

0800d98c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	461a      	mov	r2, r3
 800d99c:	2103      	movs	r1, #3
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f814 	bl	800d9cc <icmp_send_response>
}
 800d9a4:	bf00      	nop
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d9b8:	78fb      	ldrb	r3, [r7, #3]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	210b      	movs	r1, #11
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 f804 	bl	800d9cc <icmp_send_response>
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b08c      	sub	sp, #48	@ 0x30
 800d9d0:	af04      	add	r7, sp, #16
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	70fb      	strb	r3, [r7, #3]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d9dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d9e0:	2124      	movs	r1, #36	@ 0x24
 800d9e2:	2022      	movs	r0, #34	@ 0x22
 800d9e4:	f7f8 fdb4 	bl	8006550 <pbuf_alloc>
 800d9e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d04c      	beq.n	800da8a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	895b      	ldrh	r3, [r3, #10]
 800d9f4:	2b23      	cmp	r3, #35	@ 0x23
 800d9f6:	d806      	bhi.n	800da06 <icmp_send_response+0x3a>
 800d9f8:	4b26      	ldr	r3, [pc, #152]	@ (800da94 <icmp_send_response+0xc8>)
 800d9fa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d9fe:	4926      	ldr	r1, [pc, #152]	@ (800da98 <icmp_send_response+0xcc>)
 800da00:	4826      	ldr	r0, [pc, #152]	@ (800da9c <icmp_send_response+0xd0>)
 800da02:	f001 fb39 	bl	800f078 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	78fa      	ldrb	r2, [r7, #3]
 800da16:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	78ba      	ldrb	r2, [r7, #2]
 800da1c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	2200      	movs	r2, #0
 800da22:	711a      	strb	r2, [r3, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2200      	movs	r2, #0
 800da2c:	719a      	strb	r2, [r3, #6]
 800da2e:	2200      	movs	r2, #0
 800da30:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	f103 0008 	add.w	r0, r3, #8
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	221c      	movs	r2, #28
 800da40:	4619      	mov	r1, r3
 800da42:	f001 fbf4 	bl	800f22e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800da4c:	f107 030c 	add.w	r3, r7, #12
 800da50:	4618      	mov	r0, r3
 800da52:	f000 f825 	bl	800daa0 <ip4_route>
 800da56:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d011      	beq.n	800da82 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	2200      	movs	r2, #0
 800da62:	709a      	strb	r2, [r3, #2]
 800da64:	2200      	movs	r2, #0
 800da66:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800da68:	f107 020c 	add.w	r2, r7, #12
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	9302      	str	r3, [sp, #8]
 800da70:	2301      	movs	r3, #1
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	2300      	movs	r3, #0
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	23ff      	movs	r3, #255	@ 0xff
 800da7a:	2100      	movs	r1, #0
 800da7c:	69f8      	ldr	r0, [r7, #28]
 800da7e:	f000 f9cd 	bl	800de1c <ip4_output_if>
  }
  pbuf_free(q);
 800da82:	69f8      	ldr	r0, [r7, #28]
 800da84:	f7f9 f848 	bl	8006b18 <pbuf_free>
 800da88:	e000      	b.n	800da8c <icmp_send_response+0xc0>
    return;
 800da8a:	bf00      	nop
}
 800da8c:	3720      	adds	r7, #32
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	08012438 	.word	0x08012438
 800da98:	08012504 	.word	0x08012504
 800da9c:	080124a8 	.word	0x080124a8

0800daa0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800daa8:	4b33      	ldr	r3, [pc, #204]	@ (800db78 <ip4_route+0xd8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	e036      	b.n	800db1e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dab6:	f003 0301 	and.w	r3, r3, #1
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d02b      	beq.n	800db18 <ip4_route+0x78>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dac6:	089b      	lsrs	r3, r3, #2
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d022      	beq.n	800db18 <ip4_route+0x78>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3304      	adds	r3, #4
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d01d      	beq.n	800db18 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3304      	adds	r3, #4
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	405a      	eors	r2, r3
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3308      	adds	r3, #8
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4013      	ands	r3, r2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	e038      	b.n	800db6a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dafe:	f003 0302 	and.w	r3, r3, #2
 800db02:	2b00      	cmp	r3, #0
 800db04:	d108      	bne.n	800db18 <ip4_route+0x78>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	330c      	adds	r3, #12
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d101      	bne.n	800db18 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	e028      	b.n	800db6a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	60fb      	str	r3, [r7, #12]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1c5      	bne.n	800dab0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db24:	4b15      	ldr	r3, [pc, #84]	@ (800db7c <ip4_route+0xdc>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01a      	beq.n	800db62 <ip4_route+0xc2>
 800db2c:	4b13      	ldr	r3, [pc, #76]	@ (800db7c <ip4_route+0xdc>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d012      	beq.n	800db62 <ip4_route+0xc2>
 800db3c:	4b0f      	ldr	r3, [pc, #60]	@ (800db7c <ip4_route+0xdc>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db44:	f003 0304 	and.w	r3, r3, #4
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00a      	beq.n	800db62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800db4c:	4b0b      	ldr	r3, [pc, #44]	@ (800db7c <ip4_route+0xdc>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3304      	adds	r3, #4
 800db52:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db54:	2b00      	cmp	r3, #0
 800db56:	d004      	beq.n	800db62 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800db60:	d101      	bne.n	800db66 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800db62:	2300      	movs	r3, #0
 800db64:	e001      	b.n	800db6a <ip4_route+0xca>
  }

  return netif_default;
 800db66:	4b05      	ldr	r3, [pc, #20]	@ (800db7c <ip4_route+0xdc>)
 800db68:	681b      	ldr	r3, [r3, #0]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3714      	adds	r7, #20
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	200082d0 	.word	0x200082d0
 800db7c:	200082d4 	.word	0x200082d4

0800db80 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	b2db      	uxtb	r3, r3
 800db94:	2b00      	cmp	r3, #0
 800db96:	d016      	beq.n	800dbc6 <ip4_input_accept+0x46>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3304      	adds	r3, #4
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d011      	beq.n	800dbc6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dba2:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd0 <ip4_input_accept+0x50>)
 800dba4:	695a      	ldr	r2, [r3, #20]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d008      	beq.n	800dbc2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dbb0:	4b07      	ldr	r3, [pc, #28]	@ (800dbd0 <ip4_input_accept+0x50>)
 800dbb2:	695b      	ldr	r3, [r3, #20]
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 fa08 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800dbbc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e000      	b.n	800dbc8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20004d6c 	.word	0x20004d6c

0800dbd4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	091b      	lsrs	r3, r3, #4
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b04      	cmp	r3, #4
 800dbee:	d004      	beq.n	800dbfa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7f8 ff91 	bl	8006b18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	e107      	b.n	800de0a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	f003 030f 	and.w	r3, r3, #15
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	885b      	ldrh	r3, [r3, #2]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f7 fc23 	bl	800545c <lwip_htons>
 800dc16:	4603      	mov	r3, r0
 800dc18:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	891b      	ldrh	r3, [r3, #8]
 800dc1e:	89ba      	ldrh	r2, [r7, #12]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d204      	bcs.n	800dc2e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dc24:	89bb      	ldrh	r3, [r7, #12]
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f7f8 fdef 	bl	800680c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	895b      	ldrh	r3, [r3, #10]
 800dc32:	89fa      	ldrh	r2, [r7, #14]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d807      	bhi.n	800dc48 <ip4_input+0x74>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	891b      	ldrh	r3, [r3, #8]
 800dc3c:	89ba      	ldrh	r2, [r7, #12]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d802      	bhi.n	800dc48 <ip4_input+0x74>
 800dc42:	89fb      	ldrh	r3, [r7, #14]
 800dc44:	2b13      	cmp	r3, #19
 800dc46:	d804      	bhi.n	800dc52 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7f8 ff65 	bl	8006b18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e0db      	b.n	800de0a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	4a6f      	ldr	r2, [pc, #444]	@ (800de14 <ip4_input+0x240>)
 800dc58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	4a6d      	ldr	r2, [pc, #436]	@ (800de14 <ip4_input+0x240>)
 800dc60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc62:	4b6c      	ldr	r3, [pc, #432]	@ (800de14 <ip4_input+0x240>)
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc6a:	2be0      	cmp	r3, #224	@ 0xe0
 800dc6c:	d112      	bne.n	800dc94 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d007      	beq.n	800dc8e <ip4_input+0xba>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	3304      	adds	r3, #4
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d002      	beq.n	800dc8e <ip4_input+0xba>
      netif = inp;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	613b      	str	r3, [r7, #16]
 800dc8c:	e02a      	b.n	800dce4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	613b      	str	r3, [r7, #16]
 800dc92:	e027      	b.n	800dce4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dc94:	6838      	ldr	r0, [r7, #0]
 800dc96:	f7ff ff73 	bl	800db80 <ip4_input_accept>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <ip4_input+0xd2>
      netif = inp;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	613b      	str	r3, [r7, #16]
 800dca4:	e01e      	b.n	800dce4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dca6:	2300      	movs	r3, #0
 800dca8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dcaa:	4b5a      	ldr	r3, [pc, #360]	@ (800de14 <ip4_input+0x240>)
 800dcac:	695b      	ldr	r3, [r3, #20]
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcb2:	d017      	beq.n	800dce4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dcb4:	4b58      	ldr	r3, [pc, #352]	@ (800de18 <ip4_input+0x244>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	e00e      	b.n	800dcda <ip4_input+0x106>
          if (netif == inp) {
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d006      	beq.n	800dcd2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dcc4:	6938      	ldr	r0, [r7, #16]
 800dcc6:	f7ff ff5b 	bl	800db80 <ip4_input_accept>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d108      	bne.n	800dce2 <ip4_input+0x10e>
 800dcd0:	e000      	b.n	800dcd4 <ip4_input+0x100>
            continue;
 800dcd2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	613b      	str	r3, [r7, #16]
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1ed      	bne.n	800dcbc <ip4_input+0xe8>
 800dce0:	e000      	b.n	800dce4 <ip4_input+0x110>
            break;
 800dce2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dce4:	4b4b      	ldr	r3, [pc, #300]	@ (800de14 <ip4_input+0x240>)
 800dce6:	691b      	ldr	r3, [r3, #16]
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 f96e 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d105      	bne.n	800dd02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dcf6:	4b47      	ldr	r3, [pc, #284]	@ (800de14 <ip4_input+0x240>)
 800dcf8:	691b      	ldr	r3, [r3, #16]
 800dcfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dcfe:	2be0      	cmp	r3, #224	@ 0xe0
 800dd00:	d104      	bne.n	800dd0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f7f8 ff08 	bl	8006b18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	e07e      	b.n	800de0a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d104      	bne.n	800dd1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7f8 ff00 	bl	8006b18 <pbuf_free>
    return ERR_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	e076      	b.n	800de0a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	88db      	ldrh	r3, [r3, #6]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	461a      	mov	r2, r3
 800dd24:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800dd28:	4013      	ands	r3, r2
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00b      	beq.n	800dd46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fc92 	bl	800e658 <ip4_reass>
 800dd34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <ip4_input+0x16c>
      return ERR_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	e064      	b.n	800de0a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dd46:	4a33      	ldr	r2, [pc, #204]	@ (800de14 <ip4_input+0x240>)
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dd4c:	4a31      	ldr	r2, [pc, #196]	@ (800de14 <ip4_input+0x240>)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dd52:	4a30      	ldr	r2, [pc, #192]	@ (800de14 <ip4_input+0x240>)
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	f003 030f 	and.w	r3, r3, #15
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	461a      	mov	r2, r3
 800dd68:	4b2a      	ldr	r3, [pc, #168]	@ (800de14 <ip4_input+0x240>)
 800dd6a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dd6c:	89fb      	ldrh	r3, [r7, #14]
 800dd6e:	4619      	mov	r1, r3
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7f8 fe4b 	bl	8006a0c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	7a5b      	ldrb	r3, [r3, #9]
 800dd7a:	2b11      	cmp	r3, #17
 800dd7c:	d006      	beq.n	800dd8c <ip4_input+0x1b8>
 800dd7e:	2b11      	cmp	r3, #17
 800dd80:	dc13      	bgt.n	800ddaa <ip4_input+0x1d6>
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d00c      	beq.n	800dda0 <ip4_input+0x1cc>
 800dd86:	2b06      	cmp	r3, #6
 800dd88:	d005      	beq.n	800dd96 <ip4_input+0x1c2>
 800dd8a:	e00e      	b.n	800ddaa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7fe fc68 	bl	800c664 <udp_input>
        break;
 800dd94:	e026      	b.n	800dde4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dd96:	6839      	ldr	r1, [r7, #0]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7fa fce7 	bl	800876c <tcp_input>
        break;
 800dd9e:	e021      	b.n	800dde4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff fcee 	bl	800d784 <icmp_input>
        break;
 800dda8:	e01c      	b.n	800dde4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ddaa:	4b1a      	ldr	r3, [pc, #104]	@ (800de14 <ip4_input+0x240>)
 800ddac:	695b      	ldr	r3, [r3, #20]
 800ddae:	6939      	ldr	r1, [r7, #16]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 f90b 	bl	800dfcc <ip4_addr_isbroadcast_u32>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10f      	bne.n	800dddc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ddbc:	4b15      	ldr	r3, [pc, #84]	@ (800de14 <ip4_input+0x240>)
 800ddbe:	695b      	ldr	r3, [r3, #20]
 800ddc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ddc4:	2be0      	cmp	r3, #224	@ 0xe0
 800ddc6:	d009      	beq.n	800dddc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ddc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7f8 fe8f 	bl	8006af2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ddd4:	2102      	movs	r1, #2
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fdd8 	bl	800d98c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f7f8 fe9b 	bl	8006b18 <pbuf_free>
        break;
 800dde2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dde4:	4b0b      	ldr	r3, [pc, #44]	@ (800de14 <ip4_input+0x240>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ddea:	4b0a      	ldr	r3, [pc, #40]	@ (800de14 <ip4_input+0x240>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ddf0:	4b08      	ldr	r3, [pc, #32]	@ (800de14 <ip4_input+0x240>)
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ddf6:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <ip4_input+0x240>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ddfc:	4b05      	ldr	r3, [pc, #20]	@ (800de14 <ip4_input+0x240>)
 800ddfe:	2200      	movs	r2, #0
 800de00:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800de02:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <ip4_input+0x240>)
 800de04:	2200      	movs	r2, #0
 800de06:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800de08:	2300      	movs	r3, #0
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	20004d6c 	.word	0x20004d6c
 800de18:	200082d0 	.word	0x200082d0

0800de1c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08a      	sub	sp, #40	@ 0x28
 800de20:	af04      	add	r7, sp, #16
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d009      	beq.n	800de48 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <ip4_output_if+0x26>
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d102      	bne.n	800de48 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800de42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de44:	3304      	adds	r3, #4
 800de46:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800de48:	78fa      	ldrb	r2, [r7, #3]
 800de4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4c:	9302      	str	r3, [sp, #8]
 800de4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800de52:	9301      	str	r3, [sp, #4]
 800de54:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	4613      	mov	r3, r2
 800de5c:	687a      	ldr	r2, [r7, #4]
 800de5e:	6979      	ldr	r1, [r7, #20]
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 f805 	bl	800de70 <ip4_output_if_src>
 800de66:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3718      	adds	r7, #24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b088      	sub	sp, #32
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
 800de7c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	7b9b      	ldrb	r3, [r3, #14]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d006      	beq.n	800de94 <ip4_output_if_src+0x24>
 800de86:	4b4b      	ldr	r3, [pc, #300]	@ (800dfb4 <ip4_output_if_src+0x144>)
 800de88:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800de8c:	494a      	ldr	r1, [pc, #296]	@ (800dfb8 <ip4_output_if_src+0x148>)
 800de8e:	484b      	ldr	r0, [pc, #300]	@ (800dfbc <ip4_output_if_src+0x14c>)
 800de90:	f001 f8f2 	bl	800f078 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d060      	beq.n	800df5c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800de9a:	2314      	movs	r3, #20
 800de9c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800de9e:	2114      	movs	r1, #20
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7f8 fda3 	bl	80069ec <pbuf_add_header>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800deac:	f06f 0301 	mvn.w	r3, #1
 800deb0:	e07c      	b.n	800dfac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	895b      	ldrh	r3, [r3, #10]
 800debc:	2b13      	cmp	r3, #19
 800debe:	d806      	bhi.n	800dece <ip4_output_if_src+0x5e>
 800dec0:	4b3c      	ldr	r3, [pc, #240]	@ (800dfb4 <ip4_output_if_src+0x144>)
 800dec2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800dec6:	493e      	ldr	r1, [pc, #248]	@ (800dfc0 <ip4_output_if_src+0x150>)
 800dec8:	483c      	ldr	r0, [pc, #240]	@ (800dfbc <ip4_output_if_src+0x14c>)
 800deca:	f001 f8d5 	bl	800f078 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	78fa      	ldrb	r2, [r7, #3]
 800ded2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800deda:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dee4:	8b7b      	ldrh	r3, [r7, #26]
 800dee6:	089b      	lsrs	r3, r3, #2
 800dee8:	b29b      	uxth	r3, r3
 800deea:	b2db      	uxtb	r3, r3
 800deec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800def0:	b2da      	uxtb	r2, r3
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800defc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	891b      	ldrh	r3, [r3, #8]
 800df02:	4618      	mov	r0, r3
 800df04:	f7f7 faaa 	bl	800545c <lwip_htons>
 800df08:	4603      	mov	r3, r0
 800df0a:	461a      	mov	r2, r3
 800df0c:	69fb      	ldr	r3, [r7, #28]
 800df0e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	2200      	movs	r2, #0
 800df14:	719a      	strb	r2, [r3, #6]
 800df16:	2200      	movs	r2, #0
 800df18:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800df1a:	4b2a      	ldr	r3, [pc, #168]	@ (800dfc4 <ip4_output_if_src+0x154>)
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7f7 fa9c 	bl	800545c <lwip_htons>
 800df24:	4603      	mov	r3, r0
 800df26:	461a      	mov	r2, r3
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800df2c:	4b25      	ldr	r3, [pc, #148]	@ (800dfc4 <ip4_output_if_src+0x154>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	3301      	adds	r3, #1
 800df32:	b29a      	uxth	r2, r3
 800df34:	4b23      	ldr	r3, [pc, #140]	@ (800dfc4 <ip4_output_if_src+0x154>)
 800df36:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d104      	bne.n	800df48 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800df3e:	4b22      	ldr	r3, [pc, #136]	@ (800dfc8 <ip4_output_if_src+0x158>)
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	60da      	str	r2, [r3, #12]
 800df46:	e003      	b.n	800df50 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	2200      	movs	r2, #0
 800df54:	729a      	strb	r2, [r3, #10]
 800df56:	2200      	movs	r2, #0
 800df58:	72da      	strb	r2, [r3, #11]
 800df5a:	e00f      	b.n	800df7c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	895b      	ldrh	r3, [r3, #10]
 800df60:	2b13      	cmp	r3, #19
 800df62:	d802      	bhi.n	800df6a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800df64:	f06f 0301 	mvn.w	r3, #1
 800df68:	e020      	b.n	800dfac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800df76:	f107 0314 	add.w	r3, r7, #20
 800df7a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800df7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00c      	beq.n	800df9e <ip4_output_if_src+0x12e>
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	891a      	ldrh	r2, [r3, #8]
 800df88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d906      	bls.n	800df9e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f000 fd53 	bl	800ea40 <ip4_frag>
 800df9a:	4603      	mov	r3, r0
 800df9c:	e006      	b.n	800dfac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800df9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfa0:	695b      	ldr	r3, [r3, #20]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	68f9      	ldr	r1, [r7, #12]
 800dfa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfa8:	4798      	blx	r3
 800dfaa:	4603      	mov	r3, r0
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3720      	adds	r7, #32
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	08012530 	.word	0x08012530
 800dfb8:	08012564 	.word	0x08012564
 800dfbc:	08012570 	.word	0x08012570
 800dfc0:	08012598 	.word	0x08012598
 800dfc4:	2000842e 	.word	0x2000842e
 800dfc8:	08012978 	.word	0x08012978

0800dfcc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe0:	d002      	beq.n	800dfe8 <ip4_addr_isbroadcast_u32+0x1c>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e02a      	b.n	800e042 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dff2:	f003 0302 	and.w	r3, r3, #2
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	e021      	b.n	800e042 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	3304      	adds	r3, #4
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	429a      	cmp	r2, r3
 800e008:	d101      	bne.n	800e00e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	e019      	b.n	800e042 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	3304      	adds	r3, #4
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	405a      	eors	r2, r3
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	3308      	adds	r3, #8
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4013      	ands	r3, r2
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10d      	bne.n	800e040 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	3308      	adds	r3, #8
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	43da      	mvns	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	3308      	adds	r3, #8
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e038:	429a      	cmp	r2, r3
 800e03a:	d101      	bne.n	800e040 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e040:	2300      	movs	r3, #0
  }
}
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
	...

0800e050 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e05a:	4b12      	ldr	r3, [pc, #72]	@ (800e0a4 <ip_reass_tmr+0x54>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e060:	e018      	b.n	800e094 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	7fdb      	ldrb	r3, [r3, #31]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00b      	beq.n	800e082 <ip_reass_tmr+0x32>
      r->timer--;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	7fdb      	ldrb	r3, [r3, #31]
 800e06e:	3b01      	subs	r3, #1
 800e070:	b2da      	uxtb	r2, r3
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	e008      	b.n	800e094 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e08c:	68b9      	ldr	r1, [r7, #8]
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f80a 	bl	800e0a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d1e3      	bne.n	800e062 <ip_reass_tmr+0x12>
    }
  }
}
 800e09a:	bf00      	nop
 800e09c:	bf00      	nop
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	20008430 	.word	0x20008430

0800e0a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d105      	bne.n	800e0ca <ip_reass_free_complete_datagram+0x22>
 800e0be:	4b45      	ldr	r3, [pc, #276]	@ (800e1d4 <ip_reass_free_complete_datagram+0x12c>)
 800e0c0:	22ab      	movs	r2, #171	@ 0xab
 800e0c2:	4945      	ldr	r1, [pc, #276]	@ (800e1d8 <ip_reass_free_complete_datagram+0x130>)
 800e0c4:	4845      	ldr	r0, [pc, #276]	@ (800e1dc <ip_reass_free_complete_datagram+0x134>)
 800e0c6:	f000 ffd7 	bl	800f078 <iprintf>
  if (prev != NULL) {
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00a      	beq.n	800e0e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d005      	beq.n	800e0e6 <ip_reass_free_complete_datagram+0x3e>
 800e0da:	4b3e      	ldr	r3, [pc, #248]	@ (800e1d4 <ip_reass_free_complete_datagram+0x12c>)
 800e0dc:	22ad      	movs	r2, #173	@ 0xad
 800e0de:	4940      	ldr	r1, [pc, #256]	@ (800e1e0 <ip_reass_free_complete_datagram+0x138>)
 800e0e0:	483e      	ldr	r0, [pc, #248]	@ (800e1dc <ip_reass_free_complete_datagram+0x134>)
 800e0e2:	f000 ffc9 	bl	800f078 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	889b      	ldrh	r3, [r3, #4]
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d12a      	bne.n	800e14e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	6858      	ldr	r0, [r3, #4]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3308      	adds	r3, #8
 800e10e:	2214      	movs	r2, #20
 800e110:	4619      	mov	r1, r3
 800e112:	f001 f88c 	bl	800f22e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e116:	2101      	movs	r1, #1
 800e118:	69b8      	ldr	r0, [r7, #24]
 800e11a:	f7ff fc47 	bl	800d9ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e11e:	69b8      	ldr	r0, [r7, #24]
 800e120:	f7f8 fd82 	bl	8006c28 <pbuf_clen>
 800e124:	4603      	mov	r3, r0
 800e126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e128:	8bfa      	ldrh	r2, [r7, #30]
 800e12a:	8a7b      	ldrh	r3, [r7, #18]
 800e12c:	4413      	add	r3, r2
 800e12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e132:	db05      	blt.n	800e140 <ip_reass_free_complete_datagram+0x98>
 800e134:	4b27      	ldr	r3, [pc, #156]	@ (800e1d4 <ip_reass_free_complete_datagram+0x12c>)
 800e136:	22bc      	movs	r2, #188	@ 0xbc
 800e138:	492a      	ldr	r1, [pc, #168]	@ (800e1e4 <ip_reass_free_complete_datagram+0x13c>)
 800e13a:	4828      	ldr	r0, [pc, #160]	@ (800e1dc <ip_reass_free_complete_datagram+0x134>)
 800e13c:	f000 ff9c 	bl	800f078 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e140:	8bfa      	ldrh	r2, [r7, #30]
 800e142:	8a7b      	ldrh	r3, [r7, #18]
 800e144:	4413      	add	r3, r2
 800e146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e148:	69b8      	ldr	r0, [r7, #24]
 800e14a:	f7f8 fce5 	bl	8006b18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e154:	e01f      	b.n	800e196 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7f8 fd5e 	bl	8006c28 <pbuf_clen>
 800e16c:	4603      	mov	r3, r0
 800e16e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e170:	8bfa      	ldrh	r2, [r7, #30]
 800e172:	8a7b      	ldrh	r3, [r7, #18]
 800e174:	4413      	add	r3, r2
 800e176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e17a:	db05      	blt.n	800e188 <ip_reass_free_complete_datagram+0xe0>
 800e17c:	4b15      	ldr	r3, [pc, #84]	@ (800e1d4 <ip_reass_free_complete_datagram+0x12c>)
 800e17e:	22cc      	movs	r2, #204	@ 0xcc
 800e180:	4918      	ldr	r1, [pc, #96]	@ (800e1e4 <ip_reass_free_complete_datagram+0x13c>)
 800e182:	4816      	ldr	r0, [pc, #88]	@ (800e1dc <ip_reass_free_complete_datagram+0x134>)
 800e184:	f000 ff78 	bl	800f078 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e188:	8bfa      	ldrh	r2, [r7, #30]
 800e18a:	8a7b      	ldrh	r3, [r7, #18]
 800e18c:	4413      	add	r3, r2
 800e18e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7f8 fcc1 	bl	8006b18 <pbuf_free>
  while (p != NULL) {
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1dc      	bne.n	800e156 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 f8c2 	bl	800e328 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e1a4:	4b10      	ldr	r3, [pc, #64]	@ (800e1e8 <ip_reass_free_complete_datagram+0x140>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	8bfa      	ldrh	r2, [r7, #30]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d905      	bls.n	800e1ba <ip_reass_free_complete_datagram+0x112>
 800e1ae:	4b09      	ldr	r3, [pc, #36]	@ (800e1d4 <ip_reass_free_complete_datagram+0x12c>)
 800e1b0:	22d2      	movs	r2, #210	@ 0xd2
 800e1b2:	490e      	ldr	r1, [pc, #56]	@ (800e1ec <ip_reass_free_complete_datagram+0x144>)
 800e1b4:	4809      	ldr	r0, [pc, #36]	@ (800e1dc <ip_reass_free_complete_datagram+0x134>)
 800e1b6:	f000 ff5f 	bl	800f078 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800e1e8 <ip_reass_free_complete_datagram+0x140>)
 800e1bc:	881a      	ldrh	r2, [r3, #0]
 800e1be:	8bfb      	ldrh	r3, [r7, #30]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	4b08      	ldr	r3, [pc, #32]	@ (800e1e8 <ip_reass_free_complete_datagram+0x140>)
 800e1c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e1c8:	8bfb      	ldrh	r3, [r7, #30]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3720      	adds	r7, #32
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	080125c8 	.word	0x080125c8
 800e1d8:	08012604 	.word	0x08012604
 800e1dc:	08012610 	.word	0x08012610
 800e1e0:	08012638 	.word	0x08012638
 800e1e4:	0801264c 	.word	0x0801264c
 800e1e8:	20008434 	.word	0x20008434
 800e1ec:	0801266c 	.word	0x0801266c

0800e1f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b08a      	sub	sp, #40	@ 0x28
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e1fe:	2300      	movs	r3, #0
 800e200:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e202:	2300      	movs	r3, #0
 800e204:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e206:	2300      	movs	r3, #0
 800e208:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e20a:	2300      	movs	r3, #0
 800e20c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e20e:	4b28      	ldr	r3, [pc, #160]	@ (800e2b0 <ip_reass_remove_oldest_datagram+0xc0>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e214:	e030      	b.n	800e278 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e218:	695a      	ldr	r2, [r3, #20]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d10c      	bne.n	800e23c <ip_reass_remove_oldest_datagram+0x4c>
 800e222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e224:	699a      	ldr	r2, [r3, #24]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d106      	bne.n	800e23c <ip_reass_remove_oldest_datagram+0x4c>
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	899a      	ldrh	r2, [r3, #12]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	889b      	ldrh	r3, [r3, #4]
 800e236:	b29b      	uxth	r3, r3
 800e238:	429a      	cmp	r2, r3
 800e23a:	d014      	beq.n	800e266 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	3301      	adds	r3, #1
 800e240:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e242:	6a3b      	ldr	r3, [r7, #32]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d104      	bne.n	800e252 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	61bb      	str	r3, [r7, #24]
 800e250:	e009      	b.n	800e266 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	7fda      	ldrb	r2, [r3, #31]
 800e256:	6a3b      	ldr	r3, [r7, #32]
 800e258:	7fdb      	ldrb	r3, [r3, #31]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d803      	bhi.n	800e266 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d001      	beq.n	800e272 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e270:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1cb      	bne.n	800e216 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d008      	beq.n	800e296 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e284:	69b9      	ldr	r1, [r7, #24]
 800e286:	6a38      	ldr	r0, [r7, #32]
 800e288:	f7ff ff0e 	bl	800e0a8 <ip_reass_free_complete_datagram>
 800e28c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	4413      	add	r3, r2
 800e294:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	da02      	bge.n	800e2a4 <ip_reass_remove_oldest_datagram+0xb4>
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	dcac      	bgt.n	800e1fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e2a4:	697b      	ldr	r3, [r7, #20]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3728      	adds	r7, #40	@ 0x28
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20008430 	.word	0x20008430

0800e2b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e2be:	2004      	movs	r0, #4
 800e2c0:	f7f7 fd44 	bl	8005d4c <memp_malloc>
 800e2c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d110      	bne.n	800e2ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f7ff ff8e 	bl	800e1f0 <ip_reass_remove_oldest_datagram>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	dc03      	bgt.n	800e2e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e2dc:	2004      	movs	r0, #4
 800e2de:	f7f7 fd35 	bl	8005d4c <memp_malloc>
 800e2e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d101      	bne.n	800e2ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e016      	b.n	800e31c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e2ee:	2220      	movs	r2, #32
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f000 ff25 	bl	800f142 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	220f      	movs	r2, #15
 800e2fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e2fe:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <ip_reass_enqueue_new_datagram+0x70>)
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e306:	4a07      	ldr	r2, [pc, #28]	@ (800e324 <ip_reass_enqueue_new_datagram+0x70>)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	3308      	adds	r3, #8
 800e310:	2214      	movs	r2, #20
 800e312:	6879      	ldr	r1, [r7, #4]
 800e314:	4618      	mov	r0, r3
 800e316:	f000 ff8a 	bl	800f22e <memcpy>
  return ipr;
 800e31a:	68fb      	ldr	r3, [r7, #12]
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	20008430 	.word	0x20008430

0800e328 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e332:	4b10      	ldr	r3, [pc, #64]	@ (800e374 <ip_reass_dequeue_datagram+0x4c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d104      	bne.n	800e346 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a0c      	ldr	r2, [pc, #48]	@ (800e374 <ip_reass_dequeue_datagram+0x4c>)
 800e342:	6013      	str	r3, [r2, #0]
 800e344:	e00d      	b.n	800e362 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d106      	bne.n	800e35a <ip_reass_dequeue_datagram+0x32>
 800e34c:	4b0a      	ldr	r3, [pc, #40]	@ (800e378 <ip_reass_dequeue_datagram+0x50>)
 800e34e:	f240 1245 	movw	r2, #325	@ 0x145
 800e352:	490a      	ldr	r1, [pc, #40]	@ (800e37c <ip_reass_dequeue_datagram+0x54>)
 800e354:	480a      	ldr	r0, [pc, #40]	@ (800e380 <ip_reass_dequeue_datagram+0x58>)
 800e356:	f000 fe8f 	bl	800f078 <iprintf>
    prev->next = ipr->next;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e362:	6879      	ldr	r1, [r7, #4]
 800e364:	2004      	movs	r0, #4
 800e366:	f7f7 fd61 	bl	8005e2c <memp_free>
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	20008430 	.word	0x20008430
 800e378:	080125c8 	.word	0x080125c8
 800e37c:	08012690 	.word	0x08012690
 800e380:	08012610 	.word	0x08012610

0800e384 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08c      	sub	sp, #48	@ 0x30
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e390:	2300      	movs	r3, #0
 800e392:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e394:	2301      	movs	r3, #1
 800e396:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	885b      	ldrh	r3, [r3, #2]
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f7 f859 	bl	800545c <lwip_htons>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	f003 030f 	and.w	r3, r3, #15
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e3bc:	7e7b      	ldrb	r3, [r7, #25]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	8b7a      	ldrh	r2, [r7, #26]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d202      	bcs.n	800e3cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ca:	e135      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e3cc:	7e7b      	ldrb	r3, [r7, #25]
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	8b7a      	ldrh	r2, [r7, #26]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	88db      	ldrh	r3, [r3, #6]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f7 f83d 	bl	800545c <lwip_htons>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	701a      	strb	r2, [r3, #0]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	705a      	strb	r2, [r3, #1]
 800e3fe:	2200      	movs	r2, #0
 800e400:	709a      	strb	r2, [r3, #2]
 800e402:	2200      	movs	r2, #0
 800e404:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e408:	8afa      	ldrh	r2, [r7, #22]
 800e40a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e40c:	8afa      	ldrh	r2, [r7, #22]
 800e40e:	8b7b      	ldrh	r3, [r7, #26]
 800e410:	4413      	add	r3, r2
 800e412:	b29a      	uxth	r2, r3
 800e414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e416:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41a:	88db      	ldrh	r3, [r3, #6]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	8afa      	ldrh	r2, [r7, #22]
 800e420:	429a      	cmp	r2, r3
 800e422:	d902      	bls.n	800e42a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e424:	f04f 33ff 	mov.w	r3, #4294967295
 800e428:	e106      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e430:	e068      	b.n	800e504 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43a:	889b      	ldrh	r3, [r3, #4]
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	889b      	ldrh	r3, [r3, #4]
 800e442:	b29b      	uxth	r3, r3
 800e444:	429a      	cmp	r2, r3
 800e446:	d235      	bcs.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e44c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e450:	2b00      	cmp	r3, #0
 800e452:	d020      	beq.n	800e496 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e456:	889b      	ldrh	r3, [r3, #4]
 800e458:	b29a      	uxth	r2, r3
 800e45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45c:	88db      	ldrh	r3, [r3, #6]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	429a      	cmp	r2, r3
 800e462:	d307      	bcc.n	800e474 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e466:	88db      	ldrh	r3, [r3, #6]
 800e468:	b29a      	uxth	r2, r3
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	889b      	ldrh	r3, [r3, #4]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	429a      	cmp	r2, r3
 800e472:	d902      	bls.n	800e47a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e474:	f04f 33ff 	mov.w	r3, #4294967295
 800e478:	e0de      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e482:	88db      	ldrh	r3, [r3, #6]
 800e484:	b29a      	uxth	r2, r3
 800e486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e488:	889b      	ldrh	r3, [r3, #4]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d03d      	beq.n	800e50c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e494:	e03a      	b.n	800e50c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e498:	88db      	ldrh	r3, [r3, #6]
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	889b      	ldrh	r3, [r3, #4]
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d902      	bls.n	800e4ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	e0c5      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	605a      	str	r2, [r3, #4]
      break;
 800e4b2:	e02b      	b.n	800e50c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	889b      	ldrh	r3, [r3, #4]
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	889b      	ldrh	r3, [r3, #4]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d102      	bne.n	800e4ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4c8:	e0b6      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4cc:	889b      	ldrh	r3, [r3, #4]
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	88db      	ldrh	r3, [r3, #6]
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d202      	bcs.n	800e4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4da:	f04f 33ff 	mov.w	r3, #4294967295
 800e4de:	e0ab      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d009      	beq.n	800e4fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e8:	88db      	ldrh	r3, [r3, #6]
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	889b      	ldrh	r3, [r3, #4]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d001      	beq.n	800e4fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e506:	2b00      	cmp	r3, #0
 800e508:	d193      	bne.n	800e432 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e50a:	e000      	b.n	800e50e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e50c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e510:	2b00      	cmp	r3, #0
 800e512:	d12d      	bne.n	800e570 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e516:	2b00      	cmp	r3, #0
 800e518:	d01c      	beq.n	800e554 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51c:	88db      	ldrh	r3, [r3, #6]
 800e51e:	b29a      	uxth	r2, r3
 800e520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e522:	889b      	ldrh	r3, [r3, #4]
 800e524:	b29b      	uxth	r3, r3
 800e526:	429a      	cmp	r2, r3
 800e528:	d906      	bls.n	800e538 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e52a:	4b45      	ldr	r3, [pc, #276]	@ (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e52c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e530:	4944      	ldr	r1, [pc, #272]	@ (800e644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e532:	4845      	ldr	r0, [pc, #276]	@ (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e534:	f000 fda0 	bl	800f078 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e540:	88db      	ldrh	r3, [r3, #6]
 800e542:	b29a      	uxth	r2, r3
 800e544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e546:	889b      	ldrh	r3, [r3, #4]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d010      	beq.n	800e570 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	623b      	str	r3, [r7, #32]
 800e552:	e00d      	b.n	800e570 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e55c:	4b38      	ldr	r3, [pc, #224]	@ (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e55e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e562:	493a      	ldr	r1, [pc, #232]	@ (800e64c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e564:	4838      	ldr	r0, [pc, #224]	@ (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e566:	f000 fd87 	bl	800f078 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	68ba      	ldr	r2, [r7, #8]
 800e56e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d105      	bne.n	800e582 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	7f9b      	ldrb	r3, [r3, #30]
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d059      	beq.n	800e636 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d04f      	beq.n	800e628 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d006      	beq.n	800e59e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	889b      	ldrh	r3, [r3, #4]
 800e598:	b29b      	uxth	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d002      	beq.n	800e5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	623b      	str	r3, [r7, #32]
 800e5a2:	e041      	b.n	800e628 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e5ae:	e012      	b.n	800e5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b8:	88db      	ldrh	r3, [r3, #6]
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5be:	889b      	ldrh	r3, [r3, #4]
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d002      	beq.n	800e5cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	623b      	str	r3, [r7, #32]
            break;
 800e5ca:	e007      	b.n	800e5dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1e9      	bne.n	800e5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d022      	beq.n	800e628 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e5ea:	4b15      	ldr	r3, [pc, #84]	@ (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5ec:	f240 12df 	movw	r2, #479	@ 0x1df
 800e5f0:	4917      	ldr	r1, [pc, #92]	@ (800e650 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e5f2:	4815      	ldr	r0, [pc, #84]	@ (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5f4:	f000 fd40 	bl	800f078 <iprintf>
          LWIP_ASSERT("sanity check",
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e600:	429a      	cmp	r2, r3
 800e602:	d106      	bne.n	800e612 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e604:	4b0e      	ldr	r3, [pc, #56]	@ (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e606:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e60a:	4911      	ldr	r1, [pc, #68]	@ (800e650 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e60c:	480e      	ldr	r0, [pc, #56]	@ (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e60e:	f000 fd33 	bl	800f078 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d006      	beq.n	800e628 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e61a:	4b09      	ldr	r3, [pc, #36]	@ (800e640 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e61c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e620:	490c      	ldr	r1, [pc, #48]	@ (800e654 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e622:	4809      	ldr	r0, [pc, #36]	@ (800e648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e624:	f000 fd28 	bl	800f078 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e628:	6a3b      	ldr	r3, [r7, #32]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	bf14      	ite	ne
 800e62e:	2301      	movne	r3, #1
 800e630:	2300      	moveq	r3, #0
 800e632:	b2db      	uxtb	r3, r3
 800e634:	e000      	b.n	800e638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3730      	adds	r7, #48	@ 0x30
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	080125c8 	.word	0x080125c8
 800e644:	080126ac 	.word	0x080126ac
 800e648:	08012610 	.word	0x08012610
 800e64c:	080126cc 	.word	0x080126cc
 800e650:	08012704 	.word	0x08012704
 800e654:	08012714 	.word	0x08012714

0800e658 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08e      	sub	sp, #56	@ 0x38
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	f003 030f 	and.w	r3, r3, #15
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	b2db      	uxtb	r3, r3
 800e674:	2b14      	cmp	r3, #20
 800e676:	f040 8171 	bne.w	800e95c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67c:	88db      	ldrh	r3, [r3, #6]
 800e67e:	b29b      	uxth	r3, r3
 800e680:	4618      	mov	r0, r3
 800e682:	f7f6 feeb 	bl	800545c <lwip_htons>
 800e686:	4603      	mov	r3, r0
 800e688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e694:	885b      	ldrh	r3, [r3, #2]
 800e696:	b29b      	uxth	r3, r3
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f6 fedf 	bl	800545c <lwip_htons>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	f003 030f 	and.w	r3, r3, #15
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e6b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	f0c0 8150 	bcc.w	800e960 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e6c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7f8 faab 	bl	8006c28 <pbuf_clen>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e6d6:	4b8c      	ldr	r3, [pc, #560]	@ (800e908 <ip4_reass+0x2b0>)
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	8c3b      	ldrh	r3, [r7, #32]
 800e6de:	4413      	add	r3, r2
 800e6e0:	2b0a      	cmp	r3, #10
 800e6e2:	dd10      	ble.n	800e706 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e6e4:	8c3b      	ldrh	r3, [r7, #32]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6ea:	f7ff fd81 	bl	800e1f0 <ip_reass_remove_oldest_datagram>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f000 8137 	beq.w	800e964 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e6f6:	4b84      	ldr	r3, [pc, #528]	@ (800e908 <ip4_reass+0x2b0>)
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	8c3b      	ldrh	r3, [r7, #32]
 800e6fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e700:	2b0a      	cmp	r3, #10
 800e702:	f300 812f 	bgt.w	800e964 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e706:	4b81      	ldr	r3, [pc, #516]	@ (800e90c <ip4_reass+0x2b4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e70c:	e015      	b.n	800e73a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e710:	695a      	ldr	r2, [r3, #20]
 800e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	429a      	cmp	r2, r3
 800e718:	d10c      	bne.n	800e734 <ip4_reass+0xdc>
 800e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71c:	699a      	ldr	r2, [r3, #24]
 800e71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	429a      	cmp	r2, r3
 800e724:	d106      	bne.n	800e734 <ip4_reass+0xdc>
 800e726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e728:	899a      	ldrh	r2, [r3, #12]
 800e72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e72c:	889b      	ldrh	r3, [r3, #4]
 800e72e:	b29b      	uxth	r3, r3
 800e730:	429a      	cmp	r2, r3
 800e732:	d006      	beq.n	800e742 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	633b      	str	r3, [r7, #48]	@ 0x30
 800e73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e6      	bne.n	800e70e <ip4_reass+0xb6>
 800e740:	e000      	b.n	800e744 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e742:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e746:	2b00      	cmp	r3, #0
 800e748:	d109      	bne.n	800e75e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e74a:	8c3b      	ldrh	r3, [r7, #32]
 800e74c:	4619      	mov	r1, r3
 800e74e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e750:	f7ff fdb0 	bl	800e2b4 <ip_reass_enqueue_new_datagram>
 800e754:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d11c      	bne.n	800e796 <ip4_reass+0x13e>
      goto nullreturn;
 800e75c:	e105      	b.n	800e96a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e760:	88db      	ldrh	r3, [r3, #6]
 800e762:	b29b      	uxth	r3, r3
 800e764:	4618      	mov	r0, r3
 800e766:	f7f6 fe79 	bl	800545c <lwip_htons>
 800e76a:	4603      	mov	r3, r0
 800e76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e770:	2b00      	cmp	r3, #0
 800e772:	d110      	bne.n	800e796 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e776:	89db      	ldrh	r3, [r3, #14]
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f6 fe6f 	bl	800545c <lwip_htons>
 800e77e:	4603      	mov	r3, r0
 800e780:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e784:	2b00      	cmp	r3, #0
 800e786:	d006      	beq.n	800e796 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78a:	3308      	adds	r3, #8
 800e78c:	2214      	movs	r2, #20
 800e78e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e790:	4618      	mov	r0, r3
 800e792:	f000 fd4c 	bl	800f22e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e798:	88db      	ldrh	r3, [r3, #6]
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	f003 0320 	and.w	r3, r3, #32
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	bf0c      	ite	eq
 800e7a4:	2301      	moveq	r3, #1
 800e7a6:	2300      	movne	r3, #0
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d00e      	beq.n	800e7d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e7b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7b6:	4413      	add	r3, r2
 800e7b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e7ba:	8b7a      	ldrh	r2, [r7, #26]
 800e7bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	f0c0 80a0 	bcc.w	800e904 <ip4_reass+0x2ac>
 800e7c4:	8b7b      	ldrh	r3, [r7, #26]
 800e7c6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	f200 809a 	bhi.w	800e904 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e7d0:	69fa      	ldr	r2, [r7, #28]
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7d6:	f7ff fdd5 	bl	800e384 <ip_reass_chain_frag_into_datagram_and_validate>
 800e7da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e2:	f000 809b 	beq.w	800e91c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e7e6:	4b48      	ldr	r3, [pc, #288]	@ (800e908 <ip4_reass+0x2b0>)
 800e7e8:	881a      	ldrh	r2, [r3, #0]
 800e7ea:	8c3b      	ldrh	r3, [r7, #32]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	4b45      	ldr	r3, [pc, #276]	@ (800e908 <ip4_reass+0x2b0>)
 800e7f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00d      	beq.n	800e816 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e7fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e7fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7fe:	4413      	add	r3, r2
 800e800:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e804:	8a7a      	ldrh	r2, [r7, #18]
 800e806:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e80a:	7f9b      	ldrb	r3, [r3, #30]
 800e80c:	f043 0301 	orr.w	r3, r3, #1
 800e810:	b2da      	uxtb	r2, r3
 800e812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e814:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d171      	bne.n	800e900 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e81e:	8b9b      	ldrh	r3, [r3, #28]
 800e820:	3314      	adds	r3, #20
 800e822:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e838:	3308      	adds	r3, #8
 800e83a:	2214      	movs	r2, #20
 800e83c:	4619      	mov	r1, r3
 800e83e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e840:	f000 fcf5 	bl	800f22e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e844:	8a3b      	ldrh	r3, [r7, #16]
 800e846:	4618      	mov	r0, r3
 800e848:	f7f6 fe08 	bl	800545c <lwip_htons>
 800e84c:	4603      	mov	r3, r0
 800e84e:	461a      	mov	r2, r3
 800e850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e852:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e856:	2200      	movs	r2, #0
 800e858:	719a      	strb	r2, [r3, #6]
 800e85a:	2200      	movs	r2, #0
 800e85c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e860:	2200      	movs	r2, #0
 800e862:	729a      	strb	r2, [r3, #10]
 800e864:	2200      	movs	r2, #0
 800e866:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e86e:	e00d      	b.n	800e88c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e876:	2114      	movs	r1, #20
 800e878:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e87a:	f7f8 f8c7 	bl	8006a0c <pbuf_remove_header>
      pbuf_cat(p, r);
 800e87e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7f8 fa0b 	bl	8006c9c <pbuf_cat>
      r = iprh->next_pbuf;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1ee      	bne.n	800e870 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e892:	4b1e      	ldr	r3, [pc, #120]	@ (800e90c <ip4_reass+0x2b4>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e898:	429a      	cmp	r2, r3
 800e89a:	d102      	bne.n	800e8a2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e89c:	2300      	movs	r3, #0
 800e89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8a0:	e010      	b.n	800e8c4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e8a2:	4b1a      	ldr	r3, [pc, #104]	@ (800e90c <ip4_reass+0x2b4>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8a8:	e007      	b.n	800e8ba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d006      	beq.n	800e8c2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d1f4      	bne.n	800e8aa <ip4_reass+0x252>
 800e8c0:	e000      	b.n	800e8c4 <ip4_reass+0x26c>
          break;
 800e8c2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e8c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8c8:	f7ff fd2e 	bl	800e328 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7f8 f9ab 	bl	8006c28 <pbuf_clen>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e908 <ip4_reass+0x2b0>)
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	8c3a      	ldrh	r2, [r7, #32]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d906      	bls.n	800e8ee <ip4_reass+0x296>
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e910 <ip4_reass+0x2b8>)
 800e8e2:	f240 229b 	movw	r2, #667	@ 0x29b
 800e8e6:	490b      	ldr	r1, [pc, #44]	@ (800e914 <ip4_reass+0x2bc>)
 800e8e8:	480b      	ldr	r0, [pc, #44]	@ (800e918 <ip4_reass+0x2c0>)
 800e8ea:	f000 fbc5 	bl	800f078 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e8ee:	4b06      	ldr	r3, [pc, #24]	@ (800e908 <ip4_reass+0x2b0>)
 800e8f0:	881a      	ldrh	r2, [r3, #0]
 800e8f2:	8c3b      	ldrh	r3, [r7, #32]
 800e8f4:	1ad3      	subs	r3, r2, r3
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	4b03      	ldr	r3, [pc, #12]	@ (800e908 <ip4_reass+0x2b0>)
 800e8fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	e038      	b.n	800e972 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e900:	2300      	movs	r3, #0
 800e902:	e036      	b.n	800e972 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e904:	bf00      	nop
 800e906:	e00a      	b.n	800e91e <ip4_reass+0x2c6>
 800e908:	20008434 	.word	0x20008434
 800e90c:	20008430 	.word	0x20008430
 800e910:	080125c8 	.word	0x080125c8
 800e914:	08012738 	.word	0x08012738
 800e918:	08012610 	.word	0x08012610
    goto nullreturn_ipr;
 800e91c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e920:	2b00      	cmp	r3, #0
 800e922:	d106      	bne.n	800e932 <ip4_reass+0x2da>
 800e924:	4b15      	ldr	r3, [pc, #84]	@ (800e97c <ip4_reass+0x324>)
 800e926:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e92a:	4915      	ldr	r1, [pc, #84]	@ (800e980 <ip4_reass+0x328>)
 800e92c:	4815      	ldr	r0, [pc, #84]	@ (800e984 <ip4_reass+0x32c>)
 800e92e:	f000 fba3 	bl	800f078 <iprintf>
  if (ipr->p == NULL) {
 800e932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d116      	bne.n	800e968 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e93a:	4b13      	ldr	r3, [pc, #76]	@ (800e988 <ip4_reass+0x330>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e940:	429a      	cmp	r2, r3
 800e942:	d006      	beq.n	800e952 <ip4_reass+0x2fa>
 800e944:	4b0d      	ldr	r3, [pc, #52]	@ (800e97c <ip4_reass+0x324>)
 800e946:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e94a:	4910      	ldr	r1, [pc, #64]	@ (800e98c <ip4_reass+0x334>)
 800e94c:	480d      	ldr	r0, [pc, #52]	@ (800e984 <ip4_reass+0x32c>)
 800e94e:	f000 fb93 	bl	800f078 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e952:	2100      	movs	r1, #0
 800e954:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e956:	f7ff fce7 	bl	800e328 <ip_reass_dequeue_datagram>
 800e95a:	e006      	b.n	800e96a <ip4_reass+0x312>
    goto nullreturn;
 800e95c:	bf00      	nop
 800e95e:	e004      	b.n	800e96a <ip4_reass+0x312>
    goto nullreturn;
 800e960:	bf00      	nop
 800e962:	e002      	b.n	800e96a <ip4_reass+0x312>
      goto nullreturn;
 800e964:	bf00      	nop
 800e966:	e000      	b.n	800e96a <ip4_reass+0x312>
  }

nullreturn:
 800e968:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7f8 f8d4 	bl	8006b18 <pbuf_free>
  return NULL;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3738      	adds	r7, #56	@ 0x38
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	080125c8 	.word	0x080125c8
 800e980:	08012754 	.word	0x08012754
 800e984:	08012610 	.word	0x08012610
 800e988:	20008430 	.word	0x20008430
 800e98c:	08012760 	.word	0x08012760

0800e990 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e994:	2005      	movs	r0, #5
 800e996:	f7f7 f9d9 	bl	8005d4c <memp_malloc>
 800e99a:	4603      	mov	r3, r0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d106      	bne.n	800e9bc <ip_frag_free_pbuf_custom_ref+0x1c>
 800e9ae:	4b07      	ldr	r3, [pc, #28]	@ (800e9cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e9b0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800e9b4:	4906      	ldr	r1, [pc, #24]	@ (800e9d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e9b6:	4807      	ldr	r0, [pc, #28]	@ (800e9d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e9b8:	f000 fb5e 	bl	800f078 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	2005      	movs	r0, #5
 800e9c0:	f7f7 fa34 	bl	8005e2c <memp_free>
}
 800e9c4:	bf00      	nop
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	080125c8 	.word	0x080125c8
 800e9d0:	08012780 	.word	0x08012780
 800e9d4:	08012610 	.word	0x08012610

0800e9d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <ipfrag_free_pbuf_custom+0x20>
 800e9ea:	4b11      	ldr	r3, [pc, #68]	@ (800ea30 <ipfrag_free_pbuf_custom+0x58>)
 800e9ec:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800e9f0:	4910      	ldr	r1, [pc, #64]	@ (800ea34 <ipfrag_free_pbuf_custom+0x5c>)
 800e9f2:	4811      	ldr	r0, [pc, #68]	@ (800ea38 <ipfrag_free_pbuf_custom+0x60>)
 800e9f4:	f000 fb40 	bl	800f078 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d006      	beq.n	800ea0e <ipfrag_free_pbuf_custom+0x36>
 800ea00:	4b0b      	ldr	r3, [pc, #44]	@ (800ea30 <ipfrag_free_pbuf_custom+0x58>)
 800ea02:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ea06:	490d      	ldr	r1, [pc, #52]	@ (800ea3c <ipfrag_free_pbuf_custom+0x64>)
 800ea08:	480b      	ldr	r0, [pc, #44]	@ (800ea38 <ipfrag_free_pbuf_custom+0x60>)
 800ea0a:	f000 fb35 	bl	800f078 <iprintf>
  if (pcr->original != NULL) {
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d004      	beq.n	800ea20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	695b      	ldr	r3, [r3, #20]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7f8 f87c 	bl	8006b18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f7ff ffbd 	bl	800e9a0 <ip_frag_free_pbuf_custom_ref>
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	080125c8 	.word	0x080125c8
 800ea34:	0801278c 	.word	0x0801278c
 800ea38:	08012610 	.word	0x08012610
 800ea3c:	08012798 	.word	0x08012798

0800ea40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b094      	sub	sp, #80	@ 0x50
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ea56:	3b14      	subs	r3, #20
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	da00      	bge.n	800ea5e <ip4_frag+0x1e>
 800ea5c:	3307      	adds	r3, #7
 800ea5e:	10db      	asrs	r3, r3, #3
 800ea60:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ea62:	2314      	movs	r3, #20
 800ea64:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800ea6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ea70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	f003 030f 	and.w	r3, r3, #15
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b14      	cmp	r3, #20
 800ea80:	d002      	beq.n	800ea88 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ea82:	f06f 0305 	mvn.w	r3, #5
 800ea86:	e110      	b.n	800ecaa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	895b      	ldrh	r3, [r3, #10]
 800ea8c:	2b13      	cmp	r3, #19
 800ea8e:	d809      	bhi.n	800eaa4 <ip4_frag+0x64>
 800ea90:	4b88      	ldr	r3, [pc, #544]	@ (800ecb4 <ip4_frag+0x274>)
 800ea92:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800ea96:	4988      	ldr	r1, [pc, #544]	@ (800ecb8 <ip4_frag+0x278>)
 800ea98:	4888      	ldr	r0, [pc, #544]	@ (800ecbc <ip4_frag+0x27c>)
 800ea9a:	f000 faed 	bl	800f078 <iprintf>
 800ea9e:	f06f 0305 	mvn.w	r3, #5
 800eaa2:	e102      	b.n	800ecaa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800eaa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa6:	88db      	ldrh	r3, [r3, #6]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7f6 fcd6 	bl	800545c <lwip_htons>
 800eab0:	4603      	mov	r3, r0
 800eab2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800eab4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eaba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800eabe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eac4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	891b      	ldrh	r3, [r3, #8]
 800eaca:	3b14      	subs	r3, #20
 800eacc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800ead0:	e0e1      	b.n	800ec96 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ead2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800eadc:	4293      	cmp	r3, r2
 800eade:	bf28      	it	cs
 800eae0:	4613      	movcs	r3, r2
 800eae2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eae4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eae8:	2114      	movs	r1, #20
 800eaea:	200e      	movs	r0, #14
 800eaec:	f7f7 fd30 	bl	8006550 <pbuf_alloc>
 800eaf0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 80d5 	beq.w	800eca4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafc:	895b      	ldrh	r3, [r3, #10]
 800eafe:	2b13      	cmp	r3, #19
 800eb00:	d806      	bhi.n	800eb10 <ip4_frag+0xd0>
 800eb02:	4b6c      	ldr	r3, [pc, #432]	@ (800ecb4 <ip4_frag+0x274>)
 800eb04:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800eb08:	496d      	ldr	r1, [pc, #436]	@ (800ecc0 <ip4_frag+0x280>)
 800eb0a:	486c      	ldr	r0, [pc, #432]	@ (800ecbc <ip4_frag+0x27c>)
 800eb0c:	f000 fab4 	bl	800f078 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	2214      	movs	r2, #20
 800eb16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f000 fb88 	bl	800f22e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800eb24:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb26:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800eb2a:	e064      	b.n	800ebf6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	895a      	ldrh	r2, [r3, #10]
 800eb30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	895b      	ldrh	r3, [r3, #10]
 800eb3a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d906      	bls.n	800eb4e <ip4_frag+0x10e>
 800eb40:	4b5c      	ldr	r3, [pc, #368]	@ (800ecb4 <ip4_frag+0x274>)
 800eb42:	f240 322d 	movw	r2, #813	@ 0x32d
 800eb46:	495f      	ldr	r1, [pc, #380]	@ (800ecc4 <ip4_frag+0x284>)
 800eb48:	485c      	ldr	r0, [pc, #368]	@ (800ecbc <ip4_frag+0x27c>)
 800eb4a:	f000 fa95 	bl	800f078 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800eb4e:	8bfa      	ldrh	r2, [r7, #30]
 800eb50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800eb54:	4293      	cmp	r3, r2
 800eb56:	bf28      	it	cs
 800eb58:	4613      	movcs	r3, r2
 800eb5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800eb5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d105      	bne.n	800eb72 <ip4_frag+0x132>
        poff = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	60fb      	str	r3, [r7, #12]
        continue;
 800eb70:	e041      	b.n	800ebf6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800eb72:	f7ff ff0d 	bl	800e990 <ip_frag_alloc_pbuf_custom_ref>
 800eb76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d103      	bne.n	800eb86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800eb7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb80:	f7f7 ffca 	bl	8006b18 <pbuf_free>
        goto memerr;
 800eb84:	e08f      	b.n	800eca6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eb8e:	4413      	add	r3, r2
 800eb90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800eb94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800eb98:	9201      	str	r2, [sp, #4]
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2241      	movs	r2, #65	@ 0x41
 800eba0:	2000      	movs	r0, #0
 800eba2:	f7f7 fdff 	bl	80067a4 <pbuf_alloced_custom>
 800eba6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ebae:	69b8      	ldr	r0, [r7, #24]
 800ebb0:	f7ff fef6 	bl	800e9a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ebb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebb6:	f7f7 ffaf 	bl	8006b18 <pbuf_free>
        goto memerr;
 800ebba:	e074      	b.n	800eca6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f7f8 f84b 	bl	8006c58 <pbuf_ref>
      pcr->original = p;
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	4a3f      	ldr	r2, [pc, #252]	@ (800ecc8 <ip4_frag+0x288>)
 800ebcc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ebce:	6979      	ldr	r1, [r7, #20]
 800ebd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebd2:	f7f8 f863 	bl	8006c9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ebd6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ebda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ebe4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d004      	beq.n	800ebf6 <ip4_frag+0x1b6>
        poff = 0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ebf6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d196      	bne.n	800eb2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ebfe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ec00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ec04:	4413      	add	r3, r2
 800ec06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ec0c:	f1a3 0213 	sub.w	r2, r3, #19
 800ec10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ec14:	429a      	cmp	r2, r3
 800ec16:	bfcc      	ite	gt
 800ec18:	2301      	movgt	r3, #1
 800ec1a:	2300      	movle	r3, #0
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ec20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ec24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d002      	beq.n	800ec36 <ip4_frag+0x1f6>
 800ec30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ec36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ec38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ec3c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ec3e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7f6 fc0b 	bl	800545c <lwip_htons>
 800ec46:	4603      	mov	r3, r0
 800ec48:	461a      	mov	r2, r3
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ec4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec50:	3314      	adds	r3, #20
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7f6 fc01 	bl	800545c <lwip_htons>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ec62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec64:	2200      	movs	r2, #0
 800ec66:	729a      	strb	r2, [r3, #10]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	695b      	ldr	r3, [r3, #20]
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec74:	68b8      	ldr	r0, [r7, #8]
 800ec76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ec78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec7a:	f7f7 ff4d 	bl	8006b18 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ec7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ec82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ec8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ec8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ec90:	4413      	add	r3, r2
 800ec92:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ec96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	f47f af19 	bne.w	800ead2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	e002      	b.n	800ecaa <ip4_frag+0x26a>
      goto memerr;
 800eca4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3748      	adds	r7, #72	@ 0x48
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	080125c8 	.word	0x080125c8
 800ecb8:	080127a4 	.word	0x080127a4
 800ecbc:	08012610 	.word	0x08012610
 800ecc0:	080127c0 	.word	0x080127c0
 800ecc4:	080127e0 	.word	0x080127e0
 800ecc8:	0800e9d9 	.word	0x0800e9d9

0800eccc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ecd6:	230e      	movs	r3, #14
 800ecd8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	895b      	ldrh	r3, [r3, #10]
 800ecde:	2b0e      	cmp	r3, #14
 800ece0:	d96e      	bls.n	800edc0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	7bdb      	ldrb	r3, [r3, #15]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d106      	bne.n	800ecf8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	7b1a      	ldrb	r2, [r3, #12]
 800ed02:	7b5b      	ldrb	r3, [r3, #13]
 800ed04:	021b      	lsls	r3, r3, #8
 800ed06:	4313      	orrs	r3, r2
 800ed08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d023      	beq.n	800ed5e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d10f      	bne.n	800ed3e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	785b      	ldrb	r3, [r3, #1]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d11b      	bne.n	800ed5e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ed2a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ed2c:	d117      	bne.n	800ed5e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	7b5b      	ldrb	r3, [r3, #13]
 800ed32:	f043 0310 	orr.w	r3, r3, #16
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	735a      	strb	r2, [r3, #13]
 800ed3c:	e00f      	b.n	800ed5e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	2206      	movs	r2, #6
 800ed42:	4928      	ldr	r1, [pc, #160]	@ (800ede4 <ethernet_input+0x118>)
 800ed44:	4618      	mov	r0, r3
 800ed46:	f000 f9ec 	bl	800f122 <memcmp>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d106      	bne.n	800ed5e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	7b5b      	ldrb	r3, [r3, #13]
 800ed54:	f043 0308 	orr.w	r3, r3, #8
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ed5e:	89fb      	ldrh	r3, [r7, #14]
 800ed60:	2b08      	cmp	r3, #8
 800ed62:	d003      	beq.n	800ed6c <ethernet_input+0xa0>
 800ed64:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800ed68:	d014      	beq.n	800ed94 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ed6a:	e032      	b.n	800edd2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed72:	f003 0308 	and.w	r3, r3, #8
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d024      	beq.n	800edc4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ed7a:	8afb      	ldrh	r3, [r7, #22]
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7f7 fe44 	bl	8006a0c <pbuf_remove_header>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d11e      	bne.n	800edc8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ed8a:	6839      	ldr	r1, [r7, #0]
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f7fe ff21 	bl	800dbd4 <ip4_input>
      break;
 800ed92:	e013      	b.n	800edbc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed9a:	f003 0308 	and.w	r3, r3, #8
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d014      	beq.n	800edcc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800eda2:	8afb      	ldrh	r3, [r7, #22]
 800eda4:	4619      	mov	r1, r3
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7f7 fe30 	bl	8006a0c <pbuf_remove_header>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10e      	bne.n	800edd0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800edb2:	6839      	ldr	r1, [r7, #0]
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f7fe f8c1 	bl	800cf3c <etharp_input>
      break;
 800edba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	e00c      	b.n	800edda <ethernet_input+0x10e>
    goto free_and_return;
 800edc0:	bf00      	nop
 800edc2:	e006      	b.n	800edd2 <ethernet_input+0x106>
        goto free_and_return;
 800edc4:	bf00      	nop
 800edc6:	e004      	b.n	800edd2 <ethernet_input+0x106>
        goto free_and_return;
 800edc8:	bf00      	nop
 800edca:	e002      	b.n	800edd2 <ethernet_input+0x106>
        goto free_and_return;
 800edcc:	bf00      	nop
 800edce:	e000      	b.n	800edd2 <ethernet_input+0x106>
        goto free_and_return;
 800edd0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7f7 fea0 	bl	8006b18 <pbuf_free>
  return ERR_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3718      	adds	r7, #24
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	0801297c 	.word	0x0801297c

0800ede8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800edf6:	8c3b      	ldrh	r3, [r7, #32]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7f6 fb2f 	bl	800545c <lwip_htons>
 800edfe:	4603      	mov	r3, r0
 800ee00:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ee02:	210e      	movs	r1, #14
 800ee04:	68b8      	ldr	r0, [r7, #8]
 800ee06:	f7f7 fdf1 	bl	80069ec <pbuf_add_header>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d125      	bne.n	800ee5c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	8afa      	ldrh	r2, [r7, #22]
 800ee1a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	2206      	movs	r2, #6
 800ee20:	6839      	ldr	r1, [r7, #0]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f000 fa03 	bl	800f22e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	3306      	adds	r3, #6
 800ee2c:	2206      	movs	r2, #6
 800ee2e:	6879      	ldr	r1, [r7, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f000 f9fc 	bl	800f22e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ee3c:	2b06      	cmp	r3, #6
 800ee3e:	d006      	beq.n	800ee4e <ethernet_output+0x66>
 800ee40:	4b0a      	ldr	r3, [pc, #40]	@ (800ee6c <ethernet_output+0x84>)
 800ee42:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ee46:	490a      	ldr	r1, [pc, #40]	@ (800ee70 <ethernet_output+0x88>)
 800ee48:	480a      	ldr	r0, [pc, #40]	@ (800ee74 <ethernet_output+0x8c>)
 800ee4a:	f000 f915 	bl	800f078 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	699b      	ldr	r3, [r3, #24]
 800ee52:	68b9      	ldr	r1, [r7, #8]
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	4798      	blx	r3
 800ee58:	4603      	mov	r3, r0
 800ee5a:	e002      	b.n	800ee62 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ee5c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ee5e:	f06f 0301 	mvn.w	r3, #1
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3718      	adds	r7, #24
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	080127f0 	.word	0x080127f0
 800ee70:	08012828 	.word	0x08012828
 800ee74:	0801285c 	.word	0x0801285c

0800ee78 <rand>:
 800ee78:	4b16      	ldr	r3, [pc, #88]	@ (800eed4 <rand+0x5c>)
 800ee7a:	b510      	push	{r4, lr}
 800ee7c:	681c      	ldr	r4, [r3, #0]
 800ee7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ee80:	b9b3      	cbnz	r3, 800eeb0 <rand+0x38>
 800ee82:	2018      	movs	r0, #24
 800ee84:	f000 fa4a 	bl	800f31c <malloc>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	6320      	str	r0, [r4, #48]	@ 0x30
 800ee8c:	b920      	cbnz	r0, 800ee98 <rand+0x20>
 800ee8e:	4b12      	ldr	r3, [pc, #72]	@ (800eed8 <rand+0x60>)
 800ee90:	4812      	ldr	r0, [pc, #72]	@ (800eedc <rand+0x64>)
 800ee92:	2152      	movs	r1, #82	@ 0x52
 800ee94:	f000 f9da 	bl	800f24c <__assert_func>
 800ee98:	4911      	ldr	r1, [pc, #68]	@ (800eee0 <rand+0x68>)
 800ee9a:	4b12      	ldr	r3, [pc, #72]	@ (800eee4 <rand+0x6c>)
 800ee9c:	e9c0 1300 	strd	r1, r3, [r0]
 800eea0:	4b11      	ldr	r3, [pc, #68]	@ (800eee8 <rand+0x70>)
 800eea2:	6083      	str	r3, [r0, #8]
 800eea4:	230b      	movs	r3, #11
 800eea6:	8183      	strh	r3, [r0, #12]
 800eea8:	2100      	movs	r1, #0
 800eeaa:	2001      	movs	r0, #1
 800eeac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eeb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eeb2:	480e      	ldr	r0, [pc, #56]	@ (800eeec <rand+0x74>)
 800eeb4:	690b      	ldr	r3, [r1, #16]
 800eeb6:	694c      	ldr	r4, [r1, #20]
 800eeb8:	4a0d      	ldr	r2, [pc, #52]	@ (800eef0 <rand+0x78>)
 800eeba:	4358      	muls	r0, r3
 800eebc:	fb02 0004 	mla	r0, r2, r4, r0
 800eec0:	fba3 3202 	umull	r3, r2, r3, r2
 800eec4:	3301      	adds	r3, #1
 800eec6:	eb40 0002 	adc.w	r0, r0, r2
 800eeca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800eece:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800eed2:	bd10      	pop	{r4, pc}
 800eed4:	20000038 	.word	0x20000038
 800eed8:	0801298a 	.word	0x0801298a
 800eedc:	080129a1 	.word	0x080129a1
 800eee0:	abcd330e 	.word	0xabcd330e
 800eee4:	e66d1234 	.word	0xe66d1234
 800eee8:	0005deec 	.word	0x0005deec
 800eeec:	5851f42d 	.word	0x5851f42d
 800eef0:	4c957f2d 	.word	0x4c957f2d

0800eef4 <std>:
 800eef4:	2300      	movs	r3, #0
 800eef6:	b510      	push	{r4, lr}
 800eef8:	4604      	mov	r4, r0
 800eefa:	e9c0 3300 	strd	r3, r3, [r0]
 800eefe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef02:	6083      	str	r3, [r0, #8]
 800ef04:	8181      	strh	r1, [r0, #12]
 800ef06:	6643      	str	r3, [r0, #100]	@ 0x64
 800ef08:	81c2      	strh	r2, [r0, #14]
 800ef0a:	6183      	str	r3, [r0, #24]
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	2208      	movs	r2, #8
 800ef10:	305c      	adds	r0, #92	@ 0x5c
 800ef12:	f000 f916 	bl	800f142 <memset>
 800ef16:	4b0d      	ldr	r3, [pc, #52]	@ (800ef4c <std+0x58>)
 800ef18:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef50 <std+0x5c>)
 800ef1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef54 <std+0x60>)
 800ef20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef22:	4b0d      	ldr	r3, [pc, #52]	@ (800ef58 <std+0x64>)
 800ef24:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef26:	4b0d      	ldr	r3, [pc, #52]	@ (800ef5c <std+0x68>)
 800ef28:	6224      	str	r4, [r4, #32]
 800ef2a:	429c      	cmp	r4, r3
 800ef2c:	d006      	beq.n	800ef3c <std+0x48>
 800ef2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ef32:	4294      	cmp	r4, r2
 800ef34:	d002      	beq.n	800ef3c <std+0x48>
 800ef36:	33d0      	adds	r3, #208	@ 0xd0
 800ef38:	429c      	cmp	r4, r3
 800ef3a:	d105      	bne.n	800ef48 <std+0x54>
 800ef3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef44:	f000 b970 	b.w	800f228 <__retarget_lock_init_recursive>
 800ef48:	bd10      	pop	{r4, pc}
 800ef4a:	bf00      	nop
 800ef4c:	0800f09d 	.word	0x0800f09d
 800ef50:	0800f0bf 	.word	0x0800f0bf
 800ef54:	0800f0f7 	.word	0x0800f0f7
 800ef58:	0800f11b 	.word	0x0800f11b
 800ef5c:	20008438 	.word	0x20008438

0800ef60 <stdio_exit_handler>:
 800ef60:	4a02      	ldr	r2, [pc, #8]	@ (800ef6c <stdio_exit_handler+0xc>)
 800ef62:	4903      	ldr	r1, [pc, #12]	@ (800ef70 <stdio_exit_handler+0x10>)
 800ef64:	4803      	ldr	r0, [pc, #12]	@ (800ef74 <stdio_exit_handler+0x14>)
 800ef66:	f000 b869 	b.w	800f03c <_fwalk_sglue>
 800ef6a:	bf00      	nop
 800ef6c:	2000002c 	.word	0x2000002c
 800ef70:	0800fb31 	.word	0x0800fb31
 800ef74:	2000003c 	.word	0x2000003c

0800ef78 <cleanup_stdio>:
 800ef78:	6841      	ldr	r1, [r0, #4]
 800ef7a:	4b0c      	ldr	r3, [pc, #48]	@ (800efac <cleanup_stdio+0x34>)
 800ef7c:	4299      	cmp	r1, r3
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	4604      	mov	r4, r0
 800ef82:	d001      	beq.n	800ef88 <cleanup_stdio+0x10>
 800ef84:	f000 fdd4 	bl	800fb30 <_fflush_r>
 800ef88:	68a1      	ldr	r1, [r4, #8]
 800ef8a:	4b09      	ldr	r3, [pc, #36]	@ (800efb0 <cleanup_stdio+0x38>)
 800ef8c:	4299      	cmp	r1, r3
 800ef8e:	d002      	beq.n	800ef96 <cleanup_stdio+0x1e>
 800ef90:	4620      	mov	r0, r4
 800ef92:	f000 fdcd 	bl	800fb30 <_fflush_r>
 800ef96:	68e1      	ldr	r1, [r4, #12]
 800ef98:	4b06      	ldr	r3, [pc, #24]	@ (800efb4 <cleanup_stdio+0x3c>)
 800ef9a:	4299      	cmp	r1, r3
 800ef9c:	d004      	beq.n	800efa8 <cleanup_stdio+0x30>
 800ef9e:	4620      	mov	r0, r4
 800efa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efa4:	f000 bdc4 	b.w	800fb30 <_fflush_r>
 800efa8:	bd10      	pop	{r4, pc}
 800efaa:	bf00      	nop
 800efac:	20008438 	.word	0x20008438
 800efb0:	200084a0 	.word	0x200084a0
 800efb4:	20008508 	.word	0x20008508

0800efb8 <global_stdio_init.part.0>:
 800efb8:	b510      	push	{r4, lr}
 800efba:	4b0b      	ldr	r3, [pc, #44]	@ (800efe8 <global_stdio_init.part.0+0x30>)
 800efbc:	4c0b      	ldr	r4, [pc, #44]	@ (800efec <global_stdio_init.part.0+0x34>)
 800efbe:	4a0c      	ldr	r2, [pc, #48]	@ (800eff0 <global_stdio_init.part.0+0x38>)
 800efc0:	601a      	str	r2, [r3, #0]
 800efc2:	4620      	mov	r0, r4
 800efc4:	2200      	movs	r2, #0
 800efc6:	2104      	movs	r1, #4
 800efc8:	f7ff ff94 	bl	800eef4 <std>
 800efcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800efd0:	2201      	movs	r2, #1
 800efd2:	2109      	movs	r1, #9
 800efd4:	f7ff ff8e 	bl	800eef4 <std>
 800efd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800efdc:	2202      	movs	r2, #2
 800efde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe2:	2112      	movs	r1, #18
 800efe4:	f7ff bf86 	b.w	800eef4 <std>
 800efe8:	20008570 	.word	0x20008570
 800efec:	20008438 	.word	0x20008438
 800eff0:	0800ef61 	.word	0x0800ef61

0800eff4 <__sfp_lock_acquire>:
 800eff4:	4801      	ldr	r0, [pc, #4]	@ (800effc <__sfp_lock_acquire+0x8>)
 800eff6:	f000 b918 	b.w	800f22a <__retarget_lock_acquire_recursive>
 800effa:	bf00      	nop
 800effc:	20008579 	.word	0x20008579

0800f000 <__sfp_lock_release>:
 800f000:	4801      	ldr	r0, [pc, #4]	@ (800f008 <__sfp_lock_release+0x8>)
 800f002:	f000 b913 	b.w	800f22c <__retarget_lock_release_recursive>
 800f006:	bf00      	nop
 800f008:	20008579 	.word	0x20008579

0800f00c <__sinit>:
 800f00c:	b510      	push	{r4, lr}
 800f00e:	4604      	mov	r4, r0
 800f010:	f7ff fff0 	bl	800eff4 <__sfp_lock_acquire>
 800f014:	6a23      	ldr	r3, [r4, #32]
 800f016:	b11b      	cbz	r3, 800f020 <__sinit+0x14>
 800f018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f01c:	f7ff bff0 	b.w	800f000 <__sfp_lock_release>
 800f020:	4b04      	ldr	r3, [pc, #16]	@ (800f034 <__sinit+0x28>)
 800f022:	6223      	str	r3, [r4, #32]
 800f024:	4b04      	ldr	r3, [pc, #16]	@ (800f038 <__sinit+0x2c>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1f5      	bne.n	800f018 <__sinit+0xc>
 800f02c:	f7ff ffc4 	bl	800efb8 <global_stdio_init.part.0>
 800f030:	e7f2      	b.n	800f018 <__sinit+0xc>
 800f032:	bf00      	nop
 800f034:	0800ef79 	.word	0x0800ef79
 800f038:	20008570 	.word	0x20008570

0800f03c <_fwalk_sglue>:
 800f03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f040:	4607      	mov	r7, r0
 800f042:	4688      	mov	r8, r1
 800f044:	4614      	mov	r4, r2
 800f046:	2600      	movs	r6, #0
 800f048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f04c:	f1b9 0901 	subs.w	r9, r9, #1
 800f050:	d505      	bpl.n	800f05e <_fwalk_sglue+0x22>
 800f052:	6824      	ldr	r4, [r4, #0]
 800f054:	2c00      	cmp	r4, #0
 800f056:	d1f7      	bne.n	800f048 <_fwalk_sglue+0xc>
 800f058:	4630      	mov	r0, r6
 800f05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f05e:	89ab      	ldrh	r3, [r5, #12]
 800f060:	2b01      	cmp	r3, #1
 800f062:	d907      	bls.n	800f074 <_fwalk_sglue+0x38>
 800f064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f068:	3301      	adds	r3, #1
 800f06a:	d003      	beq.n	800f074 <_fwalk_sglue+0x38>
 800f06c:	4629      	mov	r1, r5
 800f06e:	4638      	mov	r0, r7
 800f070:	47c0      	blx	r8
 800f072:	4306      	orrs	r6, r0
 800f074:	3568      	adds	r5, #104	@ 0x68
 800f076:	e7e9      	b.n	800f04c <_fwalk_sglue+0x10>

0800f078 <iprintf>:
 800f078:	b40f      	push	{r0, r1, r2, r3}
 800f07a:	b507      	push	{r0, r1, r2, lr}
 800f07c:	4906      	ldr	r1, [pc, #24]	@ (800f098 <iprintf+0x20>)
 800f07e:	ab04      	add	r3, sp, #16
 800f080:	6808      	ldr	r0, [r1, #0]
 800f082:	f853 2b04 	ldr.w	r2, [r3], #4
 800f086:	6881      	ldr	r1, [r0, #8]
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	f000 fa27 	bl	800f4dc <_vfiprintf_r>
 800f08e:	b003      	add	sp, #12
 800f090:	f85d eb04 	ldr.w	lr, [sp], #4
 800f094:	b004      	add	sp, #16
 800f096:	4770      	bx	lr
 800f098:	20000038 	.word	0x20000038

0800f09c <__sread>:
 800f09c:	b510      	push	{r4, lr}
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a4:	f000 f878 	bl	800f198 <_read_r>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	bfab      	itete	ge
 800f0ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800f0b0:	181b      	addge	r3, r3, r0
 800f0b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f0b6:	bfac      	ite	ge
 800f0b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f0ba:	81a3      	strhlt	r3, [r4, #12]
 800f0bc:	bd10      	pop	{r4, pc}

0800f0be <__swrite>:
 800f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	461f      	mov	r7, r3
 800f0c4:	898b      	ldrh	r3, [r1, #12]
 800f0c6:	05db      	lsls	r3, r3, #23
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	4616      	mov	r6, r2
 800f0ce:	d505      	bpl.n	800f0dc <__swrite+0x1e>
 800f0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d4:	2302      	movs	r3, #2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f000 f84c 	bl	800f174 <_lseek_r>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	463b      	mov	r3, r7
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f2:	f000 b863 	b.w	800f1bc <_write_r>

0800f0f6 <__sseek>:
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fe:	f000 f839 	bl	800f174 <_lseek_r>
 800f102:	1c43      	adds	r3, r0, #1
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	bf15      	itete	ne
 800f108:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f10a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f10e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f112:	81a3      	strheq	r3, [r4, #12]
 800f114:	bf18      	it	ne
 800f116:	81a3      	strhne	r3, [r4, #12]
 800f118:	bd10      	pop	{r4, pc}

0800f11a <__sclose>:
 800f11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11e:	f000 b819 	b.w	800f154 <_close_r>

0800f122 <memcmp>:
 800f122:	b510      	push	{r4, lr}
 800f124:	3901      	subs	r1, #1
 800f126:	4402      	add	r2, r0
 800f128:	4290      	cmp	r0, r2
 800f12a:	d101      	bne.n	800f130 <memcmp+0xe>
 800f12c:	2000      	movs	r0, #0
 800f12e:	e005      	b.n	800f13c <memcmp+0x1a>
 800f130:	7803      	ldrb	r3, [r0, #0]
 800f132:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f136:	42a3      	cmp	r3, r4
 800f138:	d001      	beq.n	800f13e <memcmp+0x1c>
 800f13a:	1b18      	subs	r0, r3, r4
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	3001      	adds	r0, #1
 800f140:	e7f2      	b.n	800f128 <memcmp+0x6>

0800f142 <memset>:
 800f142:	4402      	add	r2, r0
 800f144:	4603      	mov	r3, r0
 800f146:	4293      	cmp	r3, r2
 800f148:	d100      	bne.n	800f14c <memset+0xa>
 800f14a:	4770      	bx	lr
 800f14c:	f803 1b01 	strb.w	r1, [r3], #1
 800f150:	e7f9      	b.n	800f146 <memset+0x4>
	...

0800f154 <_close_r>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	4d06      	ldr	r5, [pc, #24]	@ (800f170 <_close_r+0x1c>)
 800f158:	2300      	movs	r3, #0
 800f15a:	4604      	mov	r4, r0
 800f15c:	4608      	mov	r0, r1
 800f15e:	602b      	str	r3, [r5, #0]
 800f160:	f7f1 fcea 	bl	8000b38 <_close>
 800f164:	1c43      	adds	r3, r0, #1
 800f166:	d102      	bne.n	800f16e <_close_r+0x1a>
 800f168:	682b      	ldr	r3, [r5, #0]
 800f16a:	b103      	cbz	r3, 800f16e <_close_r+0x1a>
 800f16c:	6023      	str	r3, [r4, #0]
 800f16e:	bd38      	pop	{r3, r4, r5, pc}
 800f170:	20008574 	.word	0x20008574

0800f174 <_lseek_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4d07      	ldr	r5, [pc, #28]	@ (800f194 <_lseek_r+0x20>)
 800f178:	4604      	mov	r4, r0
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	f7f1 fcff 	bl	8000b86 <_lseek>
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	d102      	bne.n	800f192 <_lseek_r+0x1e>
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	b103      	cbz	r3, 800f192 <_lseek_r+0x1e>
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	20008574 	.word	0x20008574

0800f198 <_read_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d07      	ldr	r5, [pc, #28]	@ (800f1b8 <_read_r+0x20>)
 800f19c:	4604      	mov	r4, r0
 800f19e:	4608      	mov	r0, r1
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	602a      	str	r2, [r5, #0]
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	f7f1 fc8d 	bl	8000ac6 <_read>
 800f1ac:	1c43      	adds	r3, r0, #1
 800f1ae:	d102      	bne.n	800f1b6 <_read_r+0x1e>
 800f1b0:	682b      	ldr	r3, [r5, #0]
 800f1b2:	b103      	cbz	r3, 800f1b6 <_read_r+0x1e>
 800f1b4:	6023      	str	r3, [r4, #0]
 800f1b6:	bd38      	pop	{r3, r4, r5, pc}
 800f1b8:	20008574 	.word	0x20008574

0800f1bc <_write_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4d07      	ldr	r5, [pc, #28]	@ (800f1dc <_write_r+0x20>)
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	4608      	mov	r0, r1
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	602a      	str	r2, [r5, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	f7f1 fc98 	bl	8000b00 <_write>
 800f1d0:	1c43      	adds	r3, r0, #1
 800f1d2:	d102      	bne.n	800f1da <_write_r+0x1e>
 800f1d4:	682b      	ldr	r3, [r5, #0]
 800f1d6:	b103      	cbz	r3, 800f1da <_write_r+0x1e>
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	20008574 	.word	0x20008574

0800f1e0 <__libc_init_array>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	4d0d      	ldr	r5, [pc, #52]	@ (800f218 <__libc_init_array+0x38>)
 800f1e4:	4c0d      	ldr	r4, [pc, #52]	@ (800f21c <__libc_init_array+0x3c>)
 800f1e6:	1b64      	subs	r4, r4, r5
 800f1e8:	10a4      	asrs	r4, r4, #2
 800f1ea:	2600      	movs	r6, #0
 800f1ec:	42a6      	cmp	r6, r4
 800f1ee:	d109      	bne.n	800f204 <__libc_init_array+0x24>
 800f1f0:	4d0b      	ldr	r5, [pc, #44]	@ (800f220 <__libc_init_array+0x40>)
 800f1f2:	4c0c      	ldr	r4, [pc, #48]	@ (800f224 <__libc_init_array+0x44>)
 800f1f4:	f000 fe4a 	bl	800fe8c <_init>
 800f1f8:	1b64      	subs	r4, r4, r5
 800f1fa:	10a4      	asrs	r4, r4, #2
 800f1fc:	2600      	movs	r6, #0
 800f1fe:	42a6      	cmp	r6, r4
 800f200:	d105      	bne.n	800f20e <__libc_init_array+0x2e>
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	f855 3b04 	ldr.w	r3, [r5], #4
 800f208:	4798      	blx	r3
 800f20a:	3601      	adds	r6, #1
 800f20c:	e7ee      	b.n	800f1ec <__libc_init_array+0xc>
 800f20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f212:	4798      	blx	r3
 800f214:	3601      	adds	r6, #1
 800f216:	e7f2      	b.n	800f1fe <__libc_init_array+0x1e>
 800f218:	08012a70 	.word	0x08012a70
 800f21c:	08012a70 	.word	0x08012a70
 800f220:	08012a70 	.word	0x08012a70
 800f224:	08012a74 	.word	0x08012a74

0800f228 <__retarget_lock_init_recursive>:
 800f228:	4770      	bx	lr

0800f22a <__retarget_lock_acquire_recursive>:
 800f22a:	4770      	bx	lr

0800f22c <__retarget_lock_release_recursive>:
 800f22c:	4770      	bx	lr

0800f22e <memcpy>:
 800f22e:	440a      	add	r2, r1
 800f230:	4291      	cmp	r1, r2
 800f232:	f100 33ff 	add.w	r3, r0, #4294967295
 800f236:	d100      	bne.n	800f23a <memcpy+0xc>
 800f238:	4770      	bx	lr
 800f23a:	b510      	push	{r4, lr}
 800f23c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f240:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f244:	4291      	cmp	r1, r2
 800f246:	d1f9      	bne.n	800f23c <memcpy+0xe>
 800f248:	bd10      	pop	{r4, pc}
	...

0800f24c <__assert_func>:
 800f24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f24e:	4614      	mov	r4, r2
 800f250:	461a      	mov	r2, r3
 800f252:	4b09      	ldr	r3, [pc, #36]	@ (800f278 <__assert_func+0x2c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	4605      	mov	r5, r0
 800f258:	68d8      	ldr	r0, [r3, #12]
 800f25a:	b954      	cbnz	r4, 800f272 <__assert_func+0x26>
 800f25c:	4b07      	ldr	r3, [pc, #28]	@ (800f27c <__assert_func+0x30>)
 800f25e:	461c      	mov	r4, r3
 800f260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f264:	9100      	str	r1, [sp, #0]
 800f266:	462b      	mov	r3, r5
 800f268:	4905      	ldr	r1, [pc, #20]	@ (800f280 <__assert_func+0x34>)
 800f26a:	f000 fc89 	bl	800fb80 <fiprintf>
 800f26e:	f000 fd3d 	bl	800fcec <abort>
 800f272:	4b04      	ldr	r3, [pc, #16]	@ (800f284 <__assert_func+0x38>)
 800f274:	e7f4      	b.n	800f260 <__assert_func+0x14>
 800f276:	bf00      	nop
 800f278:	20000038 	.word	0x20000038
 800f27c:	08012a34 	.word	0x08012a34
 800f280:	08012a06 	.word	0x08012a06
 800f284:	080129f9 	.word	0x080129f9

0800f288 <_free_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4605      	mov	r5, r0
 800f28c:	2900      	cmp	r1, #0
 800f28e:	d041      	beq.n	800f314 <_free_r+0x8c>
 800f290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f294:	1f0c      	subs	r4, r1, #4
 800f296:	2b00      	cmp	r3, #0
 800f298:	bfb8      	it	lt
 800f29a:	18e4      	addlt	r4, r4, r3
 800f29c:	f000 f8e8 	bl	800f470 <__malloc_lock>
 800f2a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f318 <_free_r+0x90>)
 800f2a2:	6813      	ldr	r3, [r2, #0]
 800f2a4:	b933      	cbnz	r3, 800f2b4 <_free_r+0x2c>
 800f2a6:	6063      	str	r3, [r4, #4]
 800f2a8:	6014      	str	r4, [r2, #0]
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2b0:	f000 b8e4 	b.w	800f47c <__malloc_unlock>
 800f2b4:	42a3      	cmp	r3, r4
 800f2b6:	d908      	bls.n	800f2ca <_free_r+0x42>
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	1821      	adds	r1, r4, r0
 800f2bc:	428b      	cmp	r3, r1
 800f2be:	bf01      	itttt	eq
 800f2c0:	6819      	ldreq	r1, [r3, #0]
 800f2c2:	685b      	ldreq	r3, [r3, #4]
 800f2c4:	1809      	addeq	r1, r1, r0
 800f2c6:	6021      	streq	r1, [r4, #0]
 800f2c8:	e7ed      	b.n	800f2a6 <_free_r+0x1e>
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	b10b      	cbz	r3, 800f2d4 <_free_r+0x4c>
 800f2d0:	42a3      	cmp	r3, r4
 800f2d2:	d9fa      	bls.n	800f2ca <_free_r+0x42>
 800f2d4:	6811      	ldr	r1, [r2, #0]
 800f2d6:	1850      	adds	r0, r2, r1
 800f2d8:	42a0      	cmp	r0, r4
 800f2da:	d10b      	bne.n	800f2f4 <_free_r+0x6c>
 800f2dc:	6820      	ldr	r0, [r4, #0]
 800f2de:	4401      	add	r1, r0
 800f2e0:	1850      	adds	r0, r2, r1
 800f2e2:	4283      	cmp	r3, r0
 800f2e4:	6011      	str	r1, [r2, #0]
 800f2e6:	d1e0      	bne.n	800f2aa <_free_r+0x22>
 800f2e8:	6818      	ldr	r0, [r3, #0]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	6053      	str	r3, [r2, #4]
 800f2ee:	4408      	add	r0, r1
 800f2f0:	6010      	str	r0, [r2, #0]
 800f2f2:	e7da      	b.n	800f2aa <_free_r+0x22>
 800f2f4:	d902      	bls.n	800f2fc <_free_r+0x74>
 800f2f6:	230c      	movs	r3, #12
 800f2f8:	602b      	str	r3, [r5, #0]
 800f2fa:	e7d6      	b.n	800f2aa <_free_r+0x22>
 800f2fc:	6820      	ldr	r0, [r4, #0]
 800f2fe:	1821      	adds	r1, r4, r0
 800f300:	428b      	cmp	r3, r1
 800f302:	bf04      	itt	eq
 800f304:	6819      	ldreq	r1, [r3, #0]
 800f306:	685b      	ldreq	r3, [r3, #4]
 800f308:	6063      	str	r3, [r4, #4]
 800f30a:	bf04      	itt	eq
 800f30c:	1809      	addeq	r1, r1, r0
 800f30e:	6021      	streq	r1, [r4, #0]
 800f310:	6054      	str	r4, [r2, #4]
 800f312:	e7ca      	b.n	800f2aa <_free_r+0x22>
 800f314:	bd38      	pop	{r3, r4, r5, pc}
 800f316:	bf00      	nop
 800f318:	20008580 	.word	0x20008580

0800f31c <malloc>:
 800f31c:	4b02      	ldr	r3, [pc, #8]	@ (800f328 <malloc+0xc>)
 800f31e:	4601      	mov	r1, r0
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	f000 b825 	b.w	800f370 <_malloc_r>
 800f326:	bf00      	nop
 800f328:	20000038 	.word	0x20000038

0800f32c <sbrk_aligned>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	4e0f      	ldr	r6, [pc, #60]	@ (800f36c <sbrk_aligned+0x40>)
 800f330:	460c      	mov	r4, r1
 800f332:	6831      	ldr	r1, [r6, #0]
 800f334:	4605      	mov	r5, r0
 800f336:	b911      	cbnz	r1, 800f33e <sbrk_aligned+0x12>
 800f338:	f000 fcc8 	bl	800fccc <_sbrk_r>
 800f33c:	6030      	str	r0, [r6, #0]
 800f33e:	4621      	mov	r1, r4
 800f340:	4628      	mov	r0, r5
 800f342:	f000 fcc3 	bl	800fccc <_sbrk_r>
 800f346:	1c43      	adds	r3, r0, #1
 800f348:	d103      	bne.n	800f352 <sbrk_aligned+0x26>
 800f34a:	f04f 34ff 	mov.w	r4, #4294967295
 800f34e:	4620      	mov	r0, r4
 800f350:	bd70      	pop	{r4, r5, r6, pc}
 800f352:	1cc4      	adds	r4, r0, #3
 800f354:	f024 0403 	bic.w	r4, r4, #3
 800f358:	42a0      	cmp	r0, r4
 800f35a:	d0f8      	beq.n	800f34e <sbrk_aligned+0x22>
 800f35c:	1a21      	subs	r1, r4, r0
 800f35e:	4628      	mov	r0, r5
 800f360:	f000 fcb4 	bl	800fccc <_sbrk_r>
 800f364:	3001      	adds	r0, #1
 800f366:	d1f2      	bne.n	800f34e <sbrk_aligned+0x22>
 800f368:	e7ef      	b.n	800f34a <sbrk_aligned+0x1e>
 800f36a:	bf00      	nop
 800f36c:	2000857c 	.word	0x2000857c

0800f370 <_malloc_r>:
 800f370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f374:	1ccd      	adds	r5, r1, #3
 800f376:	f025 0503 	bic.w	r5, r5, #3
 800f37a:	3508      	adds	r5, #8
 800f37c:	2d0c      	cmp	r5, #12
 800f37e:	bf38      	it	cc
 800f380:	250c      	movcc	r5, #12
 800f382:	2d00      	cmp	r5, #0
 800f384:	4606      	mov	r6, r0
 800f386:	db01      	blt.n	800f38c <_malloc_r+0x1c>
 800f388:	42a9      	cmp	r1, r5
 800f38a:	d904      	bls.n	800f396 <_malloc_r+0x26>
 800f38c:	230c      	movs	r3, #12
 800f38e:	6033      	str	r3, [r6, #0]
 800f390:	2000      	movs	r0, #0
 800f392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f46c <_malloc_r+0xfc>
 800f39a:	f000 f869 	bl	800f470 <__malloc_lock>
 800f39e:	f8d8 3000 	ldr.w	r3, [r8]
 800f3a2:	461c      	mov	r4, r3
 800f3a4:	bb44      	cbnz	r4, 800f3f8 <_malloc_r+0x88>
 800f3a6:	4629      	mov	r1, r5
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7ff ffbf 	bl	800f32c <sbrk_aligned>
 800f3ae:	1c43      	adds	r3, r0, #1
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	d158      	bne.n	800f466 <_malloc_r+0xf6>
 800f3b4:	f8d8 4000 	ldr.w	r4, [r8]
 800f3b8:	4627      	mov	r7, r4
 800f3ba:	2f00      	cmp	r7, #0
 800f3bc:	d143      	bne.n	800f446 <_malloc_r+0xd6>
 800f3be:	2c00      	cmp	r4, #0
 800f3c0:	d04b      	beq.n	800f45a <_malloc_r+0xea>
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	eb04 0903 	add.w	r9, r4, r3
 800f3cc:	f000 fc7e 	bl	800fccc <_sbrk_r>
 800f3d0:	4581      	cmp	r9, r0
 800f3d2:	d142      	bne.n	800f45a <_malloc_r+0xea>
 800f3d4:	6821      	ldr	r1, [r4, #0]
 800f3d6:	1a6d      	subs	r5, r5, r1
 800f3d8:	4629      	mov	r1, r5
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f7ff ffa6 	bl	800f32c <sbrk_aligned>
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	d03a      	beq.n	800f45a <_malloc_r+0xea>
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	442b      	add	r3, r5
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800f3ee:	685a      	ldr	r2, [r3, #4]
 800f3f0:	bb62      	cbnz	r2, 800f44c <_malloc_r+0xdc>
 800f3f2:	f8c8 7000 	str.w	r7, [r8]
 800f3f6:	e00f      	b.n	800f418 <_malloc_r+0xa8>
 800f3f8:	6822      	ldr	r2, [r4, #0]
 800f3fa:	1b52      	subs	r2, r2, r5
 800f3fc:	d420      	bmi.n	800f440 <_malloc_r+0xd0>
 800f3fe:	2a0b      	cmp	r2, #11
 800f400:	d917      	bls.n	800f432 <_malloc_r+0xc2>
 800f402:	1961      	adds	r1, r4, r5
 800f404:	42a3      	cmp	r3, r4
 800f406:	6025      	str	r5, [r4, #0]
 800f408:	bf18      	it	ne
 800f40a:	6059      	strne	r1, [r3, #4]
 800f40c:	6863      	ldr	r3, [r4, #4]
 800f40e:	bf08      	it	eq
 800f410:	f8c8 1000 	streq.w	r1, [r8]
 800f414:	5162      	str	r2, [r4, r5]
 800f416:	604b      	str	r3, [r1, #4]
 800f418:	4630      	mov	r0, r6
 800f41a:	f000 f82f 	bl	800f47c <__malloc_unlock>
 800f41e:	f104 000b 	add.w	r0, r4, #11
 800f422:	1d23      	adds	r3, r4, #4
 800f424:	f020 0007 	bic.w	r0, r0, #7
 800f428:	1ac2      	subs	r2, r0, r3
 800f42a:	bf1c      	itt	ne
 800f42c:	1a1b      	subne	r3, r3, r0
 800f42e:	50a3      	strne	r3, [r4, r2]
 800f430:	e7af      	b.n	800f392 <_malloc_r+0x22>
 800f432:	6862      	ldr	r2, [r4, #4]
 800f434:	42a3      	cmp	r3, r4
 800f436:	bf0c      	ite	eq
 800f438:	f8c8 2000 	streq.w	r2, [r8]
 800f43c:	605a      	strne	r2, [r3, #4]
 800f43e:	e7eb      	b.n	800f418 <_malloc_r+0xa8>
 800f440:	4623      	mov	r3, r4
 800f442:	6864      	ldr	r4, [r4, #4]
 800f444:	e7ae      	b.n	800f3a4 <_malloc_r+0x34>
 800f446:	463c      	mov	r4, r7
 800f448:	687f      	ldr	r7, [r7, #4]
 800f44a:	e7b6      	b.n	800f3ba <_malloc_r+0x4a>
 800f44c:	461a      	mov	r2, r3
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	42a3      	cmp	r3, r4
 800f452:	d1fb      	bne.n	800f44c <_malloc_r+0xdc>
 800f454:	2300      	movs	r3, #0
 800f456:	6053      	str	r3, [r2, #4]
 800f458:	e7de      	b.n	800f418 <_malloc_r+0xa8>
 800f45a:	230c      	movs	r3, #12
 800f45c:	6033      	str	r3, [r6, #0]
 800f45e:	4630      	mov	r0, r6
 800f460:	f000 f80c 	bl	800f47c <__malloc_unlock>
 800f464:	e794      	b.n	800f390 <_malloc_r+0x20>
 800f466:	6005      	str	r5, [r0, #0]
 800f468:	e7d6      	b.n	800f418 <_malloc_r+0xa8>
 800f46a:	bf00      	nop
 800f46c:	20008580 	.word	0x20008580

0800f470 <__malloc_lock>:
 800f470:	4801      	ldr	r0, [pc, #4]	@ (800f478 <__malloc_lock+0x8>)
 800f472:	f7ff beda 	b.w	800f22a <__retarget_lock_acquire_recursive>
 800f476:	bf00      	nop
 800f478:	20008578 	.word	0x20008578

0800f47c <__malloc_unlock>:
 800f47c:	4801      	ldr	r0, [pc, #4]	@ (800f484 <__malloc_unlock+0x8>)
 800f47e:	f7ff bed5 	b.w	800f22c <__retarget_lock_release_recursive>
 800f482:	bf00      	nop
 800f484:	20008578 	.word	0x20008578

0800f488 <__sfputc_r>:
 800f488:	6893      	ldr	r3, [r2, #8]
 800f48a:	3b01      	subs	r3, #1
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	b410      	push	{r4}
 800f490:	6093      	str	r3, [r2, #8]
 800f492:	da08      	bge.n	800f4a6 <__sfputc_r+0x1e>
 800f494:	6994      	ldr	r4, [r2, #24]
 800f496:	42a3      	cmp	r3, r4
 800f498:	db01      	blt.n	800f49e <__sfputc_r+0x16>
 800f49a:	290a      	cmp	r1, #10
 800f49c:	d103      	bne.n	800f4a6 <__sfputc_r+0x1e>
 800f49e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4a2:	f000 bb7f 	b.w	800fba4 <__swbuf_r>
 800f4a6:	6813      	ldr	r3, [r2, #0]
 800f4a8:	1c58      	adds	r0, r3, #1
 800f4aa:	6010      	str	r0, [r2, #0]
 800f4ac:	7019      	strb	r1, [r3, #0]
 800f4ae:	4608      	mov	r0, r1
 800f4b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <__sfputs_r>:
 800f4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	4614      	mov	r4, r2
 800f4be:	18d5      	adds	r5, r2, r3
 800f4c0:	42ac      	cmp	r4, r5
 800f4c2:	d101      	bne.n	800f4c8 <__sfputs_r+0x12>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	e007      	b.n	800f4d8 <__sfputs_r+0x22>
 800f4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4cc:	463a      	mov	r2, r7
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f7ff ffda 	bl	800f488 <__sfputc_r>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d1f3      	bne.n	800f4c0 <__sfputs_r+0xa>
 800f4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4dc <_vfiprintf_r>:
 800f4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e0:	460d      	mov	r5, r1
 800f4e2:	b09d      	sub	sp, #116	@ 0x74
 800f4e4:	4614      	mov	r4, r2
 800f4e6:	4698      	mov	r8, r3
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	b118      	cbz	r0, 800f4f4 <_vfiprintf_r+0x18>
 800f4ec:	6a03      	ldr	r3, [r0, #32]
 800f4ee:	b90b      	cbnz	r3, 800f4f4 <_vfiprintf_r+0x18>
 800f4f0:	f7ff fd8c 	bl	800f00c <__sinit>
 800f4f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4f6:	07d9      	lsls	r1, r3, #31
 800f4f8:	d405      	bmi.n	800f506 <_vfiprintf_r+0x2a>
 800f4fa:	89ab      	ldrh	r3, [r5, #12]
 800f4fc:	059a      	lsls	r2, r3, #22
 800f4fe:	d402      	bmi.n	800f506 <_vfiprintf_r+0x2a>
 800f500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f502:	f7ff fe92 	bl	800f22a <__retarget_lock_acquire_recursive>
 800f506:	89ab      	ldrh	r3, [r5, #12]
 800f508:	071b      	lsls	r3, r3, #28
 800f50a:	d501      	bpl.n	800f510 <_vfiprintf_r+0x34>
 800f50c:	692b      	ldr	r3, [r5, #16]
 800f50e:	b99b      	cbnz	r3, 800f538 <_vfiprintf_r+0x5c>
 800f510:	4629      	mov	r1, r5
 800f512:	4630      	mov	r0, r6
 800f514:	f000 fb84 	bl	800fc20 <__swsetup_r>
 800f518:	b170      	cbz	r0, 800f538 <_vfiprintf_r+0x5c>
 800f51a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f51c:	07dc      	lsls	r4, r3, #31
 800f51e:	d504      	bpl.n	800f52a <_vfiprintf_r+0x4e>
 800f520:	f04f 30ff 	mov.w	r0, #4294967295
 800f524:	b01d      	add	sp, #116	@ 0x74
 800f526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52a:	89ab      	ldrh	r3, [r5, #12]
 800f52c:	0598      	lsls	r0, r3, #22
 800f52e:	d4f7      	bmi.n	800f520 <_vfiprintf_r+0x44>
 800f530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f532:	f7ff fe7b 	bl	800f22c <__retarget_lock_release_recursive>
 800f536:	e7f3      	b.n	800f520 <_vfiprintf_r+0x44>
 800f538:	2300      	movs	r3, #0
 800f53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f53c:	2320      	movs	r3, #32
 800f53e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f542:	f8cd 800c 	str.w	r8, [sp, #12]
 800f546:	2330      	movs	r3, #48	@ 0x30
 800f548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f6f8 <_vfiprintf_r+0x21c>
 800f54c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f550:	f04f 0901 	mov.w	r9, #1
 800f554:	4623      	mov	r3, r4
 800f556:	469a      	mov	sl, r3
 800f558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f55c:	b10a      	cbz	r2, 800f562 <_vfiprintf_r+0x86>
 800f55e:	2a25      	cmp	r2, #37	@ 0x25
 800f560:	d1f9      	bne.n	800f556 <_vfiprintf_r+0x7a>
 800f562:	ebba 0b04 	subs.w	fp, sl, r4
 800f566:	d00b      	beq.n	800f580 <_vfiprintf_r+0xa4>
 800f568:	465b      	mov	r3, fp
 800f56a:	4622      	mov	r2, r4
 800f56c:	4629      	mov	r1, r5
 800f56e:	4630      	mov	r0, r6
 800f570:	f7ff ffa1 	bl	800f4b6 <__sfputs_r>
 800f574:	3001      	adds	r0, #1
 800f576:	f000 80a7 	beq.w	800f6c8 <_vfiprintf_r+0x1ec>
 800f57a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f57c:	445a      	add	r2, fp
 800f57e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f580:	f89a 3000 	ldrb.w	r3, [sl]
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 809f 	beq.w	800f6c8 <_vfiprintf_r+0x1ec>
 800f58a:	2300      	movs	r3, #0
 800f58c:	f04f 32ff 	mov.w	r2, #4294967295
 800f590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f594:	f10a 0a01 	add.w	sl, sl, #1
 800f598:	9304      	str	r3, [sp, #16]
 800f59a:	9307      	str	r3, [sp, #28]
 800f59c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5a2:	4654      	mov	r4, sl
 800f5a4:	2205      	movs	r2, #5
 800f5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5aa:	4853      	ldr	r0, [pc, #332]	@ (800f6f8 <_vfiprintf_r+0x21c>)
 800f5ac:	f7f0 fe20 	bl	80001f0 <memchr>
 800f5b0:	9a04      	ldr	r2, [sp, #16]
 800f5b2:	b9d8      	cbnz	r0, 800f5ec <_vfiprintf_r+0x110>
 800f5b4:	06d1      	lsls	r1, r2, #27
 800f5b6:	bf44      	itt	mi
 800f5b8:	2320      	movmi	r3, #32
 800f5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5be:	0713      	lsls	r3, r2, #28
 800f5c0:	bf44      	itt	mi
 800f5c2:	232b      	movmi	r3, #43	@ 0x2b
 800f5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f5cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5ce:	d015      	beq.n	800f5fc <_vfiprintf_r+0x120>
 800f5d0:	9a07      	ldr	r2, [sp, #28]
 800f5d2:	4654      	mov	r4, sl
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	f04f 0c0a 	mov.w	ip, #10
 800f5da:	4621      	mov	r1, r4
 800f5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5e0:	3b30      	subs	r3, #48	@ 0x30
 800f5e2:	2b09      	cmp	r3, #9
 800f5e4:	d94b      	bls.n	800f67e <_vfiprintf_r+0x1a2>
 800f5e6:	b1b0      	cbz	r0, 800f616 <_vfiprintf_r+0x13a>
 800f5e8:	9207      	str	r2, [sp, #28]
 800f5ea:	e014      	b.n	800f616 <_vfiprintf_r+0x13a>
 800f5ec:	eba0 0308 	sub.w	r3, r0, r8
 800f5f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	9304      	str	r3, [sp, #16]
 800f5f8:	46a2      	mov	sl, r4
 800f5fa:	e7d2      	b.n	800f5a2 <_vfiprintf_r+0xc6>
 800f5fc:	9b03      	ldr	r3, [sp, #12]
 800f5fe:	1d19      	adds	r1, r3, #4
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	9103      	str	r1, [sp, #12]
 800f604:	2b00      	cmp	r3, #0
 800f606:	bfbb      	ittet	lt
 800f608:	425b      	neglt	r3, r3
 800f60a:	f042 0202 	orrlt.w	r2, r2, #2
 800f60e:	9307      	strge	r3, [sp, #28]
 800f610:	9307      	strlt	r3, [sp, #28]
 800f612:	bfb8      	it	lt
 800f614:	9204      	strlt	r2, [sp, #16]
 800f616:	7823      	ldrb	r3, [r4, #0]
 800f618:	2b2e      	cmp	r3, #46	@ 0x2e
 800f61a:	d10a      	bne.n	800f632 <_vfiprintf_r+0x156>
 800f61c:	7863      	ldrb	r3, [r4, #1]
 800f61e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f620:	d132      	bne.n	800f688 <_vfiprintf_r+0x1ac>
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	1d1a      	adds	r2, r3, #4
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	9203      	str	r2, [sp, #12]
 800f62a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f62e:	3402      	adds	r4, #2
 800f630:	9305      	str	r3, [sp, #20]
 800f632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f708 <_vfiprintf_r+0x22c>
 800f636:	7821      	ldrb	r1, [r4, #0]
 800f638:	2203      	movs	r2, #3
 800f63a:	4650      	mov	r0, sl
 800f63c:	f7f0 fdd8 	bl	80001f0 <memchr>
 800f640:	b138      	cbz	r0, 800f652 <_vfiprintf_r+0x176>
 800f642:	9b04      	ldr	r3, [sp, #16]
 800f644:	eba0 000a 	sub.w	r0, r0, sl
 800f648:	2240      	movs	r2, #64	@ 0x40
 800f64a:	4082      	lsls	r2, r0
 800f64c:	4313      	orrs	r3, r2
 800f64e:	3401      	adds	r4, #1
 800f650:	9304      	str	r3, [sp, #16]
 800f652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f656:	4829      	ldr	r0, [pc, #164]	@ (800f6fc <_vfiprintf_r+0x220>)
 800f658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f65c:	2206      	movs	r2, #6
 800f65e:	f7f0 fdc7 	bl	80001f0 <memchr>
 800f662:	2800      	cmp	r0, #0
 800f664:	d03f      	beq.n	800f6e6 <_vfiprintf_r+0x20a>
 800f666:	4b26      	ldr	r3, [pc, #152]	@ (800f700 <_vfiprintf_r+0x224>)
 800f668:	bb1b      	cbnz	r3, 800f6b2 <_vfiprintf_r+0x1d6>
 800f66a:	9b03      	ldr	r3, [sp, #12]
 800f66c:	3307      	adds	r3, #7
 800f66e:	f023 0307 	bic.w	r3, r3, #7
 800f672:	3308      	adds	r3, #8
 800f674:	9303      	str	r3, [sp, #12]
 800f676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f678:	443b      	add	r3, r7
 800f67a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f67c:	e76a      	b.n	800f554 <_vfiprintf_r+0x78>
 800f67e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f682:	460c      	mov	r4, r1
 800f684:	2001      	movs	r0, #1
 800f686:	e7a8      	b.n	800f5da <_vfiprintf_r+0xfe>
 800f688:	2300      	movs	r3, #0
 800f68a:	3401      	adds	r4, #1
 800f68c:	9305      	str	r3, [sp, #20]
 800f68e:	4619      	mov	r1, r3
 800f690:	f04f 0c0a 	mov.w	ip, #10
 800f694:	4620      	mov	r0, r4
 800f696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f69a:	3a30      	subs	r2, #48	@ 0x30
 800f69c:	2a09      	cmp	r2, #9
 800f69e:	d903      	bls.n	800f6a8 <_vfiprintf_r+0x1cc>
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d0c6      	beq.n	800f632 <_vfiprintf_r+0x156>
 800f6a4:	9105      	str	r1, [sp, #20]
 800f6a6:	e7c4      	b.n	800f632 <_vfiprintf_r+0x156>
 800f6a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	e7f0      	b.n	800f694 <_vfiprintf_r+0x1b8>
 800f6b2:	ab03      	add	r3, sp, #12
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	462a      	mov	r2, r5
 800f6b8:	4b12      	ldr	r3, [pc, #72]	@ (800f704 <_vfiprintf_r+0x228>)
 800f6ba:	a904      	add	r1, sp, #16
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f3af 8000 	nop.w
 800f6c2:	4607      	mov	r7, r0
 800f6c4:	1c78      	adds	r0, r7, #1
 800f6c6:	d1d6      	bne.n	800f676 <_vfiprintf_r+0x19a>
 800f6c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6ca:	07d9      	lsls	r1, r3, #31
 800f6cc:	d405      	bmi.n	800f6da <_vfiprintf_r+0x1fe>
 800f6ce:	89ab      	ldrh	r3, [r5, #12]
 800f6d0:	059a      	lsls	r2, r3, #22
 800f6d2:	d402      	bmi.n	800f6da <_vfiprintf_r+0x1fe>
 800f6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6d6:	f7ff fda9 	bl	800f22c <__retarget_lock_release_recursive>
 800f6da:	89ab      	ldrh	r3, [r5, #12]
 800f6dc:	065b      	lsls	r3, r3, #25
 800f6de:	f53f af1f 	bmi.w	800f520 <_vfiprintf_r+0x44>
 800f6e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6e4:	e71e      	b.n	800f524 <_vfiprintf_r+0x48>
 800f6e6:	ab03      	add	r3, sp, #12
 800f6e8:	9300      	str	r3, [sp, #0]
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	4b05      	ldr	r3, [pc, #20]	@ (800f704 <_vfiprintf_r+0x228>)
 800f6ee:	a904      	add	r1, sp, #16
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f000 f879 	bl	800f7e8 <_printf_i>
 800f6f6:	e7e4      	b.n	800f6c2 <_vfiprintf_r+0x1e6>
 800f6f8:	08012a35 	.word	0x08012a35
 800f6fc:	08012a3f 	.word	0x08012a3f
 800f700:	00000000 	.word	0x00000000
 800f704:	0800f4b7 	.word	0x0800f4b7
 800f708:	08012a3b 	.word	0x08012a3b

0800f70c <_printf_common>:
 800f70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f710:	4616      	mov	r6, r2
 800f712:	4698      	mov	r8, r3
 800f714:	688a      	ldr	r2, [r1, #8]
 800f716:	690b      	ldr	r3, [r1, #16]
 800f718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f71c:	4293      	cmp	r3, r2
 800f71e:	bfb8      	it	lt
 800f720:	4613      	movlt	r3, r2
 800f722:	6033      	str	r3, [r6, #0]
 800f724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f728:	4607      	mov	r7, r0
 800f72a:	460c      	mov	r4, r1
 800f72c:	b10a      	cbz	r2, 800f732 <_printf_common+0x26>
 800f72e:	3301      	adds	r3, #1
 800f730:	6033      	str	r3, [r6, #0]
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	0699      	lsls	r1, r3, #26
 800f736:	bf42      	ittt	mi
 800f738:	6833      	ldrmi	r3, [r6, #0]
 800f73a:	3302      	addmi	r3, #2
 800f73c:	6033      	strmi	r3, [r6, #0]
 800f73e:	6825      	ldr	r5, [r4, #0]
 800f740:	f015 0506 	ands.w	r5, r5, #6
 800f744:	d106      	bne.n	800f754 <_printf_common+0x48>
 800f746:	f104 0a19 	add.w	sl, r4, #25
 800f74a:	68e3      	ldr	r3, [r4, #12]
 800f74c:	6832      	ldr	r2, [r6, #0]
 800f74e:	1a9b      	subs	r3, r3, r2
 800f750:	42ab      	cmp	r3, r5
 800f752:	dc26      	bgt.n	800f7a2 <_printf_common+0x96>
 800f754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f758:	6822      	ldr	r2, [r4, #0]
 800f75a:	3b00      	subs	r3, #0
 800f75c:	bf18      	it	ne
 800f75e:	2301      	movne	r3, #1
 800f760:	0692      	lsls	r2, r2, #26
 800f762:	d42b      	bmi.n	800f7bc <_printf_common+0xb0>
 800f764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f768:	4641      	mov	r1, r8
 800f76a:	4638      	mov	r0, r7
 800f76c:	47c8      	blx	r9
 800f76e:	3001      	adds	r0, #1
 800f770:	d01e      	beq.n	800f7b0 <_printf_common+0xa4>
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	6922      	ldr	r2, [r4, #16]
 800f776:	f003 0306 	and.w	r3, r3, #6
 800f77a:	2b04      	cmp	r3, #4
 800f77c:	bf02      	ittt	eq
 800f77e:	68e5      	ldreq	r5, [r4, #12]
 800f780:	6833      	ldreq	r3, [r6, #0]
 800f782:	1aed      	subeq	r5, r5, r3
 800f784:	68a3      	ldr	r3, [r4, #8]
 800f786:	bf0c      	ite	eq
 800f788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f78c:	2500      	movne	r5, #0
 800f78e:	4293      	cmp	r3, r2
 800f790:	bfc4      	itt	gt
 800f792:	1a9b      	subgt	r3, r3, r2
 800f794:	18ed      	addgt	r5, r5, r3
 800f796:	2600      	movs	r6, #0
 800f798:	341a      	adds	r4, #26
 800f79a:	42b5      	cmp	r5, r6
 800f79c:	d11a      	bne.n	800f7d4 <_printf_common+0xc8>
 800f79e:	2000      	movs	r0, #0
 800f7a0:	e008      	b.n	800f7b4 <_printf_common+0xa8>
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	4652      	mov	r2, sl
 800f7a6:	4641      	mov	r1, r8
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	47c8      	blx	r9
 800f7ac:	3001      	adds	r0, #1
 800f7ae:	d103      	bne.n	800f7b8 <_printf_common+0xac>
 800f7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b8:	3501      	adds	r5, #1
 800f7ba:	e7c6      	b.n	800f74a <_printf_common+0x3e>
 800f7bc:	18e1      	adds	r1, r4, r3
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	2030      	movs	r0, #48	@ 0x30
 800f7c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7c6:	4422      	add	r2, r4
 800f7c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7d0:	3302      	adds	r3, #2
 800f7d2:	e7c7      	b.n	800f764 <_printf_common+0x58>
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	4622      	mov	r2, r4
 800f7d8:	4641      	mov	r1, r8
 800f7da:	4638      	mov	r0, r7
 800f7dc:	47c8      	blx	r9
 800f7de:	3001      	adds	r0, #1
 800f7e0:	d0e6      	beq.n	800f7b0 <_printf_common+0xa4>
 800f7e2:	3601      	adds	r6, #1
 800f7e4:	e7d9      	b.n	800f79a <_printf_common+0x8e>
	...

0800f7e8 <_printf_i>:
 800f7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ec:	7e0f      	ldrb	r7, [r1, #24]
 800f7ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7f0:	2f78      	cmp	r7, #120	@ 0x78
 800f7f2:	4691      	mov	r9, r2
 800f7f4:	4680      	mov	r8, r0
 800f7f6:	460c      	mov	r4, r1
 800f7f8:	469a      	mov	sl, r3
 800f7fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7fe:	d807      	bhi.n	800f810 <_printf_i+0x28>
 800f800:	2f62      	cmp	r7, #98	@ 0x62
 800f802:	d80a      	bhi.n	800f81a <_printf_i+0x32>
 800f804:	2f00      	cmp	r7, #0
 800f806:	f000 80d2 	beq.w	800f9ae <_printf_i+0x1c6>
 800f80a:	2f58      	cmp	r7, #88	@ 0x58
 800f80c:	f000 80b9 	beq.w	800f982 <_printf_i+0x19a>
 800f810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f818:	e03a      	b.n	800f890 <_printf_i+0xa8>
 800f81a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f81e:	2b15      	cmp	r3, #21
 800f820:	d8f6      	bhi.n	800f810 <_printf_i+0x28>
 800f822:	a101      	add	r1, pc, #4	@ (adr r1, 800f828 <_printf_i+0x40>)
 800f824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f828:	0800f881 	.word	0x0800f881
 800f82c:	0800f895 	.word	0x0800f895
 800f830:	0800f811 	.word	0x0800f811
 800f834:	0800f811 	.word	0x0800f811
 800f838:	0800f811 	.word	0x0800f811
 800f83c:	0800f811 	.word	0x0800f811
 800f840:	0800f895 	.word	0x0800f895
 800f844:	0800f811 	.word	0x0800f811
 800f848:	0800f811 	.word	0x0800f811
 800f84c:	0800f811 	.word	0x0800f811
 800f850:	0800f811 	.word	0x0800f811
 800f854:	0800f995 	.word	0x0800f995
 800f858:	0800f8bf 	.word	0x0800f8bf
 800f85c:	0800f94f 	.word	0x0800f94f
 800f860:	0800f811 	.word	0x0800f811
 800f864:	0800f811 	.word	0x0800f811
 800f868:	0800f9b7 	.word	0x0800f9b7
 800f86c:	0800f811 	.word	0x0800f811
 800f870:	0800f8bf 	.word	0x0800f8bf
 800f874:	0800f811 	.word	0x0800f811
 800f878:	0800f811 	.word	0x0800f811
 800f87c:	0800f957 	.word	0x0800f957
 800f880:	6833      	ldr	r3, [r6, #0]
 800f882:	1d1a      	adds	r2, r3, #4
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	6032      	str	r2, [r6, #0]
 800f888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f88c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f890:	2301      	movs	r3, #1
 800f892:	e09d      	b.n	800f9d0 <_printf_i+0x1e8>
 800f894:	6833      	ldr	r3, [r6, #0]
 800f896:	6820      	ldr	r0, [r4, #0]
 800f898:	1d19      	adds	r1, r3, #4
 800f89a:	6031      	str	r1, [r6, #0]
 800f89c:	0606      	lsls	r6, r0, #24
 800f89e:	d501      	bpl.n	800f8a4 <_printf_i+0xbc>
 800f8a0:	681d      	ldr	r5, [r3, #0]
 800f8a2:	e003      	b.n	800f8ac <_printf_i+0xc4>
 800f8a4:	0645      	lsls	r5, r0, #25
 800f8a6:	d5fb      	bpl.n	800f8a0 <_printf_i+0xb8>
 800f8a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f8ac:	2d00      	cmp	r5, #0
 800f8ae:	da03      	bge.n	800f8b8 <_printf_i+0xd0>
 800f8b0:	232d      	movs	r3, #45	@ 0x2d
 800f8b2:	426d      	negs	r5, r5
 800f8b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8b8:	4859      	ldr	r0, [pc, #356]	@ (800fa20 <_printf_i+0x238>)
 800f8ba:	230a      	movs	r3, #10
 800f8bc:	e011      	b.n	800f8e2 <_printf_i+0xfa>
 800f8be:	6821      	ldr	r1, [r4, #0]
 800f8c0:	6833      	ldr	r3, [r6, #0]
 800f8c2:	0608      	lsls	r0, r1, #24
 800f8c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8c8:	d402      	bmi.n	800f8d0 <_printf_i+0xe8>
 800f8ca:	0649      	lsls	r1, r1, #25
 800f8cc:	bf48      	it	mi
 800f8ce:	b2ad      	uxthmi	r5, r5
 800f8d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8d2:	4853      	ldr	r0, [pc, #332]	@ (800fa20 <_printf_i+0x238>)
 800f8d4:	6033      	str	r3, [r6, #0]
 800f8d6:	bf14      	ite	ne
 800f8d8:	230a      	movne	r3, #10
 800f8da:	2308      	moveq	r3, #8
 800f8dc:	2100      	movs	r1, #0
 800f8de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f8e2:	6866      	ldr	r6, [r4, #4]
 800f8e4:	60a6      	str	r6, [r4, #8]
 800f8e6:	2e00      	cmp	r6, #0
 800f8e8:	bfa2      	ittt	ge
 800f8ea:	6821      	ldrge	r1, [r4, #0]
 800f8ec:	f021 0104 	bicge.w	r1, r1, #4
 800f8f0:	6021      	strge	r1, [r4, #0]
 800f8f2:	b90d      	cbnz	r5, 800f8f8 <_printf_i+0x110>
 800f8f4:	2e00      	cmp	r6, #0
 800f8f6:	d04b      	beq.n	800f990 <_printf_i+0x1a8>
 800f8f8:	4616      	mov	r6, r2
 800f8fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8fe:	fb03 5711 	mls	r7, r3, r1, r5
 800f902:	5dc7      	ldrb	r7, [r0, r7]
 800f904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f908:	462f      	mov	r7, r5
 800f90a:	42bb      	cmp	r3, r7
 800f90c:	460d      	mov	r5, r1
 800f90e:	d9f4      	bls.n	800f8fa <_printf_i+0x112>
 800f910:	2b08      	cmp	r3, #8
 800f912:	d10b      	bne.n	800f92c <_printf_i+0x144>
 800f914:	6823      	ldr	r3, [r4, #0]
 800f916:	07df      	lsls	r7, r3, #31
 800f918:	d508      	bpl.n	800f92c <_printf_i+0x144>
 800f91a:	6923      	ldr	r3, [r4, #16]
 800f91c:	6861      	ldr	r1, [r4, #4]
 800f91e:	4299      	cmp	r1, r3
 800f920:	bfde      	ittt	le
 800f922:	2330      	movle	r3, #48	@ 0x30
 800f924:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f92c:	1b92      	subs	r2, r2, r6
 800f92e:	6122      	str	r2, [r4, #16]
 800f930:	f8cd a000 	str.w	sl, [sp]
 800f934:	464b      	mov	r3, r9
 800f936:	aa03      	add	r2, sp, #12
 800f938:	4621      	mov	r1, r4
 800f93a:	4640      	mov	r0, r8
 800f93c:	f7ff fee6 	bl	800f70c <_printf_common>
 800f940:	3001      	adds	r0, #1
 800f942:	d14a      	bne.n	800f9da <_printf_i+0x1f2>
 800f944:	f04f 30ff 	mov.w	r0, #4294967295
 800f948:	b004      	add	sp, #16
 800f94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	f043 0320 	orr.w	r3, r3, #32
 800f954:	6023      	str	r3, [r4, #0]
 800f956:	4833      	ldr	r0, [pc, #204]	@ (800fa24 <_printf_i+0x23c>)
 800f958:	2778      	movs	r7, #120	@ 0x78
 800f95a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	6831      	ldr	r1, [r6, #0]
 800f962:	061f      	lsls	r7, r3, #24
 800f964:	f851 5b04 	ldr.w	r5, [r1], #4
 800f968:	d402      	bmi.n	800f970 <_printf_i+0x188>
 800f96a:	065f      	lsls	r7, r3, #25
 800f96c:	bf48      	it	mi
 800f96e:	b2ad      	uxthmi	r5, r5
 800f970:	6031      	str	r1, [r6, #0]
 800f972:	07d9      	lsls	r1, r3, #31
 800f974:	bf44      	itt	mi
 800f976:	f043 0320 	orrmi.w	r3, r3, #32
 800f97a:	6023      	strmi	r3, [r4, #0]
 800f97c:	b11d      	cbz	r5, 800f986 <_printf_i+0x19e>
 800f97e:	2310      	movs	r3, #16
 800f980:	e7ac      	b.n	800f8dc <_printf_i+0xf4>
 800f982:	4827      	ldr	r0, [pc, #156]	@ (800fa20 <_printf_i+0x238>)
 800f984:	e7e9      	b.n	800f95a <_printf_i+0x172>
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	f023 0320 	bic.w	r3, r3, #32
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	e7f6      	b.n	800f97e <_printf_i+0x196>
 800f990:	4616      	mov	r6, r2
 800f992:	e7bd      	b.n	800f910 <_printf_i+0x128>
 800f994:	6833      	ldr	r3, [r6, #0]
 800f996:	6825      	ldr	r5, [r4, #0]
 800f998:	6961      	ldr	r1, [r4, #20]
 800f99a:	1d18      	adds	r0, r3, #4
 800f99c:	6030      	str	r0, [r6, #0]
 800f99e:	062e      	lsls	r6, r5, #24
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	d501      	bpl.n	800f9a8 <_printf_i+0x1c0>
 800f9a4:	6019      	str	r1, [r3, #0]
 800f9a6:	e002      	b.n	800f9ae <_printf_i+0x1c6>
 800f9a8:	0668      	lsls	r0, r5, #25
 800f9aa:	d5fb      	bpl.n	800f9a4 <_printf_i+0x1bc>
 800f9ac:	8019      	strh	r1, [r3, #0]
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	6123      	str	r3, [r4, #16]
 800f9b2:	4616      	mov	r6, r2
 800f9b4:	e7bc      	b.n	800f930 <_printf_i+0x148>
 800f9b6:	6833      	ldr	r3, [r6, #0]
 800f9b8:	1d1a      	adds	r2, r3, #4
 800f9ba:	6032      	str	r2, [r6, #0]
 800f9bc:	681e      	ldr	r6, [r3, #0]
 800f9be:	6862      	ldr	r2, [r4, #4]
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f7f0 fc14 	bl	80001f0 <memchr>
 800f9c8:	b108      	cbz	r0, 800f9ce <_printf_i+0x1e6>
 800f9ca:	1b80      	subs	r0, r0, r6
 800f9cc:	6060      	str	r0, [r4, #4]
 800f9ce:	6863      	ldr	r3, [r4, #4]
 800f9d0:	6123      	str	r3, [r4, #16]
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9d8:	e7aa      	b.n	800f930 <_printf_i+0x148>
 800f9da:	6923      	ldr	r3, [r4, #16]
 800f9dc:	4632      	mov	r2, r6
 800f9de:	4649      	mov	r1, r9
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	47d0      	blx	sl
 800f9e4:	3001      	adds	r0, #1
 800f9e6:	d0ad      	beq.n	800f944 <_printf_i+0x15c>
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	079b      	lsls	r3, r3, #30
 800f9ec:	d413      	bmi.n	800fa16 <_printf_i+0x22e>
 800f9ee:	68e0      	ldr	r0, [r4, #12]
 800f9f0:	9b03      	ldr	r3, [sp, #12]
 800f9f2:	4298      	cmp	r0, r3
 800f9f4:	bfb8      	it	lt
 800f9f6:	4618      	movlt	r0, r3
 800f9f8:	e7a6      	b.n	800f948 <_printf_i+0x160>
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	4649      	mov	r1, r9
 800fa00:	4640      	mov	r0, r8
 800fa02:	47d0      	blx	sl
 800fa04:	3001      	adds	r0, #1
 800fa06:	d09d      	beq.n	800f944 <_printf_i+0x15c>
 800fa08:	3501      	adds	r5, #1
 800fa0a:	68e3      	ldr	r3, [r4, #12]
 800fa0c:	9903      	ldr	r1, [sp, #12]
 800fa0e:	1a5b      	subs	r3, r3, r1
 800fa10:	42ab      	cmp	r3, r5
 800fa12:	dcf2      	bgt.n	800f9fa <_printf_i+0x212>
 800fa14:	e7eb      	b.n	800f9ee <_printf_i+0x206>
 800fa16:	2500      	movs	r5, #0
 800fa18:	f104 0619 	add.w	r6, r4, #25
 800fa1c:	e7f5      	b.n	800fa0a <_printf_i+0x222>
 800fa1e:	bf00      	nop
 800fa20:	08012a46 	.word	0x08012a46
 800fa24:	08012a57 	.word	0x08012a57

0800fa28 <__sflush_r>:
 800fa28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa30:	0716      	lsls	r6, r2, #28
 800fa32:	4605      	mov	r5, r0
 800fa34:	460c      	mov	r4, r1
 800fa36:	d454      	bmi.n	800fae2 <__sflush_r+0xba>
 800fa38:	684b      	ldr	r3, [r1, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	dc02      	bgt.n	800fa44 <__sflush_r+0x1c>
 800fa3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	dd48      	ble.n	800fad6 <__sflush_r+0xae>
 800fa44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fa46:	2e00      	cmp	r6, #0
 800fa48:	d045      	beq.n	800fad6 <__sflush_r+0xae>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fa50:	682f      	ldr	r7, [r5, #0]
 800fa52:	6a21      	ldr	r1, [r4, #32]
 800fa54:	602b      	str	r3, [r5, #0]
 800fa56:	d030      	beq.n	800faba <__sflush_r+0x92>
 800fa58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fa5a:	89a3      	ldrh	r3, [r4, #12]
 800fa5c:	0759      	lsls	r1, r3, #29
 800fa5e:	d505      	bpl.n	800fa6c <__sflush_r+0x44>
 800fa60:	6863      	ldr	r3, [r4, #4]
 800fa62:	1ad2      	subs	r2, r2, r3
 800fa64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fa66:	b10b      	cbz	r3, 800fa6c <__sflush_r+0x44>
 800fa68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fa6a:	1ad2      	subs	r2, r2, r3
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fa70:	6a21      	ldr	r1, [r4, #32]
 800fa72:	4628      	mov	r0, r5
 800fa74:	47b0      	blx	r6
 800fa76:	1c43      	adds	r3, r0, #1
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	d106      	bne.n	800fa8a <__sflush_r+0x62>
 800fa7c:	6829      	ldr	r1, [r5, #0]
 800fa7e:	291d      	cmp	r1, #29
 800fa80:	d82b      	bhi.n	800fada <__sflush_r+0xb2>
 800fa82:	4a2a      	ldr	r2, [pc, #168]	@ (800fb2c <__sflush_r+0x104>)
 800fa84:	410a      	asrs	r2, r1
 800fa86:	07d6      	lsls	r6, r2, #31
 800fa88:	d427      	bmi.n	800fada <__sflush_r+0xb2>
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	6062      	str	r2, [r4, #4]
 800fa8e:	04d9      	lsls	r1, r3, #19
 800fa90:	6922      	ldr	r2, [r4, #16]
 800fa92:	6022      	str	r2, [r4, #0]
 800fa94:	d504      	bpl.n	800faa0 <__sflush_r+0x78>
 800fa96:	1c42      	adds	r2, r0, #1
 800fa98:	d101      	bne.n	800fa9e <__sflush_r+0x76>
 800fa9a:	682b      	ldr	r3, [r5, #0]
 800fa9c:	b903      	cbnz	r3, 800faa0 <__sflush_r+0x78>
 800fa9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800faa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800faa2:	602f      	str	r7, [r5, #0]
 800faa4:	b1b9      	cbz	r1, 800fad6 <__sflush_r+0xae>
 800faa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800faaa:	4299      	cmp	r1, r3
 800faac:	d002      	beq.n	800fab4 <__sflush_r+0x8c>
 800faae:	4628      	mov	r0, r5
 800fab0:	f7ff fbea 	bl	800f288 <_free_r>
 800fab4:	2300      	movs	r3, #0
 800fab6:	6363      	str	r3, [r4, #52]	@ 0x34
 800fab8:	e00d      	b.n	800fad6 <__sflush_r+0xae>
 800faba:	2301      	movs	r3, #1
 800fabc:	4628      	mov	r0, r5
 800fabe:	47b0      	blx	r6
 800fac0:	4602      	mov	r2, r0
 800fac2:	1c50      	adds	r0, r2, #1
 800fac4:	d1c9      	bne.n	800fa5a <__sflush_r+0x32>
 800fac6:	682b      	ldr	r3, [r5, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d0c6      	beq.n	800fa5a <__sflush_r+0x32>
 800facc:	2b1d      	cmp	r3, #29
 800face:	d001      	beq.n	800fad4 <__sflush_r+0xac>
 800fad0:	2b16      	cmp	r3, #22
 800fad2:	d11e      	bne.n	800fb12 <__sflush_r+0xea>
 800fad4:	602f      	str	r7, [r5, #0]
 800fad6:	2000      	movs	r0, #0
 800fad8:	e022      	b.n	800fb20 <__sflush_r+0xf8>
 800fada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fade:	b21b      	sxth	r3, r3
 800fae0:	e01b      	b.n	800fb1a <__sflush_r+0xf2>
 800fae2:	690f      	ldr	r7, [r1, #16]
 800fae4:	2f00      	cmp	r7, #0
 800fae6:	d0f6      	beq.n	800fad6 <__sflush_r+0xae>
 800fae8:	0793      	lsls	r3, r2, #30
 800faea:	680e      	ldr	r6, [r1, #0]
 800faec:	bf08      	it	eq
 800faee:	694b      	ldreq	r3, [r1, #20]
 800faf0:	600f      	str	r7, [r1, #0]
 800faf2:	bf18      	it	ne
 800faf4:	2300      	movne	r3, #0
 800faf6:	eba6 0807 	sub.w	r8, r6, r7
 800fafa:	608b      	str	r3, [r1, #8]
 800fafc:	f1b8 0f00 	cmp.w	r8, #0
 800fb00:	dde9      	ble.n	800fad6 <__sflush_r+0xae>
 800fb02:	6a21      	ldr	r1, [r4, #32]
 800fb04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb06:	4643      	mov	r3, r8
 800fb08:	463a      	mov	r2, r7
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	47b0      	blx	r6
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	dc08      	bgt.n	800fb24 <__sflush_r+0xfc>
 800fb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb1a:	81a3      	strh	r3, [r4, #12]
 800fb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb24:	4407      	add	r7, r0
 800fb26:	eba8 0800 	sub.w	r8, r8, r0
 800fb2a:	e7e7      	b.n	800fafc <__sflush_r+0xd4>
 800fb2c:	dfbffffe 	.word	0xdfbffffe

0800fb30 <_fflush_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	690b      	ldr	r3, [r1, #16]
 800fb34:	4605      	mov	r5, r0
 800fb36:	460c      	mov	r4, r1
 800fb38:	b913      	cbnz	r3, 800fb40 <_fflush_r+0x10>
 800fb3a:	2500      	movs	r5, #0
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	bd38      	pop	{r3, r4, r5, pc}
 800fb40:	b118      	cbz	r0, 800fb4a <_fflush_r+0x1a>
 800fb42:	6a03      	ldr	r3, [r0, #32]
 800fb44:	b90b      	cbnz	r3, 800fb4a <_fflush_r+0x1a>
 800fb46:	f7ff fa61 	bl	800f00c <__sinit>
 800fb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d0f3      	beq.n	800fb3a <_fflush_r+0xa>
 800fb52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fb54:	07d0      	lsls	r0, r2, #31
 800fb56:	d404      	bmi.n	800fb62 <_fflush_r+0x32>
 800fb58:	0599      	lsls	r1, r3, #22
 800fb5a:	d402      	bmi.n	800fb62 <_fflush_r+0x32>
 800fb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb5e:	f7ff fb64 	bl	800f22a <__retarget_lock_acquire_recursive>
 800fb62:	4628      	mov	r0, r5
 800fb64:	4621      	mov	r1, r4
 800fb66:	f7ff ff5f 	bl	800fa28 <__sflush_r>
 800fb6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb6c:	07da      	lsls	r2, r3, #31
 800fb6e:	4605      	mov	r5, r0
 800fb70:	d4e4      	bmi.n	800fb3c <_fflush_r+0xc>
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	059b      	lsls	r3, r3, #22
 800fb76:	d4e1      	bmi.n	800fb3c <_fflush_r+0xc>
 800fb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb7a:	f7ff fb57 	bl	800f22c <__retarget_lock_release_recursive>
 800fb7e:	e7dd      	b.n	800fb3c <_fflush_r+0xc>

0800fb80 <fiprintf>:
 800fb80:	b40e      	push	{r1, r2, r3}
 800fb82:	b503      	push	{r0, r1, lr}
 800fb84:	4601      	mov	r1, r0
 800fb86:	ab03      	add	r3, sp, #12
 800fb88:	4805      	ldr	r0, [pc, #20]	@ (800fba0 <fiprintf+0x20>)
 800fb8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb8e:	6800      	ldr	r0, [r0, #0]
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	f7ff fca3 	bl	800f4dc <_vfiprintf_r>
 800fb96:	b002      	add	sp, #8
 800fb98:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb9c:	b003      	add	sp, #12
 800fb9e:	4770      	bx	lr
 800fba0:	20000038 	.word	0x20000038

0800fba4 <__swbuf_r>:
 800fba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba6:	460e      	mov	r6, r1
 800fba8:	4614      	mov	r4, r2
 800fbaa:	4605      	mov	r5, r0
 800fbac:	b118      	cbz	r0, 800fbb6 <__swbuf_r+0x12>
 800fbae:	6a03      	ldr	r3, [r0, #32]
 800fbb0:	b90b      	cbnz	r3, 800fbb6 <__swbuf_r+0x12>
 800fbb2:	f7ff fa2b 	bl	800f00c <__sinit>
 800fbb6:	69a3      	ldr	r3, [r4, #24]
 800fbb8:	60a3      	str	r3, [r4, #8]
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	071a      	lsls	r2, r3, #28
 800fbbe:	d501      	bpl.n	800fbc4 <__swbuf_r+0x20>
 800fbc0:	6923      	ldr	r3, [r4, #16]
 800fbc2:	b943      	cbnz	r3, 800fbd6 <__swbuf_r+0x32>
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	f000 f82a 	bl	800fc20 <__swsetup_r>
 800fbcc:	b118      	cbz	r0, 800fbd6 <__swbuf_r+0x32>
 800fbce:	f04f 37ff 	mov.w	r7, #4294967295
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	6922      	ldr	r2, [r4, #16]
 800fbda:	1a98      	subs	r0, r3, r2
 800fbdc:	6963      	ldr	r3, [r4, #20]
 800fbde:	b2f6      	uxtb	r6, r6
 800fbe0:	4283      	cmp	r3, r0
 800fbe2:	4637      	mov	r7, r6
 800fbe4:	dc05      	bgt.n	800fbf2 <__swbuf_r+0x4e>
 800fbe6:	4621      	mov	r1, r4
 800fbe8:	4628      	mov	r0, r5
 800fbea:	f7ff ffa1 	bl	800fb30 <_fflush_r>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d1ed      	bne.n	800fbce <__swbuf_r+0x2a>
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	60a3      	str	r3, [r4, #8]
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	6022      	str	r2, [r4, #0]
 800fbfe:	701e      	strb	r6, [r3, #0]
 800fc00:	6962      	ldr	r2, [r4, #20]
 800fc02:	1c43      	adds	r3, r0, #1
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d004      	beq.n	800fc12 <__swbuf_r+0x6e>
 800fc08:	89a3      	ldrh	r3, [r4, #12]
 800fc0a:	07db      	lsls	r3, r3, #31
 800fc0c:	d5e1      	bpl.n	800fbd2 <__swbuf_r+0x2e>
 800fc0e:	2e0a      	cmp	r6, #10
 800fc10:	d1df      	bne.n	800fbd2 <__swbuf_r+0x2e>
 800fc12:	4621      	mov	r1, r4
 800fc14:	4628      	mov	r0, r5
 800fc16:	f7ff ff8b 	bl	800fb30 <_fflush_r>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	d0d9      	beq.n	800fbd2 <__swbuf_r+0x2e>
 800fc1e:	e7d6      	b.n	800fbce <__swbuf_r+0x2a>

0800fc20 <__swsetup_r>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	4b29      	ldr	r3, [pc, #164]	@ (800fcc8 <__swsetup_r+0xa8>)
 800fc24:	4605      	mov	r5, r0
 800fc26:	6818      	ldr	r0, [r3, #0]
 800fc28:	460c      	mov	r4, r1
 800fc2a:	b118      	cbz	r0, 800fc34 <__swsetup_r+0x14>
 800fc2c:	6a03      	ldr	r3, [r0, #32]
 800fc2e:	b90b      	cbnz	r3, 800fc34 <__swsetup_r+0x14>
 800fc30:	f7ff f9ec 	bl	800f00c <__sinit>
 800fc34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc38:	0719      	lsls	r1, r3, #28
 800fc3a:	d422      	bmi.n	800fc82 <__swsetup_r+0x62>
 800fc3c:	06da      	lsls	r2, r3, #27
 800fc3e:	d407      	bmi.n	800fc50 <__swsetup_r+0x30>
 800fc40:	2209      	movs	r2, #9
 800fc42:	602a      	str	r2, [r5, #0]
 800fc44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc48:	81a3      	strh	r3, [r4, #12]
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	e033      	b.n	800fcb8 <__swsetup_r+0x98>
 800fc50:	0758      	lsls	r0, r3, #29
 800fc52:	d512      	bpl.n	800fc7a <__swsetup_r+0x5a>
 800fc54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc56:	b141      	cbz	r1, 800fc6a <__swsetup_r+0x4a>
 800fc58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc5c:	4299      	cmp	r1, r3
 800fc5e:	d002      	beq.n	800fc66 <__swsetup_r+0x46>
 800fc60:	4628      	mov	r0, r5
 800fc62:	f7ff fb11 	bl	800f288 <_free_r>
 800fc66:	2300      	movs	r3, #0
 800fc68:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc70:	81a3      	strh	r3, [r4, #12]
 800fc72:	2300      	movs	r3, #0
 800fc74:	6063      	str	r3, [r4, #4]
 800fc76:	6923      	ldr	r3, [r4, #16]
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	89a3      	ldrh	r3, [r4, #12]
 800fc7c:	f043 0308 	orr.w	r3, r3, #8
 800fc80:	81a3      	strh	r3, [r4, #12]
 800fc82:	6923      	ldr	r3, [r4, #16]
 800fc84:	b94b      	cbnz	r3, 800fc9a <__swsetup_r+0x7a>
 800fc86:	89a3      	ldrh	r3, [r4, #12]
 800fc88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc90:	d003      	beq.n	800fc9a <__swsetup_r+0x7a>
 800fc92:	4621      	mov	r1, r4
 800fc94:	4628      	mov	r0, r5
 800fc96:	f000 f856 	bl	800fd46 <__smakebuf_r>
 800fc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc9e:	f013 0201 	ands.w	r2, r3, #1
 800fca2:	d00a      	beq.n	800fcba <__swsetup_r+0x9a>
 800fca4:	2200      	movs	r2, #0
 800fca6:	60a2      	str	r2, [r4, #8]
 800fca8:	6962      	ldr	r2, [r4, #20]
 800fcaa:	4252      	negs	r2, r2
 800fcac:	61a2      	str	r2, [r4, #24]
 800fcae:	6922      	ldr	r2, [r4, #16]
 800fcb0:	b942      	cbnz	r2, 800fcc4 <__swsetup_r+0xa4>
 800fcb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fcb6:	d1c5      	bne.n	800fc44 <__swsetup_r+0x24>
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	0799      	lsls	r1, r3, #30
 800fcbc:	bf58      	it	pl
 800fcbe:	6962      	ldrpl	r2, [r4, #20]
 800fcc0:	60a2      	str	r2, [r4, #8]
 800fcc2:	e7f4      	b.n	800fcae <__swsetup_r+0x8e>
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	e7f7      	b.n	800fcb8 <__swsetup_r+0x98>
 800fcc8:	20000038 	.word	0x20000038

0800fccc <_sbrk_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d06      	ldr	r5, [pc, #24]	@ (800fce8 <_sbrk_r+0x1c>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	f7f0 ff62 	bl	8000ba0 <_sbrk>
 800fcdc:	1c43      	adds	r3, r0, #1
 800fcde:	d102      	bne.n	800fce6 <_sbrk_r+0x1a>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	b103      	cbz	r3, 800fce6 <_sbrk_r+0x1a>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	20008574 	.word	0x20008574

0800fcec <abort>:
 800fcec:	b508      	push	{r3, lr}
 800fcee:	2006      	movs	r0, #6
 800fcf0:	f000 f88e 	bl	800fe10 <raise>
 800fcf4:	2001      	movs	r0, #1
 800fcf6:	f7f0 fedb 	bl	8000ab0 <_exit>

0800fcfa <__swhatbuf_r>:
 800fcfa:	b570      	push	{r4, r5, r6, lr}
 800fcfc:	460c      	mov	r4, r1
 800fcfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd02:	2900      	cmp	r1, #0
 800fd04:	b096      	sub	sp, #88	@ 0x58
 800fd06:	4615      	mov	r5, r2
 800fd08:	461e      	mov	r6, r3
 800fd0a:	da0d      	bge.n	800fd28 <__swhatbuf_r+0x2e>
 800fd0c:	89a3      	ldrh	r3, [r4, #12]
 800fd0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd12:	f04f 0100 	mov.w	r1, #0
 800fd16:	bf14      	ite	ne
 800fd18:	2340      	movne	r3, #64	@ 0x40
 800fd1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd1e:	2000      	movs	r0, #0
 800fd20:	6031      	str	r1, [r6, #0]
 800fd22:	602b      	str	r3, [r5, #0]
 800fd24:	b016      	add	sp, #88	@ 0x58
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	466a      	mov	r2, sp
 800fd2a:	f000 f879 	bl	800fe20 <_fstat_r>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	dbec      	blt.n	800fd0c <__swhatbuf_r+0x12>
 800fd32:	9901      	ldr	r1, [sp, #4]
 800fd34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd3c:	4259      	negs	r1, r3
 800fd3e:	4159      	adcs	r1, r3
 800fd40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd44:	e7eb      	b.n	800fd1e <__swhatbuf_r+0x24>

0800fd46 <__smakebuf_r>:
 800fd46:	898b      	ldrh	r3, [r1, #12]
 800fd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd4a:	079d      	lsls	r5, r3, #30
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	460c      	mov	r4, r1
 800fd50:	d507      	bpl.n	800fd62 <__smakebuf_r+0x1c>
 800fd52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd56:	6023      	str	r3, [r4, #0]
 800fd58:	6123      	str	r3, [r4, #16]
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	6163      	str	r3, [r4, #20]
 800fd5e:	b003      	add	sp, #12
 800fd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd62:	ab01      	add	r3, sp, #4
 800fd64:	466a      	mov	r2, sp
 800fd66:	f7ff ffc8 	bl	800fcfa <__swhatbuf_r>
 800fd6a:	9f00      	ldr	r7, [sp, #0]
 800fd6c:	4605      	mov	r5, r0
 800fd6e:	4639      	mov	r1, r7
 800fd70:	4630      	mov	r0, r6
 800fd72:	f7ff fafd 	bl	800f370 <_malloc_r>
 800fd76:	b948      	cbnz	r0, 800fd8c <__smakebuf_r+0x46>
 800fd78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd7c:	059a      	lsls	r2, r3, #22
 800fd7e:	d4ee      	bmi.n	800fd5e <__smakebuf_r+0x18>
 800fd80:	f023 0303 	bic.w	r3, r3, #3
 800fd84:	f043 0302 	orr.w	r3, r3, #2
 800fd88:	81a3      	strh	r3, [r4, #12]
 800fd8a:	e7e2      	b.n	800fd52 <__smakebuf_r+0xc>
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	6020      	str	r0, [r4, #0]
 800fd90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	9b01      	ldr	r3, [sp, #4]
 800fd98:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd9c:	b15b      	cbz	r3, 800fdb6 <__smakebuf_r+0x70>
 800fd9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fda2:	4630      	mov	r0, r6
 800fda4:	f000 f84e 	bl	800fe44 <_isatty_r>
 800fda8:	b128      	cbz	r0, 800fdb6 <__smakebuf_r+0x70>
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f023 0303 	bic.w	r3, r3, #3
 800fdb0:	f043 0301 	orr.w	r3, r3, #1
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	89a3      	ldrh	r3, [r4, #12]
 800fdb8:	431d      	orrs	r5, r3
 800fdba:	81a5      	strh	r5, [r4, #12]
 800fdbc:	e7cf      	b.n	800fd5e <__smakebuf_r+0x18>

0800fdbe <_raise_r>:
 800fdbe:	291f      	cmp	r1, #31
 800fdc0:	b538      	push	{r3, r4, r5, lr}
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	d904      	bls.n	800fdd2 <_raise_r+0x14>
 800fdc8:	2316      	movs	r3, #22
 800fdca:	6003      	str	r3, [r0, #0]
 800fdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd0:	bd38      	pop	{r3, r4, r5, pc}
 800fdd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fdd4:	b112      	cbz	r2, 800fddc <_raise_r+0x1e>
 800fdd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdda:	b94b      	cbnz	r3, 800fdf0 <_raise_r+0x32>
 800fddc:	4628      	mov	r0, r5
 800fdde:	f000 f853 	bl	800fe88 <_getpid_r>
 800fde2:	4622      	mov	r2, r4
 800fde4:	4601      	mov	r1, r0
 800fde6:	4628      	mov	r0, r5
 800fde8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdec:	f000 b83a 	b.w	800fe64 <_kill_r>
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d00a      	beq.n	800fe0a <_raise_r+0x4c>
 800fdf4:	1c59      	adds	r1, r3, #1
 800fdf6:	d103      	bne.n	800fe00 <_raise_r+0x42>
 800fdf8:	2316      	movs	r3, #22
 800fdfa:	6003      	str	r3, [r0, #0]
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	e7e7      	b.n	800fdd0 <_raise_r+0x12>
 800fe00:	2100      	movs	r1, #0
 800fe02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe06:	4620      	mov	r0, r4
 800fe08:	4798      	blx	r3
 800fe0a:	2000      	movs	r0, #0
 800fe0c:	e7e0      	b.n	800fdd0 <_raise_r+0x12>
	...

0800fe10 <raise>:
 800fe10:	4b02      	ldr	r3, [pc, #8]	@ (800fe1c <raise+0xc>)
 800fe12:	4601      	mov	r1, r0
 800fe14:	6818      	ldr	r0, [r3, #0]
 800fe16:	f7ff bfd2 	b.w	800fdbe <_raise_r>
 800fe1a:	bf00      	nop
 800fe1c:	20000038 	.word	0x20000038

0800fe20 <_fstat_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4d07      	ldr	r5, [pc, #28]	@ (800fe40 <_fstat_r+0x20>)
 800fe24:	2300      	movs	r3, #0
 800fe26:	4604      	mov	r4, r0
 800fe28:	4608      	mov	r0, r1
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	602b      	str	r3, [r5, #0]
 800fe2e:	f7f0 fe8f 	bl	8000b50 <_fstat>
 800fe32:	1c43      	adds	r3, r0, #1
 800fe34:	d102      	bne.n	800fe3c <_fstat_r+0x1c>
 800fe36:	682b      	ldr	r3, [r5, #0]
 800fe38:	b103      	cbz	r3, 800fe3c <_fstat_r+0x1c>
 800fe3a:	6023      	str	r3, [r4, #0]
 800fe3c:	bd38      	pop	{r3, r4, r5, pc}
 800fe3e:	bf00      	nop
 800fe40:	20008574 	.word	0x20008574

0800fe44 <_isatty_r>:
 800fe44:	b538      	push	{r3, r4, r5, lr}
 800fe46:	4d06      	ldr	r5, [pc, #24]	@ (800fe60 <_isatty_r+0x1c>)
 800fe48:	2300      	movs	r3, #0
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	4608      	mov	r0, r1
 800fe4e:	602b      	str	r3, [r5, #0]
 800fe50:	f7f0 fe8e 	bl	8000b70 <_isatty>
 800fe54:	1c43      	adds	r3, r0, #1
 800fe56:	d102      	bne.n	800fe5e <_isatty_r+0x1a>
 800fe58:	682b      	ldr	r3, [r5, #0]
 800fe5a:	b103      	cbz	r3, 800fe5e <_isatty_r+0x1a>
 800fe5c:	6023      	str	r3, [r4, #0]
 800fe5e:	bd38      	pop	{r3, r4, r5, pc}
 800fe60:	20008574 	.word	0x20008574

0800fe64 <_kill_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d07      	ldr	r5, [pc, #28]	@ (800fe84 <_kill_r+0x20>)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	4611      	mov	r1, r2
 800fe70:	602b      	str	r3, [r5, #0]
 800fe72:	f7f0 fe0b 	bl	8000a8c <_kill>
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	d102      	bne.n	800fe80 <_kill_r+0x1c>
 800fe7a:	682b      	ldr	r3, [r5, #0]
 800fe7c:	b103      	cbz	r3, 800fe80 <_kill_r+0x1c>
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	bd38      	pop	{r3, r4, r5, pc}
 800fe82:	bf00      	nop
 800fe84:	20008574 	.word	0x20008574

0800fe88 <_getpid_r>:
 800fe88:	f7f0 bdf7 	b.w	8000a7a <_getpid>

0800fe8c <_init>:
 800fe8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8e:	bf00      	nop
 800fe90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe92:	bc08      	pop	{r3}
 800fe94:	469e      	mov	lr, r3
 800fe96:	4770      	bx	lr

0800fe98 <_fini>:
 800fe98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe9a:	bf00      	nop
 800fe9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe9e:	bc08      	pop	{r3}
 800fea0:	469e      	mov	lr, r3
 800fea2:	4770      	bx	lr
